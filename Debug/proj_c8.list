
proj_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080021c0  080021c0  000031c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021e4  080021e4  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080021e4  080021e4  00004010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080021e4  080021e4  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021e4  080021e4  000031e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021e8  080021e8  000031e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080021ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  080021fc  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080021fc  0000407c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007859  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000155a  00000000  00000000  0000b892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0000cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000759  00000000  00000000  0000d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016724  00000000  00000000  0000ded1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b79  00000000  00000000  000245f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084637  00000000  00000000  0002e16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b27a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002720  00000000  00000000  000b27e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000b4f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080021a8 	.word	0x080021a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080021a8 	.word	0x080021a8

0800014c <setSpeed>:
static bool goingForward = false;
static bool goingBackward = false;
static int currentSpeed = BASE_SPEED;

void setSpeed(int speed1, int speed2)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed1);
 8000156:	4b06      	ldr	r3, [pc, #24]	@ (8000170 <setSpeed+0x24>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	687a      	ldr	r2, [r7, #4]
 800015c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed2);
 800015e:	4b04      	ldr	r3, [pc, #16]	@ (8000170 <setSpeed+0x24>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	683a      	ldr	r2, [r7, #0]
 8000164:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	2000002c 	.word	0x2000002c

08000174 <setDirections>:

void setDirections(bool in1, bool in2, bool in3, bool in4)
{
 8000174:	b590      	push	{r4, r7, lr}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	4604      	mov	r4, r0
 800017c:	4608      	mov	r0, r1
 800017e:	4611      	mov	r1, r2
 8000180:	461a      	mov	r2, r3
 8000182:	4623      	mov	r3, r4
 8000184:	71fb      	strb	r3, [r7, #7]
 8000186:	4603      	mov	r3, r0
 8000188:	71bb      	strb	r3, [r7, #6]
 800018a:	460b      	mov	r3, r1
 800018c:	717b      	strb	r3, [r7, #5]
 800018e:	4613      	mov	r3, r2
 8000190:	713b      	strb	r3, [r7, #4]
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, in1);
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	461a      	mov	r2, r3
 8000196:	2108      	movs	r1, #8
 8000198:	480c      	ldr	r0, [pc, #48]	@ (80001cc <setDirections+0x58>)
 800019a:	f000 ff64 	bl	8001066 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, in2);
 800019e:	79bb      	ldrb	r3, [r7, #6]
 80001a0:	461a      	mov	r2, r3
 80001a2:	2110      	movs	r1, #16
 80001a4:	4809      	ldr	r0, [pc, #36]	@ (80001cc <setDirections+0x58>)
 80001a6:	f000 ff5e 	bl	8001066 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, in3);
 80001aa:	797b      	ldrb	r3, [r7, #5]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2140      	movs	r1, #64	@ 0x40
 80001b0:	4806      	ldr	r0, [pc, #24]	@ (80001cc <setDirections+0x58>)
 80001b2:	f000 ff58 	bl	8001066 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, in4);
 80001b6:	793b      	ldrb	r3, [r7, #4]
 80001b8:	461a      	mov	r2, r3
 80001ba:	2120      	movs	r1, #32
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <setDirections+0x58>)
 80001be:	f000 ff52 	bl	8001066 <HAL_GPIO_WritePin>
}
 80001c2:	bf00      	nop
 80001c4:	370c      	adds	r7, #12
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd90      	pop	{r4, r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010800 	.word	0x40010800

080001d0 <resetDirection>:

void resetDirection()
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  // wcześniej inny kierunek
  stop();         // reset silników
 80001d4:	f000 f8ea 	bl	80003ac <stop>
  HAL_Delay(150); // odczekanie
 80001d8:	2096      	movs	r0, #150	@ 0x96
 80001da:	f000 fca1 	bl	8000b20 <HAL_Delay>
  currentSpeed = BASE_SPEED;
 80001de:	4b02      	ldr	r3, [pc, #8]	@ (80001e8 <resetDirection+0x18>)
 80001e0:	2245      	movs	r2, #69	@ 0x45
 80001e2:	601a      	str	r2, [r3, #0]
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000000 	.word	0x20000000

080001ec <toggleTurnLeft>:

void toggleTurnLeft()
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  if (turningRight)
 80001f0:	4b18      	ldr	r3, [pc, #96]	@ (8000254 <toggleTurnLeft+0x68>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d002      	beq.n	80001fe <toggleTurnLeft+0x12>
  {
    // przeciwny kierunek zatrzymuje pojazd
    stop();
 80001f8:	f000 f8d8 	bl	80003ac <stop>
    return;
 80001fc:	e029      	b.n	8000252 <toggleTurnLeft+0x66>
  }

  else if (turningLeft)
 80001fe:	4b16      	ldr	r3, [pc, #88]	@ (8000258 <toggleTurnLeft+0x6c>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d009      	beq.n	800021a <toggleTurnLeft+0x2e>
  {
    if (currentSpeed + SPEED_INCR <= 99)
 8000206:	4b15      	ldr	r3, [pc, #84]	@ (800025c <toggleTurnLeft+0x70>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2b59      	cmp	r3, #89	@ 0x59
 800020c:	dc07      	bgt.n	800021e <toggleTurnLeft+0x32>
    {
      currentSpeed += SPEED_INCR;
 800020e:	4b13      	ldr	r3, [pc, #76]	@ (800025c <toggleTurnLeft+0x70>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	330a      	adds	r3, #10
 8000214:	4a11      	ldr	r2, [pc, #68]	@ (800025c <toggleTurnLeft+0x70>)
 8000216:	6013      	str	r3, [r2, #0]
 8000218:	e001      	b.n	800021e <toggleTurnLeft+0x32>
    }
  }
  else
  {
    resetDirection();
 800021a:	f7ff ffd9 	bl	80001d0 <resetDirection>
  }

  setSpeed(currentSpeed, currentSpeed);
 800021e:	4b0f      	ldr	r3, [pc, #60]	@ (800025c <toggleTurnLeft+0x70>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <toggleTurnLeft+0x70>)
 8000224:	6812      	ldr	r2, [r2, #0]
 8000226:	4611      	mov	r1, r2
 8000228:	4618      	mov	r0, r3
 800022a:	f7ff ff8f 	bl	800014c <setSpeed>
  turningLeft = true;
 800022e:	4b0a      	ldr	r3, [pc, #40]	@ (8000258 <toggleTurnLeft+0x6c>)
 8000230:	2201      	movs	r2, #1
 8000232:	701a      	strb	r2, [r3, #0]
  turningRight = false;
 8000234:	4b07      	ldr	r3, [pc, #28]	@ (8000254 <toggleTurnLeft+0x68>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
  goingForward = false;
 800023a:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <toggleTurnLeft+0x74>)
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
  goingBackward = false;
 8000240:	4b08      	ldr	r3, [pc, #32]	@ (8000264 <toggleTurnLeft+0x78>)
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]

  // lewy silnik do tyłu
  // prawy silnik do przodu
  setDirections(false, true, true, false);
 8000246:	2300      	movs	r3, #0
 8000248:	2201      	movs	r2, #1
 800024a:	2101      	movs	r1, #1
 800024c:	2000      	movs	r0, #0
 800024e:	f7ff ff91 	bl	8000174 <setDirections>
}
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000075 	.word	0x20000075
 8000258:	20000074 	.word	0x20000074
 800025c:	20000000 	.word	0x20000000
 8000260:	20000076 	.word	0x20000076
 8000264:	20000077 	.word	0x20000077

08000268 <toggleTurnRight>:

void toggleTurnRight()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  if (turningLeft)
 800026c:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <toggleTurnRight+0x58>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d002      	beq.n	800027a <toggleTurnRight+0x12>
  {
    // przeciwny kierunek zatrzymuje pojazd
    stop();
 8000274:	f000 f89a 	bl	80003ac <stop>
    return;
 8000278:	e021      	b.n	80002be <toggleTurnRight+0x56>
  }

  else if (turningRight)
 800027a:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <toggleTurnRight+0x5c>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d009      	beq.n	8000296 <toggleTurnRight+0x2e>
  {
    if (currentSpeed + SPEED_INCR <= 99)
 8000282:	4b11      	ldr	r3, [pc, #68]	@ (80002c8 <toggleTurnRight+0x60>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b59      	cmp	r3, #89	@ 0x59
 8000288:	dc07      	bgt.n	800029a <toggleTurnRight+0x32>
    {
      currentSpeed += SPEED_INCR;
 800028a:	4b0f      	ldr	r3, [pc, #60]	@ (80002c8 <toggleTurnRight+0x60>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	330a      	adds	r3, #10
 8000290:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <toggleTurnRight+0x60>)
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e001      	b.n	800029a <toggleTurnRight+0x32>
    }
  }
  else
  {
    resetDirection();
 8000296:	f7ff ff9b 	bl	80001d0 <resetDirection>
  }

  turningRight = true;
 800029a:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <toggleTurnRight+0x5c>)
 800029c:	2201      	movs	r2, #1
 800029e:	701a      	strb	r2, [r3, #0]
  turningLeft = false;
 80002a0:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <toggleTurnRight+0x58>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
  goingForward = false;
 80002a6:	4b09      	ldr	r3, [pc, #36]	@ (80002cc <toggleTurnRight+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
  goingBackward = false;
 80002ac:	4b08      	ldr	r3, [pc, #32]	@ (80002d0 <toggleTurnRight+0x68>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]

  // lewy silnik do przodu
  // prawy silnik do tyłu
  setDirections(true, false, false, true);
 80002b2:	2301      	movs	r3, #1
 80002b4:	2200      	movs	r2, #0
 80002b6:	2100      	movs	r1, #0
 80002b8:	2001      	movs	r0, #1
 80002ba:	f7ff ff5b 	bl	8000174 <setDirections>
}
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000074 	.word	0x20000074
 80002c4:	20000075 	.word	0x20000075
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000076 	.word	0x20000076
 80002d0:	20000077 	.word	0x20000077

080002d4 <toggleGoForward>:

void toggleGoForward()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  if (goingBackward)
 80002d8:	4b14      	ldr	r3, [pc, #80]	@ (800032c <toggleGoForward+0x58>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d002      	beq.n	80002e6 <toggleGoForward+0x12>
  {
    // przeciwny kierunek zatrzymuje pojazd
    stop();
 80002e0:	f000 f864 	bl	80003ac <stop>
    return;
 80002e4:	e021      	b.n	800032a <toggleGoForward+0x56>
  }

  else if (goingForward)
 80002e6:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <toggleGoForward+0x5c>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d009      	beq.n	8000302 <toggleGoForward+0x2e>
  {
    if (currentSpeed + SPEED_INCR <= 99)
 80002ee:	4b11      	ldr	r3, [pc, #68]	@ (8000334 <toggleGoForward+0x60>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b59      	cmp	r3, #89	@ 0x59
 80002f4:	dc07      	bgt.n	8000306 <toggleGoForward+0x32>
    {
      currentSpeed += SPEED_INCR;
 80002f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <toggleGoForward+0x60>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	330a      	adds	r3, #10
 80002fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000334 <toggleGoForward+0x60>)
 80002fe:	6013      	str	r3, [r2, #0]
 8000300:	e001      	b.n	8000306 <toggleGoForward+0x32>
    }
  }
  else
  {
    resetDirection();
 8000302:	f7ff ff65 	bl	80001d0 <resetDirection>
  }

  goingForward = true;
 8000306:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <toggleGoForward+0x5c>)
 8000308:	2201      	movs	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
  goingBackward = false;
 800030c:	4b07      	ldr	r3, [pc, #28]	@ (800032c <toggleGoForward+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
  turningLeft = false;
 8000312:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <toggleGoForward+0x64>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
  turningRight = false;
 8000318:	4b08      	ldr	r3, [pc, #32]	@ (800033c <toggleGoForward+0x68>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]

  setDirections(true, false, true, false);
 800031e:	2300      	movs	r3, #0
 8000320:	2201      	movs	r2, #1
 8000322:	2100      	movs	r1, #0
 8000324:	2001      	movs	r0, #1
 8000326:	f7ff ff25 	bl	8000174 <setDirections>
}
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000077 	.word	0x20000077
 8000330:	20000076 	.word	0x20000076
 8000334:	20000000 	.word	0x20000000
 8000338:	20000074 	.word	0x20000074
 800033c:	20000075 	.word	0x20000075

08000340 <toggleGoBackward>:

void toggleGoBackward()
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  if (goingForward)
 8000344:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <toggleGoBackward+0x58>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <toggleGoBackward+0x12>
  {
    // przeciwny kierunek zatrzymuje pojazd
    stop();
 800034c:	f000 f82e 	bl	80003ac <stop>
    return;
 8000350:	e021      	b.n	8000396 <toggleGoBackward+0x56>
  }

  else if (goingBackward)
 8000352:	4b12      	ldr	r3, [pc, #72]	@ (800039c <toggleGoBackward+0x5c>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d009      	beq.n	800036e <toggleGoBackward+0x2e>
  {
    if (currentSpeed + SPEED_INCR <= 99)
 800035a:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <toggleGoBackward+0x60>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b59      	cmp	r3, #89	@ 0x59
 8000360:	dc07      	bgt.n	8000372 <toggleGoBackward+0x32>
    {
      currentSpeed += SPEED_INCR;
 8000362:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <toggleGoBackward+0x60>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	330a      	adds	r3, #10
 8000368:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <toggleGoBackward+0x60>)
 800036a:	6013      	str	r3, [r2, #0]
 800036c:	e001      	b.n	8000372 <toggleGoBackward+0x32>
    }
  }
  else
  {
    resetDirection();
 800036e:	f7ff ff2f 	bl	80001d0 <resetDirection>
  }

  goingBackward = true;
 8000372:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <toggleGoBackward+0x5c>)
 8000374:	2201      	movs	r2, #1
 8000376:	701a      	strb	r2, [r3, #0]
  goingForward = false;
 8000378:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <toggleGoBackward+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
  turningLeft = false;
 800037e:	4b09      	ldr	r3, [pc, #36]	@ (80003a4 <toggleGoBackward+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	701a      	strb	r2, [r3, #0]
  turningRight = false;
 8000384:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <toggleGoBackward+0x68>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]

  setDirections(false, true, false, true);
 800038a:	2301      	movs	r3, #1
 800038c:	2200      	movs	r2, #0
 800038e:	2101      	movs	r1, #1
 8000390:	2000      	movs	r0, #0
 8000392:	f7ff feef 	bl	8000174 <setDirections>
}
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000076 	.word	0x20000076
 800039c:	20000077 	.word	0x20000077
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20000074 	.word	0x20000074
 80003a8:	20000075 	.word	0x20000075

080003ac <stop>:

void stop()
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  goingForward = false;
 80003b0:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <stop+0x34>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	701a      	strb	r2, [r3, #0]
  goingBackward = false;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <stop+0x38>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
  turningLeft = false;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <stop+0x3c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
  turningRight = false;
 80003c2:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <stop+0x40>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	701a      	strb	r2, [r3, #0]

  setSpeed(0, 0);
 80003c8:	2100      	movs	r1, #0
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff febe 	bl	800014c <setSpeed>

  setDirections(false, false, false, false);
 80003d0:	2300      	movs	r3, #0
 80003d2:	2200      	movs	r2, #0
 80003d4:	2100      	movs	r1, #0
 80003d6:	2000      	movs	r0, #0
 80003d8:	f7ff fecc 	bl	8000174 <setDirections>
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000076 	.word	0x20000076
 80003e4:	20000077 	.word	0x20000077
 80003e8:	20000074 	.word	0x20000074
 80003ec:	20000075 	.word	0x20000075

080003f0 <shouldGoLeft>:

bool shouldGoLeft()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin);
 80003f4:	2108      	movs	r1, #8
 80003f6:	4805      	ldr	r0, [pc, #20]	@ (800040c <shouldGoLeft+0x1c>)
 80003f8:	f000 fe1e 	bl	8001038 <HAL_GPIO_ReadPin>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	bf14      	ite	ne
 8000402:	2301      	movne	r3, #1
 8000404:	2300      	moveq	r3, #0
 8000406:	b2db      	uxtb	r3, r3
}
 8000408:	4618      	mov	r0, r3
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40010c00 	.word	0x40010c00

08000410 <shouldGoRight>:

bool shouldGoRight()
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin);
 8000414:	2110      	movs	r1, #16
 8000416:	4805      	ldr	r0, [pc, #20]	@ (800042c <shouldGoRight+0x1c>)
 8000418:	f000 fe0e 	bl	8001038 <HAL_GPIO_ReadPin>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	bf14      	ite	ne
 8000422:	2301      	movne	r3, #1
 8000424:	2300      	moveq	r3, #0
 8000426:	b2db      	uxtb	r3, r3
}
 8000428:	4618      	mov	r0, r3
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40010c00 	.word	0x40010c00

08000430 <shouldGoForward>:

bool shouldGoForward()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin);
 8000434:	2140      	movs	r1, #64	@ 0x40
 8000436:	4805      	ldr	r0, [pc, #20]	@ (800044c <shouldGoForward+0x1c>)
 8000438:	f000 fdfe 	bl	8001038 <HAL_GPIO_ReadPin>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	bf14      	ite	ne
 8000442:	2301      	movne	r3, #1
 8000444:	2300      	moveq	r3, #0
 8000446:	b2db      	uxtb	r3, r3
}
 8000448:	4618      	mov	r0, r3
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40010c00 	.word	0x40010c00

08000450 <shouldGoBackward>:

bool shouldGoBackward()
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin);
 8000454:	2180      	movs	r1, #128	@ 0x80
 8000456:	4805      	ldr	r0, [pc, #20]	@ (800046c <shouldGoBackward+0x1c>)
 8000458:	f000 fdee 	bl	8001038 <HAL_GPIO_ReadPin>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	bf14      	ite	ne
 8000462:	2301      	movne	r3, #1
 8000464:	2300      	moveq	r3, #0
 8000466:	b2db      	uxtb	r3, r3
}
 8000468:	4618      	mov	r0, r3
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010c00 	.word	0x40010c00

08000470 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000476:	f000 faf1 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047a:	f000 f8c9 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047e:	f000 f991 	bl	80007a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000482:	f000 f901 	bl	8000688 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Sterownik port "EN_A"
 8000486:	2100      	movs	r1, #0
 8000488:	485a      	ldr	r0, [pc, #360]	@ (80005f4 <main+0x184>)
 800048a:	f001 fa33 	bl	80018f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Sterownik port "EN_B"
 800048e:	2104      	movs	r1, #4
 8000490:	4858      	ldr	r0, [pc, #352]	@ (80005f4 <main+0x184>)
 8000492:	f001 fa2f 	bl	80018f4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool prevForward = false;
 8000496:	2300      	movs	r3, #0
 8000498:	71fb      	strb	r3, [r7, #7]
  bool prevBackward = false;
 800049a:	2300      	movs	r3, #0
 800049c:	71bb      	strb	r3, [r7, #6]
  bool prevLeft = false;
 800049e:	2300      	movs	r3, #0
 80004a0:	717b      	strb	r3, [r7, #5]
  bool prevRight = false;
 80004a2:	2300      	movs	r3, #0
 80004a4:	713b      	strb	r3, [r7, #4]
  while (1)
  {
    if (
        (HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin) == GPIO_PIN_SET) ||
 80004a6:	2140      	movs	r1, #64	@ 0x40
 80004a8:	4853      	ldr	r0, [pc, #332]	@ (80005f8 <main+0x188>)
 80004aa:	f000 fdc5 	bl	8001038 <HAL_GPIO_ReadPin>
 80004ae:	4603      	mov	r3, r0
    if (
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d014      	beq.n	80004de <main+0x6e>
        (HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin) == GPIO_PIN_SET) ||
 80004b4:	2180      	movs	r1, #128	@ 0x80
 80004b6:	4850      	ldr	r0, [pc, #320]	@ (80005f8 <main+0x188>)
 80004b8:	f000 fdbe 	bl	8001038 <HAL_GPIO_ReadPin>
 80004bc:	4603      	mov	r3, r0
        (HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin) == GPIO_PIN_SET) ||
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d00d      	beq.n	80004de <main+0x6e>
        (HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_SET) ||
 80004c2:	2108      	movs	r1, #8
 80004c4:	484c      	ldr	r0, [pc, #304]	@ (80005f8 <main+0x188>)
 80004c6:	f000 fdb7 	bl	8001038 <HAL_GPIO_ReadPin>
 80004ca:	4603      	mov	r3, r0
        (HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin) == GPIO_PIN_SET) ||
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d006      	beq.n	80004de <main+0x6e>
        (HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin) == GPIO_PIN_SET))
 80004d0:	2110      	movs	r1, #16
 80004d2:	4849      	ldr	r0, [pc, #292]	@ (80005f8 <main+0x188>)
 80004d4:	f000 fdb0 	bl	8001038 <HAL_GPIO_ReadPin>
 80004d8:	4603      	mov	r3, r0
        (HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_SET) ||
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d105      	bne.n	80004ea <main+0x7a>
    {
      // zapalenie leda na płytce

      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e4:	4845      	ldr	r0, [pc, #276]	@ (80005fc <main+0x18c>)
 80004e6:	f000 fdbe 	bl	8001066 <HAL_GPIO_WritePin>
    }

    bool currentForward = shouldGoForward();
 80004ea:	f7ff ffa1 	bl	8000430 <shouldGoForward>
 80004ee:	4603      	mov	r3, r0
 80004f0:	70fb      	strb	r3, [r7, #3]
    bool currentBackward = shouldGoBackward();
 80004f2:	f7ff ffad 	bl	8000450 <shouldGoBackward>
 80004f6:	4603      	mov	r3, r0
 80004f8:	70bb      	strb	r3, [r7, #2]
    bool currentLeft = shouldGoLeft();
 80004fa:	f7ff ff79 	bl	80003f0 <shouldGoLeft>
 80004fe:	4603      	mov	r3, r0
 8000500:	707b      	strb	r3, [r7, #1]
    bool currentRight = shouldGoRight();
 8000502:	f7ff ff85 	bl	8000410 <shouldGoRight>
 8000506:	4603      	mov	r3, r0
 8000508:	703b      	strb	r3, [r7, #0]

    if (currentForward && !prevForward)
 800050a:	78fb      	ldrb	r3, [r7, #3]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d008      	beq.n	8000522 <main+0xb2>
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	f083 0301 	eor.w	r3, r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <main+0xb2>
    {
      toggleGoForward();
 800051c:	f7ff feda 	bl	80002d4 <toggleGoForward>
 8000520:	e041      	b.n	80005a6 <main+0x136>
    }
    else if (currentBackward && !prevBackward)
 8000522:	78bb      	ldrb	r3, [r7, #2]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d008      	beq.n	800053a <main+0xca>
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	f083 0301 	eor.w	r3, r3, #1
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <main+0xca>
    {
      toggleGoBackward();
 8000534:	f7ff ff04 	bl	8000340 <toggleGoBackward>
 8000538:	e035      	b.n	80005a6 <main+0x136>
    }
    else if (currentLeft && !prevLeft)
 800053a:	787b      	ldrb	r3, [r7, #1]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d008      	beq.n	8000552 <main+0xe2>
 8000540:	797b      	ldrb	r3, [r7, #5]
 8000542:	f083 0301 	eor.w	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <main+0xe2>
    {
      toggleTurnLeft();
 800054c:	f7ff fe4e 	bl	80001ec <toggleTurnLeft>
 8000550:	e029      	b.n	80005a6 <main+0x136>
    }
    else if (currentRight && !prevRight)
 8000552:	783b      	ldrb	r3, [r7, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d008      	beq.n	800056a <main+0xfa>
 8000558:	793b      	ldrb	r3, [r7, #4]
 800055a:	f083 0301 	eor.w	r3, r3, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <main+0xfa>
    {
      toggleTurnRight();
 8000564:	f7ff fe80 	bl	8000268 <toggleTurnRight>
 8000568:	e01d      	b.n	80005a6 <main+0x136>
    }
    else if (!goingForward && !goingBackward && !turningLeft && !turningRight)
 800056a:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <main+0x190>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f083 0301 	eor.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d016      	beq.n	80005a6 <main+0x136>
 8000578:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <main+0x194>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f083 0301 	eor.w	r3, r3, #1
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00f      	beq.n	80005a6 <main+0x136>
 8000586:	4b20      	ldr	r3, [pc, #128]	@ (8000608 <main+0x198>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	f083 0301 	eor.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <main+0x136>
 8000594:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <main+0x19c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f083 0301 	eor.w	r3, r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <main+0x136>
    {
      // zgaszenie leda na płytce

      // zatrzymanie
      stop();
 80005a2:	f7ff ff03 	bl	80003ac <stop>
    }

    if (!currentForward && !currentBackward && !currentLeft && !currentRight)
 80005a6:	78fb      	ldrb	r3, [r7, #3]
 80005a8:	f083 0301 	eor.w	r3, r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d017      	beq.n	80005e2 <main+0x172>
 80005b2:	78bb      	ldrb	r3, [r7, #2]
 80005b4:	f083 0301 	eor.w	r3, r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d011      	beq.n	80005e2 <main+0x172>
 80005be:	787b      	ldrb	r3, [r7, #1]
 80005c0:	f083 0301 	eor.w	r3, r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00b      	beq.n	80005e2 <main+0x172>
 80005ca:	783b      	ldrb	r3, [r7, #0]
 80005cc:	f083 0301 	eor.w	r3, r3, #1
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d005      	beq.n	80005e2 <main+0x172>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005dc:	4807      	ldr	r0, [pc, #28]	@ (80005fc <main+0x18c>)
 80005de:	f000 fd42 	bl	8001066 <HAL_GPIO_WritePin>
    }

    prevForward = currentForward;
 80005e2:	78fb      	ldrb	r3, [r7, #3]
 80005e4:	71fb      	strb	r3, [r7, #7]
    prevBackward = currentBackward;
 80005e6:	78bb      	ldrb	r3, [r7, #2]
 80005e8:	71bb      	strb	r3, [r7, #6]
    prevLeft = currentLeft;
 80005ea:	787b      	ldrb	r3, [r7, #1]
 80005ec:	717b      	strb	r3, [r7, #5]
    prevRight = currentRight;
 80005ee:	783b      	ldrb	r3, [r7, #0]
 80005f0:	713b      	strb	r3, [r7, #4]
  {
 80005f2:	e758      	b.n	80004a6 <main+0x36>
 80005f4:	2000002c 	.word	0x2000002c
 80005f8:	40010c00 	.word	0x40010c00
 80005fc:	40011000 	.word	0x40011000
 8000600:	20000076 	.word	0x20000076
 8000604:	20000077 	.word	0x20000077
 8000608:	20000074 	.word	0x20000074
 800060c:	20000075 	.word	0x20000075

08000610 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b090      	sub	sp, #64	@ 0x40
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2228      	movs	r2, #40	@ 0x28
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fd95 	bl	800214e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	2301      	movs	r3, #1
 8000638:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	2310      	movs	r3, #16
 800063c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063e:	2300      	movs	r3, #0
 8000640:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fd26 	bl	8001098 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000652:	f000 f921 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000656:	230f      	movs	r3, #15
 8000658:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ff94 	bl	800159c <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800067a:	f000 f90d 	bl	8000898 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3740      	adds	r7, #64	@ 0x40
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b092      	sub	sp, #72	@ 0x48
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2220      	movs	r2, #32
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fd4b 	bl	800214e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b8:	4b38      	ldr	r3, [pc, #224]	@ (800079c <MX_TIM1_Init+0x114>)
 80006ba:	4a39      	ldr	r2, [pc, #228]	@ (80007a0 <MX_TIM1_Init+0x118>)
 80006bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80006be:	4b37      	ldr	r3, [pc, #220]	@ (800079c <MX_TIM1_Init+0x114>)
 80006c0:	2247      	movs	r2, #71	@ 0x47
 80006c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b35      	ldr	r3, [pc, #212]	@ (800079c <MX_TIM1_Init+0x114>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80006ca:	4b34      	ldr	r3, [pc, #208]	@ (800079c <MX_TIM1_Init+0x114>)
 80006cc:	2263      	movs	r2, #99	@ 0x63
 80006ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b32      	ldr	r3, [pc, #200]	@ (800079c <MX_TIM1_Init+0x114>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006d6:	4b31      	ldr	r3, [pc, #196]	@ (800079c <MX_TIM1_Init+0x114>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006dc:	4b2f      	ldr	r3, [pc, #188]	@ (800079c <MX_TIM1_Init+0x114>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006e2:	482e      	ldr	r0, [pc, #184]	@ (800079c <MX_TIM1_Init+0x114>)
 80006e4:	f001 f8b6 	bl	8001854 <HAL_TIM_PWM_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80006ee:	f000 f8d3 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006fe:	4619      	mov	r1, r3
 8000700:	4826      	ldr	r0, [pc, #152]	@ (800079c <MX_TIM1_Init+0x114>)
 8000702:	f001 fc75 	bl	8001ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800070c:	f000 f8c4 	bl	8000898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000710:	2360      	movs	r3, #96	@ 0x60
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000718:	2300      	movs	r3, #0
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800071c:	2300      	movs	r3, #0
 800071e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000730:	2200      	movs	r2, #0
 8000732:	4619      	mov	r1, r3
 8000734:	4819      	ldr	r0, [pc, #100]	@ (800079c <MX_TIM1_Init+0x114>)
 8000736:	f001 f97f 	bl	8001a38 <HAL_TIM_PWM_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000740:	f000 f8aa 	bl	8000898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000748:	2204      	movs	r2, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4813      	ldr	r0, [pc, #76]	@ (800079c <MX_TIM1_Init+0x114>)
 800074e:	f001 f973 	bl	8001a38 <HAL_TIM_PWM_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000758:	f000 f89e 	bl	8000898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000774:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4807      	ldr	r0, [pc, #28]	@ (800079c <MX_TIM1_Init+0x114>)
 8000780:	f001 fc94 	bl	80020ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800078a:	f000 f885 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800078e:	4803      	ldr	r0, [pc, #12]	@ (800079c <MX_TIM1_Init+0x114>)
 8000790:	f000 f8d8 	bl	8000944 <HAL_TIM_MspPostInit>
}
 8000794:	bf00      	nop
 8000796:	3748      	adds	r7, #72	@ 0x48
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	40012c00 	.word	0x40012c00

080007a4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b8:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <MX_GPIO_Init+0xe4>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a32      	ldr	r2, [pc, #200]	@ (8000888 <MX_GPIO_Init+0xe4>)
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_GPIO_Init+0xe4>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0310 	and.w	r3, r3, #16
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <MX_GPIO_Init+0xe4>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a2c      	ldr	r2, [pc, #176]	@ (8000888 <MX_GPIO_Init+0xe4>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <MX_GPIO_Init+0xe4>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <MX_GPIO_Init+0xe4>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a26      	ldr	r2, [pc, #152]	@ (8000888 <MX_GPIO_Init+0xe4>)
 80007ee:	f043 0308 	orr.w	r3, r3, #8
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <MX_GPIO_Init+0xe4>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f003 0308 	and.w	r3, r3, #8
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000806:	4821      	ldr	r0, [pc, #132]	@ (800088c <MX_GPIO_Init+0xe8>)
 8000808:	f000 fc2d 	bl	8001066 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Pin | IN2_Pin | IN4_Pin | IN3_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2178      	movs	r1, #120	@ 0x78
 8000810:	481f      	ldr	r0, [pc, #124]	@ (8000890 <MX_GPIO_Init+0xec>)
 8000812:	f000 fc28 	bl	8001066 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000816:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2302      	movs	r3, #2
 8000826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	4817      	ldr	r0, [pc, #92]	@ (800088c <MX_GPIO_Init+0xe8>)
 8000830:	f000 fa7e 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = IN1_Pin | IN2_Pin | IN4_Pin | IN3_Pin;
 8000834:	2378      	movs	r3, #120	@ 0x78
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	@ (8000890 <MX_GPIO_Init+0xec>)
 800084c:	f000 fa70 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIST_Pin */
  GPIO_InitStruct.Pin = DIST_Pin;
 8000850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000856:	2303      	movs	r3, #3
 8000858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIST_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	4619      	mov	r1, r3
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <MX_GPIO_Init+0xf0>)
 8000862:	f000 fa65 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_3_Pin LINE_2_Pin LINE_1_Pin LEFT_Pin
                           RIGHT_Pin FORWARD_Pin BACKWARD_Pin */
  GPIO_InitStruct.Pin = LINE_3_Pin | LINE_2_Pin | LINE_1_Pin | LEFT_Pin | RIGHT_Pin | FORWARD_Pin | BACKWARD_Pin;
 8000866:	f24e 03d8 	movw	r3, #57560	@ 0xe0d8
 800086a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_GPIO_Init+0xf0>)
 800087c:	f000 fa58 	bl	8000d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	40011000 	.word	0x40011000
 8000890:	40010800 	.word	0x40010800
 8000894:	40010c00 	.word	0x40010c00

08000898 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_MspInit+0x5c>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4a14      	ldr	r2, [pc, #80]	@ (8000900 <HAL_MspInit+0x5c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6193      	str	r3, [r2, #24]
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_MspInit+0x5c>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <HAL_MspInit+0x5c>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000900 <HAL_MspInit+0x5c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_MspInit+0x5c>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008da:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <HAL_MspInit+0x60>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	4a04      	ldr	r2, [pc, #16]	@ (8000904 <HAL_MspInit+0x60>)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	40021000 	.word	0x40021000
 8000904:	40010000 	.word	0x40010000

08000908 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a09      	ldr	r2, [pc, #36]	@ (800093c <HAL_TIM_PWM_MspInit+0x34>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d10b      	bne.n	8000932 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <HAL_TIM_PWM_MspInit+0x38>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <HAL_TIM_PWM_MspInit+0x38>)
 8000920:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_TIM_PWM_MspInit+0x38>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40012c00 	.word	0x40012c00
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a10      	ldr	r2, [pc, #64]	@ (80009a0 <HAL_TIM_MspPostInit+0x5c>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d118      	bne.n	8000996 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <HAL_TIM_MspPostInit+0x60>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a0e      	ldr	r2, [pc, #56]	@ (80009a4 <HAL_TIM_MspPostInit+0x60>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <HAL_TIM_MspPostInit+0x60>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_B_Pin|EN_A_Pin;
 800097c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2302      	movs	r3, #2
 8000988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <HAL_TIM_MspPostInit+0x64>)
 8000992:	f000 f9cd 	bl	8000d30 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40012c00 	.word	0x40012c00
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010800 	.word	0x40010800

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <NMI_Handler+0x4>

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <MemManage_Handler+0x4>

080009c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f874 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff fff8 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480b      	ldr	r0, [pc, #44]	@ (8000a44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a16:	490c      	ldr	r1, [pc, #48]	@ (8000a48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a18:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a09      	ldr	r2, [pc, #36]	@ (8000a50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a2c:	4c09      	ldr	r4, [pc, #36]	@ (8000a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f001 fb91 	bl	8002160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3e:	f7ff fd17 	bl	8000470 <main>
  bx lr
 8000a42:	4770      	bx	lr
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a4c:	080021ec 	.word	0x080021ec
  ldr r2, =_sbss
 8000a50:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a54:	2000007c 	.word	0x2000007c

08000a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_2_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <HAL_Init+0x28>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	@ (8000a84 <HAL_Init+0x28>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f92b 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	200f      	movs	r0, #15
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff ff14 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f935 	bl	8000d16 <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f90b 	bl	8000cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000004 	.word	0x20000004
 8000ae0:	2000000c 	.word	0x2000000c
 8000ae4:	20000008 	.word	0x20000008

08000ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <HAL_IncTick+0x1c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <HAL_IncTick+0x20>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a03      	ldr	r2, [pc, #12]	@ (8000b08 <HAL_IncTick+0x20>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	2000000c 	.word	0x2000000c
 8000b08:	20000078 	.word	0x20000078

08000b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b02      	ldr	r3, [pc, #8]	@ (8000b1c <HAL_GetTick+0x10>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000078 	.word	0x20000078

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff fff0 	bl	8000b0c <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d005      	beq.n	8000b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_Delay+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b46:	bf00      	nop
 8000b48:	f7ff ffe0 	bl	8000b0c <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8f7      	bhi.n	8000b48 <HAL_Delay+0x28>
  {
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000000c 	.word	0x2000000c

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	@ (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	@ 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c94:	d301      	bcc.n	8000c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00f      	b.n	8000cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <SysTick_Config+0x40>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f7ff ff90 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <SysTick_Config+0x40>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <SysTick_Config+0x40>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff49 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf0:	f7ff ff5e 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff ff90 	bl	8000c20 <NVIC_EncodePriority>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff5f 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffb0 	bl	8000c84 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b08b      	sub	sp, #44	@ 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d42:	e169      	b.n	8001018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d44:	2201      	movs	r2, #1
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 8158 	bne.w	8001012 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	4a9a      	ldr	r2, [pc, #616]	@ (8000fd0 <HAL_GPIO_Init+0x2a0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d05e      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d6c:	4a98      	ldr	r2, [pc, #608]	@ (8000fd0 <HAL_GPIO_Init+0x2a0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d875      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d72:	4a98      	ldr	r2, [pc, #608]	@ (8000fd4 <HAL_GPIO_Init+0x2a4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d058      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d78:	4a96      	ldr	r2, [pc, #600]	@ (8000fd4 <HAL_GPIO_Init+0x2a4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d86f      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d7e:	4a96      	ldr	r2, [pc, #600]	@ (8000fd8 <HAL_GPIO_Init+0x2a8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d052      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d84:	4a94      	ldr	r2, [pc, #592]	@ (8000fd8 <HAL_GPIO_Init+0x2a8>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d869      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d8a:	4a94      	ldr	r2, [pc, #592]	@ (8000fdc <HAL_GPIO_Init+0x2ac>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d04c      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d90:	4a92      	ldr	r2, [pc, #584]	@ (8000fdc <HAL_GPIO_Init+0x2ac>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d863      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000d96:	4a92      	ldr	r2, [pc, #584]	@ (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d046      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
 8000d9c:	4a90      	ldr	r2, [pc, #576]	@ (8000fe0 <HAL_GPIO_Init+0x2b0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d85d      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000da2:	2b12      	cmp	r3, #18
 8000da4:	d82a      	bhi.n	8000dfc <HAL_GPIO_Init+0xcc>
 8000da6:	2b12      	cmp	r3, #18
 8000da8:	d859      	bhi.n	8000e5e <HAL_GPIO_Init+0x12e>
 8000daa:	a201      	add	r2, pc, #4	@ (adr r2, 8000db0 <HAL_GPIO_Init+0x80>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000e2b 	.word	0x08000e2b
 8000db4:	08000e05 	.word	0x08000e05
 8000db8:	08000e17 	.word	0x08000e17
 8000dbc:	08000e59 	.word	0x08000e59
 8000dc0:	08000e5f 	.word	0x08000e5f
 8000dc4:	08000e5f 	.word	0x08000e5f
 8000dc8:	08000e5f 	.word	0x08000e5f
 8000dcc:	08000e5f 	.word	0x08000e5f
 8000dd0:	08000e5f 	.word	0x08000e5f
 8000dd4:	08000e5f 	.word	0x08000e5f
 8000dd8:	08000e5f 	.word	0x08000e5f
 8000ddc:	08000e5f 	.word	0x08000e5f
 8000de0:	08000e5f 	.word	0x08000e5f
 8000de4:	08000e5f 	.word	0x08000e5f
 8000de8:	08000e5f 	.word	0x08000e5f
 8000dec:	08000e5f 	.word	0x08000e5f
 8000df0:	08000e5f 	.word	0x08000e5f
 8000df4:	08000e0d 	.word	0x08000e0d
 8000df8:	08000e21 	.word	0x08000e21
 8000dfc:	4a79      	ldr	r2, [pc, #484]	@ (8000fe4 <HAL_GPIO_Init+0x2b4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e02:	e02c      	b.n	8000e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	623b      	str	r3, [r7, #32]
          break;
 8000e0a:	e029      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	3304      	adds	r3, #4
 8000e12:	623b      	str	r3, [r7, #32]
          break;
 8000e14:	e024      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	3308      	adds	r3, #8
 8000e1c:	623b      	str	r3, [r7, #32]
          break;
 8000e1e:	e01f      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	330c      	adds	r3, #12
 8000e26:	623b      	str	r3, [r7, #32]
          break;
 8000e28:	e01a      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e32:	2304      	movs	r3, #4
 8000e34:	623b      	str	r3, [r7, #32]
          break;
 8000e36:	e013      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d105      	bne.n	8000e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e40:	2308      	movs	r3, #8
 8000e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	611a      	str	r2, [r3, #16]
          break;
 8000e4a:	e009      	b.n	8000e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	615a      	str	r2, [r3, #20]
          break;
 8000e56:	e003      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
          break;
 8000e5c:	e000      	b.n	8000e60 <HAL_GPIO_Init+0x130>
          break;
 8000e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	2bff      	cmp	r3, #255	@ 0xff
 8000e64:	d801      	bhi.n	8000e6a <HAL_GPIO_Init+0x13a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	e001      	b.n	8000e6e <HAL_GPIO_Init+0x13e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2bff      	cmp	r3, #255	@ 0xff
 8000e74:	d802      	bhi.n	8000e7c <HAL_GPIO_Init+0x14c>
 8000e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	e002      	b.n	8000e82 <HAL_GPIO_Init+0x152>
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7e:	3b08      	subs	r3, #8
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	210f      	movs	r1, #15
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	401a      	ands	r2, r3
 8000e94:	6a39      	ldr	r1, [r7, #32]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 80b1 	beq.w	8001012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe8 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ec8:	4a48      	ldr	r2, [pc, #288]	@ (8000fec <HAL_GPIO_Init+0x2bc>)
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a40      	ldr	r2, [pc, #256]	@ (8000ff0 <HAL_GPIO_Init+0x2c0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d013      	beq.n	8000f1c <HAL_GPIO_Init+0x1ec>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ff4 <HAL_GPIO_Init+0x2c4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d00d      	beq.n	8000f18 <HAL_GPIO_Init+0x1e8>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a3e      	ldr	r2, [pc, #248]	@ (8000ff8 <HAL_GPIO_Init+0x2c8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0x1e4>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3d      	ldr	r2, [pc, #244]	@ (8000ffc <HAL_GPIO_Init+0x2cc>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d101      	bne.n	8000f10 <HAL_GPIO_Init+0x1e0>
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e006      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f10:	2304      	movs	r3, #4
 8000f12:	e004      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e002      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <HAL_GPIO_Init+0x1ee>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f20:	f002 0203 	and.w	r2, r2, #3
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	4093      	lsls	r3, r2
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f2e:	492f      	ldr	r1, [pc, #188]	@ (8000fec <HAL_GPIO_Init+0x2bc>)
 8000f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f48:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	492c      	ldr	r1, [pc, #176]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	608b      	str	r3, [r1, #8]
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f56:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4928      	ldr	r1, [pc, #160]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f70:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	4922      	ldr	r1, [pc, #136]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	60cb      	str	r3, [r1, #12]
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	491e      	ldr	r1, [pc, #120]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d006      	beq.n	8000fa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	4918      	ldr	r1, [pc, #96]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4914      	ldr	r1, [pc, #80]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d021      	beq.n	8001004 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	490e      	ldr	r1, [pc, #56]	@ (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	600b      	str	r3, [r1, #0]
 8000fcc:	e021      	b.n	8001012 <HAL_GPIO_Init+0x2e2>
 8000fce:	bf00      	nop
 8000fd0:	10320000 	.word	0x10320000
 8000fd4:	10310000 	.word	0x10310000
 8000fd8:	10220000 	.word	0x10220000
 8000fdc:	10210000 	.word	0x10210000
 8000fe0:	10120000 	.word	0x10120000
 8000fe4:	10110000 	.word	0x10110000
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	40010c00 	.word	0x40010c00
 8000ff8:	40011000 	.word	0x40011000
 8000ffc:	40011400 	.word	0x40011400
 8001000:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001004:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	43db      	mvns	r3, r3
 800100c:	4909      	ldr	r1, [pc, #36]	@ (8001034 <HAL_GPIO_Init+0x304>)
 800100e:	4013      	ands	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101e:	fa22 f303 	lsr.w	r3, r2, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	f47f ae8e 	bne.w	8000d44 <HAL_GPIO_Init+0x14>
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	372c      	adds	r7, #44	@ 0x2c
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40010400 	.word	0x40010400

08001038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	4013      	ands	r3, r2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e001      	b.n	800105a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	807b      	strh	r3, [r7, #2]
 8001072:	4613      	mov	r3, r2
 8001074:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001076:	787b      	ldrb	r3, [r7, #1]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107c:	887a      	ldrh	r2, [r7, #2]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001082:	e003      	b.n	800108c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	041a      	lsls	r2, r3, #16
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	611a      	str	r2, [r3, #16]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
	...

08001098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e272      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8087 	beq.w	80011c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010b8:	4b92      	ldr	r3, [pc, #584]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d00c      	beq.n	80010de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d112      	bne.n	80010f6 <HAL_RCC_OscConfig+0x5e>
 80010d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010dc:	d10b      	bne.n	80010f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010de:	4b89      	ldr	r3, [pc, #548]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d06c      	beq.n	80011c4 <HAL_RCC_OscConfig+0x12c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d168      	bne.n	80011c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e24c      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010fe:	d106      	bne.n	800110e <HAL_RCC_OscConfig+0x76>
 8001100:	4b80      	ldr	r3, [pc, #512]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a7f      	ldr	r2, [pc, #508]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e02e      	b.n	800116c <HAL_RCC_OscConfig+0xd4>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0x98>
 8001116:	4b7b      	ldr	r3, [pc, #492]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a7a      	ldr	r2, [pc, #488]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800111c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b78      	ldr	r3, [pc, #480]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a77      	ldr	r2, [pc, #476]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001128:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e01d      	b.n	800116c <HAL_RCC_OscConfig+0xd4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0xbc>
 800113a:	4b72      	ldr	r3, [pc, #456]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a71      	ldr	r2, [pc, #452]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b6f      	ldr	r3, [pc, #444]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a6e      	ldr	r2, [pc, #440]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e00b      	b.n	800116c <HAL_RCC_OscConfig+0xd4>
 8001154:	4b6b      	ldr	r3, [pc, #428]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a6a      	ldr	r2, [pc, #424]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800115a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b68      	ldr	r3, [pc, #416]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a67      	ldr	r2, [pc, #412]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fcca 	bl	8000b0c <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fcc6 	bl	8000b0c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	@ 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e200      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	4b5d      	ldr	r3, [pc, #372]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0xe4>
 800119a:	e014      	b.n	80011c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fcb6 	bl	8000b0c <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fcb2 	bl	8000b0c <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	@ 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1ec      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	4b53      	ldr	r3, [pc, #332]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x10c>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d063      	beq.n	800129a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011de:	4b49      	ldr	r3, [pc, #292]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d11c      	bne.n	8001224 <HAL_RCC_OscConfig+0x18c>
 80011ea:	4b46      	ldr	r3, [pc, #280]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d116      	bne.n	8001224 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x176>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e1c0      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120e:	4b3d      	ldr	r3, [pc, #244]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4939      	ldr	r1, [pc, #228]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	e03a      	b.n	800129a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122c:	4b36      	ldr	r3, [pc, #216]	@ (8001308 <HAL_RCC_OscConfig+0x270>)
 800122e:	2201      	movs	r2, #1
 8001230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001232:	f7ff fc6b 	bl	8000b0c <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff fc67 	bl	8000b0c <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e1a1      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	4b2d      	ldr	r3, [pc, #180]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b2a      	ldr	r3, [pc, #168]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4927      	ldr	r1, [pc, #156]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <HAL_RCC_OscConfig+0x270>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fc4a 	bl	8000b0c <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127c:	f7ff fc46 	bl	8000b0c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e180      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d03a      	beq.n	800131c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d019      	beq.n	80012e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <HAL_RCC_OscConfig+0x274>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fc2a 	bl	8000b0c <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc26 	bl	8000b0c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e160      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012da:	2001      	movs	r0, #1
 80012dc:	f000 fa9c 	bl	8001818 <RCC_Delay>
 80012e0:	e01c      	b.n	800131c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_RCC_OscConfig+0x274>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fc10 	bl	8000b0c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ee:	e00f      	b.n	8001310 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc0c 	bl	8000b0c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d908      	bls.n	8001310 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e146      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	42420000 	.word	0x42420000
 800130c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001310:	4b92      	ldr	r3, [pc, #584]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1e9      	bne.n	80012f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80a6 	beq.w	8001476 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132e:	4b8b      	ldr	r3, [pc, #556]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10d      	bne.n	8001356 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b88      	ldr	r3, [pc, #544]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a87      	ldr	r2, [pc, #540]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b85      	ldr	r3, [pc, #532]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001352:	2301      	movs	r3, #1
 8001354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b82      	ldr	r3, [pc, #520]	@ (8001560 <HAL_RCC_OscConfig+0x4c8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d118      	bne.n	8001394 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001362:	4b7f      	ldr	r3, [pc, #508]	@ (8001560 <HAL_RCC_OscConfig+0x4c8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a7e      	ldr	r2, [pc, #504]	@ (8001560 <HAL_RCC_OscConfig+0x4c8>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136e:	f7ff fbcd 	bl	8000b0c <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001376:	f7ff fbc9 	bl	8000b0c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b64      	cmp	r3, #100	@ 0x64
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e103      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	4b75      	ldr	r3, [pc, #468]	@ (8001560 <HAL_RCC_OscConfig+0x4c8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x312>
 800139c:	4b6f      	ldr	r3, [pc, #444]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a6e      	ldr	r2, [pc, #440]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	e02d      	b.n	8001406 <HAL_RCC_OscConfig+0x36e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x334>
 80013b2:	4b6a      	ldr	r3, [pc, #424]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a69      	ldr	r2, [pc, #420]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6213      	str	r3, [r2, #32]
 80013be:	4b67      	ldr	r3, [pc, #412]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4a66      	ldr	r2, [pc, #408]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	6213      	str	r3, [r2, #32]
 80013ca:	e01c      	b.n	8001406 <HAL_RCC_OscConfig+0x36e>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d10c      	bne.n	80013ee <HAL_RCC_OscConfig+0x356>
 80013d4:	4b61      	ldr	r3, [pc, #388]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4a60      	ldr	r2, [pc, #384]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6213      	str	r3, [r2, #32]
 80013e0:	4b5e      	ldr	r3, [pc, #376]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a5d      	ldr	r2, [pc, #372]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6213      	str	r3, [r2, #32]
 80013ec:	e00b      	b.n	8001406 <HAL_RCC_OscConfig+0x36e>
 80013ee:	4b5b      	ldr	r3, [pc, #364]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4a5a      	ldr	r2, [pc, #360]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	6213      	str	r3, [r2, #32]
 80013fa:	4b58      	ldr	r3, [pc, #352]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4a57      	ldr	r2, [pc, #348]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001400:	f023 0304 	bic.w	r3, r3, #4
 8001404:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d015      	beq.n	800143a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140e:	f7ff fb7d 	bl	8000b0c <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001414:	e00a      	b.n	800142c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff fb79 	bl	8000b0c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001424:	4293      	cmp	r3, r2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e0b1      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	4b4b      	ldr	r3, [pc, #300]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0ee      	beq.n	8001416 <HAL_RCC_OscConfig+0x37e>
 8001438:	e014      	b.n	8001464 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143a:	f7ff fb67 	bl	8000b0c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001440:	e00a      	b.n	8001458 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001442:	f7ff fb63 	bl	8000b0c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001450:	4293      	cmp	r3, r2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e09b      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	4b40      	ldr	r3, [pc, #256]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1ee      	bne.n	8001442 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d105      	bne.n	8001476 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800146a:	4b3c      	ldr	r3, [pc, #240]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a3b      	ldr	r2, [pc, #236]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001474:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8087 	beq.w	800158e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001480:	4b36      	ldr	r3, [pc, #216]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b08      	cmp	r3, #8
 800148a:	d061      	beq.n	8001550 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d146      	bne.n	8001522 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001494:	4b33      	ldr	r3, [pc, #204]	@ (8001564 <HAL_RCC_OscConfig+0x4cc>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fb37 	bl	8000b0c <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff fb33 	bl	8000b0c <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e06d      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b4:	4b29      	ldr	r3, [pc, #164]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c8:	d108      	bne.n	80014dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ca:	4b24      	ldr	r3, [pc, #144]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	4921      	ldr	r1, [pc, #132]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014dc:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a19      	ldr	r1, [r3, #32]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ec:	430b      	orrs	r3, r1
 80014ee:	491b      	ldr	r1, [pc, #108]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x4cc>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fb07 	bl	8000b0c <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff fb03 	bl	8000b0c <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e03d      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x46a>
 8001520:	e035      	b.n	800158e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_RCC_OscConfig+0x4cc>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff faf0 	bl	8000b0c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff faec 	bl	8000b0c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e026      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_RCC_OscConfig+0x4c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x498>
 800154e:	e01e      	b.n	800158e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d107      	bne.n	8001568 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e019      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
 800155c:	40021000 	.word	0x40021000
 8001560:	40007000 	.word	0x40007000
 8001564:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_RCC_OscConfig+0x500>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	429a      	cmp	r2, r3
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	429a      	cmp	r2, r3
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0d0      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b0:	4b6a      	ldr	r3, [pc, #424]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d910      	bls.n	80015e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b67      	ldr	r3, [pc, #412]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0207 	bic.w	r2, r3, #7
 80015c6:	4965      	ldr	r1, [pc, #404]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b63      	ldr	r3, [pc, #396]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0b8      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f8:	4b59      	ldr	r3, [pc, #356]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a58      	ldr	r2, [pc, #352]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001602:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001610:	4b53      	ldr	r3, [pc, #332]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a52      	ldr	r2, [pc, #328]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800161a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161c:	4b50      	ldr	r3, [pc, #320]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	494d      	ldr	r1, [pc, #308]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d040      	beq.n	80016bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d115      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e07f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b41      	ldr	r3, [pc, #260]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e073      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e06b      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167a:	4b39      	ldr	r3, [pc, #228]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f023 0203 	bic.w	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4936      	ldr	r1, [pc, #216]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800168c:	f7ff fa3e 	bl	8000b0c <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	e00a      	b.n	80016aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	f7ff fa3a 	bl	8000b0c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e053      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 020c 	and.w	r2, r3, #12
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1eb      	bne.n	8001694 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016bc:	4b27      	ldr	r3, [pc, #156]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d210      	bcs.n	80016ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 0207 	bic.w	r2, r3, #7
 80016d2:	4922      	ldr	r1, [pc, #136]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b20      	ldr	r3, [pc, #128]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e032      	b.n	8001752 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4916      	ldr	r1, [pc, #88]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001716:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	490e      	ldr	r1, [pc, #56]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800172a:	f000 f821 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	490a      	ldr	r1, [pc, #40]	@ (8001764 <HAL_RCC_ClockConfig+0x1c8>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <HAL_RCC_ClockConfig+0x1cc>)
 8001744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_RCC_ClockConfig+0x1d0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f99c 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40022000 	.word	0x40022000
 8001760:	40021000 	.word	0x40021000
 8001764:	080021c0 	.word	0x080021c0
 8001768:	20000004 	.word	0x20000004
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x94>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b04      	cmp	r3, #4
 8001798:	d002      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x30>
 800179a:	2b08      	cmp	r3, #8
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x36>
 800179e:	e027      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017a0:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x98>)
 80017a2:	613b      	str	r3, [r7, #16]
      break;
 80017a4:	e027      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	0c9b      	lsrs	r3, r3, #18
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	4a17      	ldr	r2, [pc, #92]	@ (800180c <HAL_RCC_GetSysClockFreq+0x9c>)
 80017b0:	5cd3      	ldrb	r3, [r2, r3]
 80017b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d010      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x94>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	0c5b      	lsrs	r3, r3, #17
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	4a11      	ldr	r2, [pc, #68]	@ (8001810 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x98>)
 80017d2:	fb03 f202 	mul.w	r2, r3, r2
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e004      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001814 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017e4:	fb02 f303 	mul.w	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	613b      	str	r3, [r7, #16]
      break;
 80017ee:	e002      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x98>)
 80017f2:	613b      	str	r3, [r7, #16]
      break;
 80017f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f6:	693b      	ldr	r3, [r7, #16]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	371c      	adds	r7, #28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	007a1200 	.word	0x007a1200
 800180c:	080021d0 	.word	0x080021d0
 8001810:	080021e0 	.word	0x080021e0
 8001814:	003d0900 	.word	0x003d0900

08001818 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <RCC_Delay+0x34>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <RCC_Delay+0x38>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0a5b      	lsrs	r3, r3, #9
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001834:	bf00      	nop
  }
  while (Delay --);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1e5a      	subs	r2, r3, #1
 800183a:	60fa      	str	r2, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f9      	bne.n	8001834 <RCC_Delay+0x1c>
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	20000004 	.word	0x20000004
 8001850:	10624dd3 	.word	0x10624dd3

08001854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e041      	b.n	80018ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff f844 	bl	8000908 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3304      	adds	r3, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f000 f992 	bl	8001bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d109      	bne.n	8001918 <HAL_TIM_PWM_Start+0x24>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	e022      	b.n	800195e <HAL_TIM_PWM_Start+0x6a>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b04      	cmp	r3, #4
 800191c:	d109      	bne.n	8001932 <HAL_TIM_PWM_Start+0x3e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	bf14      	ite	ne
 800192a:	2301      	movne	r3, #1
 800192c:	2300      	moveq	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	e015      	b.n	800195e <HAL_TIM_PWM_Start+0x6a>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b08      	cmp	r3, #8
 8001936:	d109      	bne.n	800194c <HAL_TIM_PWM_Start+0x58>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	bf14      	ite	ne
 8001944:	2301      	movne	r3, #1
 8001946:	2300      	moveq	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e008      	b.n	800195e <HAL_TIM_PWM_Start+0x6a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b01      	cmp	r3, #1
 8001956:	bf14      	ite	ne
 8001958:	2301      	movne	r3, #1
 800195a:	2300      	moveq	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e05e      	b.n	8001a24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d104      	bne.n	8001976 <HAL_TIM_PWM_Start+0x82>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001974:	e013      	b.n	800199e <HAL_TIM_PWM_Start+0xaa>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b04      	cmp	r3, #4
 800197a:	d104      	bne.n	8001986 <HAL_TIM_PWM_Start+0x92>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001984:	e00b      	b.n	800199e <HAL_TIM_PWM_Start+0xaa>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d104      	bne.n	8001996 <HAL_TIM_PWM_Start+0xa2>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001994:	e003      	b.n	800199e <HAL_TIM_PWM_Start+0xaa>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2202      	movs	r2, #2
 800199a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	6839      	ldr	r1, [r7, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fafe 	bl	8001fa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a2c <HAL_TIM_PWM_Start+0x138>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d107      	bne.n	80019c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a18      	ldr	r2, [pc, #96]	@ (8001a2c <HAL_TIM_PWM_Start+0x138>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00e      	beq.n	80019ee <HAL_TIM_PWM_Start+0xfa>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d8:	d009      	beq.n	80019ee <HAL_TIM_PWM_Start+0xfa>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a14      	ldr	r2, [pc, #80]	@ (8001a30 <HAL_TIM_PWM_Start+0x13c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d004      	beq.n	80019ee <HAL_TIM_PWM_Start+0xfa>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <HAL_TIM_PWM_Start+0x140>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d111      	bne.n	8001a12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b06      	cmp	r3, #6
 80019fe:	d010      	beq.n	8001a22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a10:	e007      	b.n	8001a22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40000800 	.word	0x40000800

08001a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e0ae      	b.n	8001bb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	f200 809f 	bhi.w	8001ba4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001a66:	a201      	add	r2, pc, #4	@ (adr r2, 8001a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6c:	08001aa1 	.word	0x08001aa1
 8001a70:	08001ba5 	.word	0x08001ba5
 8001a74:	08001ba5 	.word	0x08001ba5
 8001a78:	08001ba5 	.word	0x08001ba5
 8001a7c:	08001ae1 	.word	0x08001ae1
 8001a80:	08001ba5 	.word	0x08001ba5
 8001a84:	08001ba5 	.word	0x08001ba5
 8001a88:	08001ba5 	.word	0x08001ba5
 8001a8c:	08001b23 	.word	0x08001b23
 8001a90:	08001ba5 	.word	0x08001ba5
 8001a94:	08001ba5 	.word	0x08001ba5
 8001a98:	08001ba5 	.word	0x08001ba5
 8001a9c:	08001b63 	.word	0x08001b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f8f6 	bl	8001c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699a      	ldr	r2, [r3, #24]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0208 	orr.w	r2, r2, #8
 8001aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0204 	bic.w	r2, r2, #4
 8001aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6999      	ldr	r1, [r3, #24]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	619a      	str	r2, [r3, #24]
      break;
 8001ade:	e064      	b.n	8001baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f93c 	bl	8001d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6999      	ldr	r1, [r3, #24]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	021a      	lsls	r2, r3, #8
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	619a      	str	r2, [r3, #24]
      break;
 8001b20:	e043      	b.n	8001baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 f985 	bl	8001e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	69da      	ldr	r2, [r3, #28]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0208 	orr.w	r2, r2, #8
 8001b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0204 	bic.w	r2, r2, #4
 8001b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	69d9      	ldr	r1, [r3, #28]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	61da      	str	r2, [r3, #28]
      break;
 8001b60:	e023      	b.n	8001baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f9cf 	bl	8001f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69da      	ldr	r2, [r3, #28]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	69da      	ldr	r2, [r3, #28]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69d9      	ldr	r1, [r3, #28]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	021a      	lsls	r2, r3, #8
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	61da      	str	r2, [r3, #28]
      break;
 8001ba2:	e002      	b.n	8001baa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8001ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a2f      	ldr	r2, [pc, #188]	@ (8001c8c <TIM_Base_SetConfig+0xd0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00b      	beq.n	8001bec <TIM_Base_SetConfig+0x30>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bda:	d007      	beq.n	8001bec <TIM_Base_SetConfig+0x30>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a2c      	ldr	r2, [pc, #176]	@ (8001c90 <TIM_Base_SetConfig+0xd4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d003      	beq.n	8001bec <TIM_Base_SetConfig+0x30>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c94 <TIM_Base_SetConfig+0xd8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d108      	bne.n	8001bfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a22      	ldr	r2, [pc, #136]	@ (8001c8c <TIM_Base_SetConfig+0xd0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00b      	beq.n	8001c1e <TIM_Base_SetConfig+0x62>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c0c:	d007      	beq.n	8001c1e <TIM_Base_SetConfig+0x62>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a1f      	ldr	r2, [pc, #124]	@ (8001c90 <TIM_Base_SetConfig+0xd4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d003      	beq.n	8001c1e <TIM_Base_SetConfig+0x62>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	@ (8001c94 <TIM_Base_SetConfig+0xd8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d108      	bne.n	8001c30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <TIM_Base_SetConfig+0xd0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d103      	bne.n	8001c64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f023 0201 	bic.w	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]
  }
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	40012c00 	.word	0x40012c00
 8001c90:	40000400 	.word	0x40000400
 8001c94:	40000800 	.word	0x40000800

08001c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f023 0201 	bic.w	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f023 0302 	bic.w	r3, r3, #2
 8001ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a1c      	ldr	r2, [pc, #112]	@ (8001d60 <TIM_OC1_SetConfig+0xc8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d10c      	bne.n	8001d0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f023 0308 	bic.w	r3, r3, #8
 8001cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a13      	ldr	r2, [pc, #76]	@ (8001d60 <TIM_OC1_SetConfig+0xc8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d111      	bne.n	8001d3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	621a      	str	r2, [r3, #32]
}
 8001d54:	bf00      	nop
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40012c00 	.word	0x40012c00

08001d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f023 0210 	bic.w	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f023 0320 	bic.w	r3, r3, #32
 8001dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001e34 <TIM_OC2_SetConfig+0xd0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d10d      	bne.n	8001de0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001dde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a14      	ldr	r2, [pc, #80]	@ (8001e34 <TIM_OC2_SetConfig+0xd0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d113      	bne.n	8001e10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	621a      	str	r2, [r3, #32]
}
 8001e2a:	bf00      	nop
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	40012c00 	.word	0x40012c00

08001e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f023 0303 	bic.w	r3, r3, #3
 8001e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a1d      	ldr	r2, [pc, #116]	@ (8001f08 <TIM_OC3_SetConfig+0xd0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10d      	bne.n	8001eb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a14      	ldr	r2, [pc, #80]	@ (8001f08 <TIM_OC3_SetConfig+0xd0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d113      	bne.n	8001ee2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	621a      	str	r2, [r3, #32]
}
 8001efc:	bf00      	nop
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40012c00 	.word	0x40012c00

08001f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	031b      	lsls	r3, r3, #12
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa4 <TIM_OC4_SetConfig+0x98>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d109      	bne.n	8001f80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	621a      	str	r2, [r3, #32]
}
 8001f9a:	bf00      	nop
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40012c00 	.word	0x40012c00

08001fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	2201      	movs	r2, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a1a      	ldr	r2, [r3, #32]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	401a      	ands	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a1a      	ldr	r2, [r3, #32]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	621a      	str	r2, [r3, #32]
}
 8001fe6:	bf00      	nop
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002004:	2302      	movs	r3, #2
 8002006:	e046      	b.n	8002096 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800202e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a16      	ldr	r2, [pc, #88]	@ (80020a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00e      	beq.n	800206a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002054:	d009      	beq.n	800206a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d004      	beq.n	800206a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a10      	ldr	r2, [pc, #64]	@ (80020a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10c      	bne.n	8002084 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	4313      	orrs	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40000800 	.word	0x40000800

080020ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e03d      	b.n	8002144 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <memset>:
 800214e:	4603      	mov	r3, r0
 8002150:	4402      	add	r2, r0
 8002152:	4293      	cmp	r3, r2
 8002154:	d100      	bne.n	8002158 <memset+0xa>
 8002156:	4770      	bx	lr
 8002158:	f803 1b01 	strb.w	r1, [r3], #1
 800215c:	e7f9      	b.n	8002152 <memset+0x4>
	...

08002160 <__libc_init_array>:
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	2600      	movs	r6, #0
 8002164:	4d0c      	ldr	r5, [pc, #48]	@ (8002198 <__libc_init_array+0x38>)
 8002166:	4c0d      	ldr	r4, [pc, #52]	@ (800219c <__libc_init_array+0x3c>)
 8002168:	1b64      	subs	r4, r4, r5
 800216a:	10a4      	asrs	r4, r4, #2
 800216c:	42a6      	cmp	r6, r4
 800216e:	d109      	bne.n	8002184 <__libc_init_array+0x24>
 8002170:	f000 f81a 	bl	80021a8 <_init>
 8002174:	2600      	movs	r6, #0
 8002176:	4d0a      	ldr	r5, [pc, #40]	@ (80021a0 <__libc_init_array+0x40>)
 8002178:	4c0a      	ldr	r4, [pc, #40]	@ (80021a4 <__libc_init_array+0x44>)
 800217a:	1b64      	subs	r4, r4, r5
 800217c:	10a4      	asrs	r4, r4, #2
 800217e:	42a6      	cmp	r6, r4
 8002180:	d105      	bne.n	800218e <__libc_init_array+0x2e>
 8002182:	bd70      	pop	{r4, r5, r6, pc}
 8002184:	f855 3b04 	ldr.w	r3, [r5], #4
 8002188:	4798      	blx	r3
 800218a:	3601      	adds	r6, #1
 800218c:	e7ee      	b.n	800216c <__libc_init_array+0xc>
 800218e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002192:	4798      	blx	r3
 8002194:	3601      	adds	r6, #1
 8002196:	e7f2      	b.n	800217e <__libc_init_array+0x1e>
 8002198:	080021e4 	.word	0x080021e4
 800219c:	080021e4 	.word	0x080021e4
 80021a0:	080021e4 	.word	0x080021e4
 80021a4:	080021e8 	.word	0x080021e8

080021a8 <_init>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr

080021b4 <_fini>:
 80021b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b6:	bf00      	nop
 80021b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ba:	bc08      	pop	{r3}
 80021bc:	469e      	mov	lr, r3
 80021be:	4770      	bx	lr
