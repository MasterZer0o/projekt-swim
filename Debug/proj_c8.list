
proj_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e40  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001f4c  08001f4c  00002f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f70  08001f70  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001f70  08001f70  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001f70  08001f70  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f70  08001f70  00002f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f74  08001f74  00002f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001f78  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001f84  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001f84  00003074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000765d  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b5  00000000  00000000  0000a692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0000bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000747  00000000  00000000  0000c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166ee  00000000  00000000  0000cbff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099ee  00000000  00000000  000232ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008448f  00000000  00000000  0002ccdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b116a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b0  00000000  00000000  000b11b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000b3860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f34 	.word	0x08001f34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001f34 	.word	0x08001f34

0800014c <turnLeft>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void turnLeft(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SPEED);
 8000150:	4b0e      	ldr	r3, [pc, #56]	@ (800018c <turnLeft+0x40>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	224b      	movs	r2, #75	@ 0x4b
 8000156:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, SPEED);
 8000158:	4b0c      	ldr	r3, [pc, #48]	@ (800018c <turnLeft+0x40>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	224b      	movs	r2, #75	@ 0x4b
 800015e:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2108      	movs	r1, #8
 8000164:	480a      	ldr	r0, [pc, #40]	@ (8000190 <turnLeft+0x44>)
 8000166:	f000 fe44 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET); // lewy silnik do tyłu
 800016a:	2201      	movs	r2, #1
 800016c:	2110      	movs	r1, #16
 800016e:	4808      	ldr	r0, [pc, #32]	@ (8000190 <turnLeft+0x44>)
 8000170:	f000 fe3f 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	2140      	movs	r1, #64	@ 0x40
 8000178:	4805      	ldr	r0, [pc, #20]	@ (8000190 <turnLeft+0x44>)
 800017a:	f000 fe3a 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET); // prawy silnik do przodu
 800017e:	2200      	movs	r2, #0
 8000180:	2120      	movs	r1, #32
 8000182:	4803      	ldr	r0, [pc, #12]	@ (8000190 <turnLeft+0x44>)
 8000184:	f000 fe35 	bl	8000df2 <HAL_GPIO_WritePin>
}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}
 800018c:	20000028 	.word	0x20000028
 8000190:	40010800 	.word	0x40010800

08000194 <turnRight>:

void turnRight(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SPEED);
 8000198:	4b0e      	ldr	r3, [pc, #56]	@ (80001d4 <turnRight+0x40>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	224b      	movs	r2, #75	@ 0x4b
 800019e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, SPEED);
 80001a0:	4b0c      	ldr	r3, [pc, #48]	@ (80001d4 <turnRight+0x40>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	224b      	movs	r2, #75	@ 0x4b
 80001a6:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2108      	movs	r1, #8
 80001ac:	480a      	ldr	r0, [pc, #40]	@ (80001d8 <turnRight+0x44>)
 80001ae:	f000 fe20 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET); // lewy silnik do przodu
 80001b2:	2200      	movs	r2, #0
 80001b4:	2110      	movs	r1, #16
 80001b6:	4808      	ldr	r0, [pc, #32]	@ (80001d8 <turnRight+0x44>)
 80001b8:	f000 fe1b 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	2140      	movs	r1, #64	@ 0x40
 80001c0:	4805      	ldr	r0, [pc, #20]	@ (80001d8 <turnRight+0x44>)
 80001c2:	f000 fe16 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET); // prawy silnik do tyłu
 80001c6:	2201      	movs	r2, #1
 80001c8:	2120      	movs	r1, #32
 80001ca:	4803      	ldr	r0, [pc, #12]	@ (80001d8 <turnRight+0x44>)
 80001cc:	f000 fe11 	bl	8000df2 <HAL_GPIO_WritePin>
}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000028 	.word	0x20000028
 80001d8:	40010800 	.word	0x40010800

080001dc <goForward>:

void goForward(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SPEED); // lewy silnik
 80001e0:	4b0e      	ldr	r3, [pc, #56]	@ (800021c <goForward+0x40>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	224b      	movs	r2, #75	@ 0x4b
 80001e6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, SPEED); // prawy silnik
 80001e8:	4b0c      	ldr	r3, [pc, #48]	@ (800021c <goForward+0x40>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	224b      	movs	r2, #75	@ 0x4b
 80001ee:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80001f0:	2201      	movs	r2, #1
 80001f2:	2108      	movs	r1, #8
 80001f4:	480a      	ldr	r0, [pc, #40]	@ (8000220 <goForward+0x44>)
 80001f6:	f000 fdfc 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2110      	movs	r1, #16
 80001fe:	4808      	ldr	r0, [pc, #32]	@ (8000220 <goForward+0x44>)
 8000200:	f000 fdf7 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8000204:	2201      	movs	r2, #1
 8000206:	2140      	movs	r1, #64	@ 0x40
 8000208:	4805      	ldr	r0, [pc, #20]	@ (8000220 <goForward+0x44>)
 800020a:	f000 fdf2 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2120      	movs	r1, #32
 8000212:	4803      	ldr	r0, [pc, #12]	@ (8000220 <goForward+0x44>)
 8000214:	f000 fded 	bl	8000df2 <HAL_GPIO_WritePin>
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20000028 	.word	0x20000028
 8000220:	40010800 	.word	0x40010800

08000224 <goBackward>:

void goBackward(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SPEED);
 8000228:	4b0e      	ldr	r3, [pc, #56]	@ (8000264 <goBackward+0x40>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	224b      	movs	r2, #75	@ 0x4b
 800022e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, SPEED);
 8000230:	4b0c      	ldr	r3, [pc, #48]	@ (8000264 <goBackward+0x40>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	224b      	movs	r2, #75	@ 0x4b
 8000236:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2108      	movs	r1, #8
 800023c:	480a      	ldr	r0, [pc, #40]	@ (8000268 <goBackward+0x44>)
 800023e:	f000 fdd8 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8000242:	2201      	movs	r2, #1
 8000244:	2110      	movs	r1, #16
 8000246:	4808      	ldr	r0, [pc, #32]	@ (8000268 <goBackward+0x44>)
 8000248:	f000 fdd3 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2140      	movs	r1, #64	@ 0x40
 8000250:	4805      	ldr	r0, [pc, #20]	@ (8000268 <goBackward+0x44>)
 8000252:	f000 fdce 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8000256:	2201      	movs	r2, #1
 8000258:	2120      	movs	r1, #32
 800025a:	4803      	ldr	r0, [pc, #12]	@ (8000268 <goBackward+0x44>)
 800025c:	f000 fdc9 	bl	8000df2 <HAL_GPIO_WritePin>
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000028 	.word	0x20000028
 8000268:	40010800 	.word	0x40010800

0800026c <stop>:

void stop(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000270:	4b0e      	ldr	r3, [pc, #56]	@ (80002ac <stop+0x40>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2200      	movs	r2, #0
 8000276:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000278:	4b0c      	ldr	r3, [pc, #48]	@ (80002ac <stop+0x40>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2200      	movs	r2, #0
 800027e:	639a      	str	r2, [r3, #56]	@ 0x38

  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2108      	movs	r1, #8
 8000284:	480a      	ldr	r0, [pc, #40]	@ (80002b0 <stop+0x44>)
 8000286:	f000 fdb4 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2110      	movs	r1, #16
 800028e:	4808      	ldr	r0, [pc, #32]	@ (80002b0 <stop+0x44>)
 8000290:	f000 fdaf 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2140      	movs	r1, #64	@ 0x40
 8000298:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <stop+0x44>)
 800029a:	f000 fdaa 	bl	8000df2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2120      	movs	r1, #32
 80002a2:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <stop+0x44>)
 80002a4:	f000 fda5 	bl	8000df2 <HAL_GPIO_WritePin>
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000028 	.word	0x20000028
 80002b0:	40010800 	.word	0x40010800

080002b4 <shouldGoLeft>:

bool shouldGoLeft()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_SET;
 80002b8:	2108      	movs	r1, #8
 80002ba:	4805      	ldr	r0, [pc, #20]	@ (80002d0 <shouldGoLeft+0x1c>)
 80002bc:	f000 fd82 	bl	8000dc4 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	bf0c      	ite	eq
 80002c6:	2301      	moveq	r3, #1
 80002c8:	2300      	movne	r3, #0
 80002ca:	b2db      	uxtb	r3, r3
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40010c00 	.word	0x40010c00

080002d4 <shouldGoRight>:

bool shouldGoRight()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin) == GPIO_PIN_SET;
 80002d8:	2110      	movs	r1, #16
 80002da:	4805      	ldr	r0, [pc, #20]	@ (80002f0 <shouldGoRight+0x1c>)
 80002dc:	f000 fd72 	bl	8000dc4 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf0c      	ite	eq
 80002e6:	2301      	moveq	r3, #1
 80002e8:	2300      	movne	r3, #0
 80002ea:	b2db      	uxtb	r3, r3
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40010c00 	.word	0x40010c00

080002f4 <shouldGoForward>:

bool shouldGoForward()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin) == GPIO_PIN_SET;
 80002f8:	2140      	movs	r1, #64	@ 0x40
 80002fa:	4805      	ldr	r0, [pc, #20]	@ (8000310 <shouldGoForward+0x1c>)
 80002fc:	f000 fd62 	bl	8000dc4 <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
 8000302:	2b01      	cmp	r3, #1
 8000304:	bf0c      	ite	eq
 8000306:	2301      	moveq	r3, #1
 8000308:	2300      	movne	r3, #0
 800030a:	b2db      	uxtb	r3, r3
}
 800030c:	4618      	mov	r0, r3
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40010c00 	.word	0x40010c00

08000314 <shouldGoBackward>:

bool shouldGoBackward()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_SET;
 8000318:	2108      	movs	r1, #8
 800031a:	4805      	ldr	r0, [pc, #20]	@ (8000330 <shouldGoBackward+0x1c>)
 800031c:	f000 fd52 	bl	8000dc4 <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	2b01      	cmp	r3, #1
 8000324:	bf0c      	ite	eq
 8000326:	2301      	moveq	r3, #1
 8000328:	2300      	movne	r3, #0
 800032a:	b2db      	uxtb	r3, r3
}
 800032c:	4618      	mov	r0, r3
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40010c00 	.word	0x40010c00

08000334 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000338:	f000 fa7a 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033c:	f000 f85e 	bl	80003fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000340:	f000 f926 	bl	8000590 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000344:	f000 f896 	bl	8000474 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // EN_A
 8000348:	2100      	movs	r1, #0
 800034a:	4829      	ldr	r0, [pc, #164]	@ (80003f0 <main+0xbc>)
 800034c:	f001 f998 	bl	8001680 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // EN_B
 8000350:	2104      	movs	r1, #4
 8000352:	4827      	ldr	r0, [pc, #156]	@ (80003f0 <main+0xbc>)
 8000354:	f001 f994 	bl	8001680 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (
        (HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin) == GPIO_PIN_SET) ||
 8000358:	2140      	movs	r1, #64	@ 0x40
 800035a:	4826      	ldr	r0, [pc, #152]	@ (80003f4 <main+0xc0>)
 800035c:	f000 fd32 	bl	8000dc4 <HAL_GPIO_ReadPin>
 8000360:	4603      	mov	r3, r0
    if (
 8000362:	2b01      	cmp	r3, #1
 8000364:	d014      	beq.n	8000390 <main+0x5c>
        (HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin) == GPIO_PIN_SET) ||
 8000366:	2180      	movs	r1, #128	@ 0x80
 8000368:	4822      	ldr	r0, [pc, #136]	@ (80003f4 <main+0xc0>)
 800036a:	f000 fd2b 	bl	8000dc4 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
        (HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin) == GPIO_PIN_SET) ||
 8000370:	2b01      	cmp	r3, #1
 8000372:	d00d      	beq.n	8000390 <main+0x5c>
        (HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_SET) ||
 8000374:	2108      	movs	r1, #8
 8000376:	481f      	ldr	r0, [pc, #124]	@ (80003f4 <main+0xc0>)
 8000378:	f000 fd24 	bl	8000dc4 <HAL_GPIO_ReadPin>
 800037c:	4603      	mov	r3, r0
        (HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin) == GPIO_PIN_SET) ||
 800037e:	2b01      	cmp	r3, #1
 8000380:	d006      	beq.n	8000390 <main+0x5c>
        (HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin) == GPIO_PIN_SET))
 8000382:	2110      	movs	r1, #16
 8000384:	481b      	ldr	r0, [pc, #108]	@ (80003f4 <main+0xc0>)
 8000386:	f000 fd1d 	bl	8000dc4 <HAL_GPIO_ReadPin>
 800038a:	4603      	mov	r3, r0
        (HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_SET) ||
 800038c:	2b01      	cmp	r3, #1
 800038e:	d105      	bne.n	800039c <main+0x68>
    {
      // zapalenie leda na płytce

      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000396:	4818      	ldr	r0, [pc, #96]	@ (80003f8 <main+0xc4>)
 8000398:	f000 fd2b 	bl	8000df2 <HAL_GPIO_WritePin>
    }

    if (shouldGoForward()) // do przodu
 800039c:	f7ff ffaa 	bl	80002f4 <shouldGoForward>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d002      	beq.n	80003ac <main+0x78>
    {
      goForward();
 80003a6:	f7ff ff19 	bl	80001dc <goForward>
 80003aa:	e7d5      	b.n	8000358 <main+0x24>
    }
    else if (shouldGoBackward()) // do tyłu
 80003ac:	f7ff ffb2 	bl	8000314 <shouldGoBackward>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d002      	beq.n	80003bc <main+0x88>
    {
      goBackward();
 80003b6:	f7ff ff35 	bl	8000224 <goBackward>
 80003ba:	e7cd      	b.n	8000358 <main+0x24>
    }
    else if (shouldGoLeft()) // lewo
 80003bc:	f7ff ff7a 	bl	80002b4 <shouldGoLeft>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d002      	beq.n	80003cc <main+0x98>
    {
      turnLeft();
 80003c6:	f7ff fec1 	bl	800014c <turnLeft>
 80003ca:	e7c5      	b.n	8000358 <main+0x24>
    }
    else if (shouldGoRight()) // w prawo
 80003cc:	f7ff ff82 	bl	80002d4 <shouldGoRight>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d002      	beq.n	80003dc <main+0xa8>
    {
      turnRight();
 80003d6:	f7ff fedd 	bl	8000194 <turnRight>
 80003da:	e7bd      	b.n	8000358 <main+0x24>
    }
    else
    {
      // zgaszenie leda na płytce
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e2:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <main+0xc4>)
 80003e4:	f000 fd05 	bl	8000df2 <HAL_GPIO_WritePin>

      // zatrzymanie
      stop();
 80003e8:	f7ff ff40 	bl	800026c <stop>
    if (
 80003ec:	e7b4      	b.n	8000358 <main+0x24>
 80003ee:	bf00      	nop
 80003f0:	20000028 	.word	0x20000028
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	40011000 	.word	0x40011000

080003fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b090      	sub	sp, #64	@ 0x40
 8000400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000402:	f107 0318 	add.w	r3, r7, #24
 8000406:	2228      	movs	r2, #40	@ 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fd65 	bl	8001eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041e:	2302      	movs	r3, #2
 8000420:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000422:	2301      	movs	r3, #1
 8000424:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000426:	2310      	movs	r3, #16
 8000428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800042a:	2300      	movs	r3, #0
 800042c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042e:	f107 0318 	add.w	r3, r7, #24
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fcf6 	bl	8000e24 <HAL_RCC_OscConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800043e:	f000 f915 	bl	800066c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000442:	230f      	movs	r3, #15
 8000444:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f000 ff64 	bl	8001328 <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000466:	f000 f901 	bl	800066c <Error_Handler>
  }
}
 800046a:	bf00      	nop
 800046c:	3740      	adds	r7, #64	@ 0x40
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b092      	sub	sp, #72	@ 0x48
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
 8000492:	611a      	str	r2, [r3, #16]
 8000494:	615a      	str	r2, [r3, #20]
 8000496:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2220      	movs	r2, #32
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 fd1b 	bl	8001eda <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004a4:	4b38      	ldr	r3, [pc, #224]	@ (8000588 <MX_TIM1_Init+0x114>)
 80004a6:	4a39      	ldr	r2, [pc, #228]	@ (800058c <MX_TIM1_Init+0x118>)
 80004a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80004aa:	4b37      	ldr	r3, [pc, #220]	@ (8000588 <MX_TIM1_Init+0x114>)
 80004ac:	2247      	movs	r2, #71	@ 0x47
 80004ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b0:	4b35      	ldr	r3, [pc, #212]	@ (8000588 <MX_TIM1_Init+0x114>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80004b6:	4b34      	ldr	r3, [pc, #208]	@ (8000588 <MX_TIM1_Init+0x114>)
 80004b8:	2263      	movs	r2, #99	@ 0x63
 80004ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004bc:	4b32      	ldr	r3, [pc, #200]	@ (8000588 <MX_TIM1_Init+0x114>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004c2:	4b31      	ldr	r3, [pc, #196]	@ (8000588 <MX_TIM1_Init+0x114>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000588 <MX_TIM1_Init+0x114>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004ce:	482e      	ldr	r0, [pc, #184]	@ (8000588 <MX_TIM1_Init+0x114>)
 80004d0:	f001 f886 	bl	80015e0 <HAL_TIM_PWM_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80004da:	f000 f8c7 	bl	800066c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004de:	2300      	movs	r3, #0
 80004e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004ea:	4619      	mov	r1, r3
 80004ec:	4826      	ldr	r0, [pc, #152]	@ (8000588 <MX_TIM1_Init+0x114>)
 80004ee:	f001 fc45 	bl	8001d7c <HAL_TIMEx_MasterConfigSynchronization>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80004f8:	f000 f8b8 	bl	800066c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004fc:	2360      	movs	r3, #96	@ 0x60
 80004fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000504:	2300      	movs	r3, #0
 8000506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000508:	2300      	movs	r3, #0
 800050a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000514:	2300      	movs	r3, #0
 8000516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800051c:	2200      	movs	r2, #0
 800051e:	4619      	mov	r1, r3
 8000520:	4819      	ldr	r0, [pc, #100]	@ (8000588 <MX_TIM1_Init+0x114>)
 8000522:	f001 f94f 	bl	80017c4 <HAL_TIM_PWM_ConfigChannel>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800052c:	f000 f89e 	bl	800066c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000534:	2204      	movs	r2, #4
 8000536:	4619      	mov	r1, r3
 8000538:	4813      	ldr	r0, [pc, #76]	@ (8000588 <MX_TIM1_Init+0x114>)
 800053a:	f001 f943 	bl	80017c4 <HAL_TIM_PWM_ConfigChannel>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000544:	f000 f892 	bl	800066c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800055c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000560:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4619      	mov	r1, r3
 800056a:	4807      	ldr	r0, [pc, #28]	@ (8000588 <MX_TIM1_Init+0x114>)
 800056c:	f001 fc64 	bl	8001e38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000576:	f000 f879 	bl	800066c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800057a:	4803      	ldr	r0, [pc, #12]	@ (8000588 <MX_TIM1_Init+0x114>)
 800057c:	f000 f8cc 	bl	8000718 <HAL_TIM_MspPostInit>
}
 8000580:	bf00      	nop
 8000582:	3748      	adds	r7, #72	@ 0x48
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000028 	.word	0x20000028
 800058c:	40012c00 	.word	0x40012c00

08000590 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a4:	4b2d      	ldr	r3, [pc, #180]	@ (800065c <MX_GPIO_Init+0xcc>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a2c      	ldr	r2, [pc, #176]	@ (800065c <MX_GPIO_Init+0xcc>)
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b2a      	ldr	r3, [pc, #168]	@ (800065c <MX_GPIO_Init+0xcc>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0310 	and.w	r3, r3, #16
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4b27      	ldr	r3, [pc, #156]	@ (800065c <MX_GPIO_Init+0xcc>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a26      	ldr	r2, [pc, #152]	@ (800065c <MX_GPIO_Init+0xcc>)
 80005c2:	f043 0304 	orr.w	r3, r3, #4
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b24      	ldr	r3, [pc, #144]	@ (800065c <MX_GPIO_Init+0xcc>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	4b21      	ldr	r3, [pc, #132]	@ (800065c <MX_GPIO_Init+0xcc>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a20      	ldr	r2, [pc, #128]	@ (800065c <MX_GPIO_Init+0xcc>)
 80005da:	f043 0308 	orr.w	r3, r3, #8
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <MX_GPIO_Init+0xcc>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0308 	and.w	r3, r3, #8
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f2:	481b      	ldr	r0, [pc, #108]	@ (8000660 <MX_GPIO_Init+0xd0>)
 80005f4:	f000 fbfd 	bl	8000df2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Pin | IN2_Pin | IN4_Pin | IN3_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2178      	movs	r1, #120	@ 0x78
 80005fc:	4819      	ldr	r0, [pc, #100]	@ (8000664 <MX_GPIO_Init+0xd4>)
 80005fe:	f000 fbf8 	bl	8000df2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000602:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2302      	movs	r3, #2
 8000612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4619      	mov	r1, r3
 800061a:	4811      	ldr	r0, [pc, #68]	@ (8000660 <MX_GPIO_Init+0xd0>)
 800061c:	f000 fa4e 	bl	8000abc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = IN1_Pin | IN2_Pin | IN4_Pin | IN3_Pin;
 8000620:	2378      	movs	r3, #120	@ 0x78
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000624:	2301      	movs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2302      	movs	r3, #2
 800062e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4619      	mov	r1, r3
 8000636:	480b      	ldr	r0, [pc, #44]	@ (8000664 <MX_GPIO_Init+0xd4>)
 8000638:	f000 fa40 	bl	8000abc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin FORWARD_Pin BACKWARD_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin | RIGHT_Pin | FORWARD_Pin | BACKWARD_Pin;
 800063c:	23d8      	movs	r3, #216	@ 0xd8
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	@ (8000668 <MX_GPIO_Init+0xd8>)
 8000650:	f000 fa34 	bl	8000abc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40021000 	.word	0x40021000
 8000660:	40011000 	.word	0x40011000
 8000664:	40010800 	.word	0x40010800
 8000668:	40010c00 	.word	0x40010c00

0800066c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
}
 8000672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <Error_Handler+0x8>

08000678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800067e:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <HAL_MspInit+0x5c>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	4a14      	ldr	r2, [pc, #80]	@ (80006d4 <HAL_MspInit+0x5c>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6193      	str	r3, [r2, #24]
 800068a:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <HAL_MspInit+0x5c>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <HAL_MspInit+0x5c>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a0e      	ldr	r2, [pc, #56]	@ (80006d4 <HAL_MspInit+0x5c>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a0:	61d3      	str	r3, [r2, #28]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <HAL_MspInit+0x5c>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <HAL_MspInit+0x60>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <HAL_MspInit+0x60>)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40010000 	.word	0x40010000

080006dc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a09      	ldr	r2, [pc, #36]	@ (8000710 <HAL_TIM_PWM_MspInit+0x34>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d10b      	bne.n	8000706 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <HAL_TIM_PWM_MspInit+0x38>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4a08      	ldr	r2, [pc, #32]	@ (8000714 <HAL_TIM_PWM_MspInit+0x38>)
 80006f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <HAL_TIM_PWM_MspInit+0x38>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40012c00 	.word	0x40012c00
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a10      	ldr	r2, [pc, #64]	@ (8000774 <HAL_TIM_MspPostInit+0x5c>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d118      	bne.n	800076a <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <HAL_TIM_MspPostInit+0x60>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a0e      	ldr	r2, [pc, #56]	@ (8000778 <HAL_TIM_MspPostInit+0x60>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <HAL_TIM_MspPostInit+0x60>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_B_Pin|EN_A_Pin;
 8000750:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000754:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2302      	movs	r3, #2
 800075c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	@ (800077c <HAL_TIM_MspPostInit+0x64>)
 8000766:	f000 f9a9 	bl	8000abc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800076a:	bf00      	nop
 800076c:	3720      	adds	r7, #32
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40012c00 	.word	0x40012c00
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <NMI_Handler+0x4>

08000788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <MemManage_Handler+0x4>

08000798 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 f874 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e4:	f7ff fff8 	bl	80007d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480b      	ldr	r0, [pc, #44]	@ (8000818 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ea:	490c      	ldr	r1, [pc, #48]	@ (800081c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000820 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a09      	ldr	r2, [pc, #36]	@ (8000824 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000800:	4c09      	ldr	r4, [pc, #36]	@ (8000828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080e:	f001 fb6d 	bl	8001eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fd8f 	bl	8000334 <main>
  bx lr
 8000816:	4770      	bx	lr
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000820:	08001f78 	.word	0x08001f78
  ldr r2, =_sbss
 8000824:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000828:	20000074 	.word	0x20000074

0800082c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_2_IRQHandler>
	...

08000830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_Init+0x28>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	@ (8000858 <HAL_Init+0x28>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f907 	bl	8000a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	200f      	movs	r0, #15
 8000848:	f000 f808 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff ff14 	bl	8000678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f911 	bl	8000aa2 <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f000 f8e7 	bl	8000a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <HAL_IncTick+0x1c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <HAL_IncTick+0x20>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a03      	ldr	r2, [pc, #12]	@ (80008dc <HAL_IncTick+0x20>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000070 	.word	0x20000070

080008e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b02      	ldr	r3, [pc, #8]	@ (80008f0 <HAL_GetTick+0x10>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000070 	.word	0x20000070

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800091c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db0a      	blt.n	8000982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	490c      	ldr	r1, [pc, #48]	@ (80009a4 <__NVIC_SetPriority+0x4c>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	440b      	add	r3, r1
 800097c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000980:	e00a      	b.n	8000998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4908      	ldr	r1, [pc, #32]	@ (80009a8 <__NVIC_SetPriority+0x50>)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	3b04      	subs	r3, #4
 8000990:	0112      	lsls	r2, r2, #4
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	440b      	add	r3, r1
 8000996:	761a      	strb	r2, [r3, #24]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000e100 	.word	0xe000e100
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	@ 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f1c3 0307 	rsb	r3, r3, #7
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	bf28      	it	cs
 80009ca:	2304      	movcs	r3, #4
 80009cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	d902      	bls.n	80009dc <NVIC_EncodePriority+0x30>
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3b03      	subs	r3, #3
 80009da:	e000      	b.n	80009de <NVIC_EncodePriority+0x32>
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43da      	mvns	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43d9      	mvns	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	4313      	orrs	r3, r2
         );
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	@ 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a20:	d301      	bcc.n	8000a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00f      	b.n	8000a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a26:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <SysTick_Config+0x40>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2e:	210f      	movs	r1, #15
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f7ff ff90 	bl	8000958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <SysTick_Config+0x40>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3e:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <SysTick_Config+0x40>)
 8000a40:	2207      	movs	r2, #7
 8000a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	e000e010 	.word	0xe000e010

08000a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff49 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a7c:	f7ff ff5e 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	6978      	ldr	r0, [r7, #20]
 8000a88:	f7ff ff90 	bl	80009ac <NVIC_EncodePriority>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff5f 	bl	8000958 <__NVIC_SetPriority>
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffb0 	bl	8000a10 <SysTick_Config>
 8000ab0:	4603      	mov	r3, r0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b08b      	sub	sp, #44	@ 0x2c
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ace:	e169      	b.n	8000da4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	f040 8158 	bne.w	8000d9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4a9a      	ldr	r2, [pc, #616]	@ (8000d5c <HAL_GPIO_Init+0x2a0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d05e      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
 8000af8:	4a98      	ldr	r2, [pc, #608]	@ (8000d5c <HAL_GPIO_Init+0x2a0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d875      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000afe:	4a98      	ldr	r2, [pc, #608]	@ (8000d60 <HAL_GPIO_Init+0x2a4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d058      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
 8000b04:	4a96      	ldr	r2, [pc, #600]	@ (8000d60 <HAL_GPIO_Init+0x2a4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d86f      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000b0a:	4a96      	ldr	r2, [pc, #600]	@ (8000d64 <HAL_GPIO_Init+0x2a8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d052      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
 8000b10:	4a94      	ldr	r2, [pc, #592]	@ (8000d64 <HAL_GPIO_Init+0x2a8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d869      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000b16:	4a94      	ldr	r2, [pc, #592]	@ (8000d68 <HAL_GPIO_Init+0x2ac>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d04c      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
 8000b1c:	4a92      	ldr	r2, [pc, #584]	@ (8000d68 <HAL_GPIO_Init+0x2ac>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d863      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000b22:	4a92      	ldr	r2, [pc, #584]	@ (8000d6c <HAL_GPIO_Init+0x2b0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d046      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
 8000b28:	4a90      	ldr	r2, [pc, #576]	@ (8000d6c <HAL_GPIO_Init+0x2b0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d85d      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000b2e:	2b12      	cmp	r3, #18
 8000b30:	d82a      	bhi.n	8000b88 <HAL_GPIO_Init+0xcc>
 8000b32:	2b12      	cmp	r3, #18
 8000b34:	d859      	bhi.n	8000bea <HAL_GPIO_Init+0x12e>
 8000b36:	a201      	add	r2, pc, #4	@ (adr r2, 8000b3c <HAL_GPIO_Init+0x80>)
 8000b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3c:	08000bb7 	.word	0x08000bb7
 8000b40:	08000b91 	.word	0x08000b91
 8000b44:	08000ba3 	.word	0x08000ba3
 8000b48:	08000be5 	.word	0x08000be5
 8000b4c:	08000beb 	.word	0x08000beb
 8000b50:	08000beb 	.word	0x08000beb
 8000b54:	08000beb 	.word	0x08000beb
 8000b58:	08000beb 	.word	0x08000beb
 8000b5c:	08000beb 	.word	0x08000beb
 8000b60:	08000beb 	.word	0x08000beb
 8000b64:	08000beb 	.word	0x08000beb
 8000b68:	08000beb 	.word	0x08000beb
 8000b6c:	08000beb 	.word	0x08000beb
 8000b70:	08000beb 	.word	0x08000beb
 8000b74:	08000beb 	.word	0x08000beb
 8000b78:	08000beb 	.word	0x08000beb
 8000b7c:	08000beb 	.word	0x08000beb
 8000b80:	08000b99 	.word	0x08000b99
 8000b84:	08000bad 	.word	0x08000bad
 8000b88:	4a79      	ldr	r2, [pc, #484]	@ (8000d70 <HAL_GPIO_Init+0x2b4>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d013      	beq.n	8000bb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b8e:	e02c      	b.n	8000bea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	623b      	str	r3, [r7, #32]
          break;
 8000b96:	e029      	b.n	8000bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	623b      	str	r3, [r7, #32]
          break;
 8000ba0:	e024      	b.n	8000bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	3308      	adds	r3, #8
 8000ba8:	623b      	str	r3, [r7, #32]
          break;
 8000baa:	e01f      	b.n	8000bec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	330c      	adds	r3, #12
 8000bb2:	623b      	str	r3, [r7, #32]
          break;
 8000bb4:	e01a      	b.n	8000bec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d102      	bne.n	8000bc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	623b      	str	r3, [r7, #32]
          break;
 8000bc2:	e013      	b.n	8000bec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d105      	bne.n	8000bd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	69fa      	ldr	r2, [r7, #28]
 8000bd4:	611a      	str	r2, [r3, #16]
          break;
 8000bd6:	e009      	b.n	8000bec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69fa      	ldr	r2, [r7, #28]
 8000be0:	615a      	str	r2, [r3, #20]
          break;
 8000be2:	e003      	b.n	8000bec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
          break;
 8000be8:	e000      	b.n	8000bec <HAL_GPIO_Init+0x130>
          break;
 8000bea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	2bff      	cmp	r3, #255	@ 0xff
 8000bf0:	d801      	bhi.n	8000bf6 <HAL_GPIO_Init+0x13a>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	e001      	b.n	8000bfa <HAL_GPIO_Init+0x13e>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	2bff      	cmp	r3, #255	@ 0xff
 8000c00:	d802      	bhi.n	8000c08 <HAL_GPIO_Init+0x14c>
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	e002      	b.n	8000c0e <HAL_GPIO_Init+0x152>
 8000c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0a:	3b08      	subs	r3, #8
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	210f      	movs	r1, #15
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	401a      	ands	r2, r3
 8000c20:	6a39      	ldr	r1, [r7, #32]
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a4c      	ldr	r2, [pc, #304]	@ (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b4a      	ldr	r3, [pc, #296]	@ (8000d74 <HAL_GPIO_Init+0x2b8>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c54:	4a48      	ldr	r2, [pc, #288]	@ (8000d78 <HAL_GPIO_Init+0x2bc>)
 8000c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a40      	ldr	r2, [pc, #256]	@ (8000d7c <HAL_GPIO_Init+0x2c0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d013      	beq.n	8000ca8 <HAL_GPIO_Init+0x1ec>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a3f      	ldr	r2, [pc, #252]	@ (8000d80 <HAL_GPIO_Init+0x2c4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d00d      	beq.n	8000ca4 <HAL_GPIO_Init+0x1e8>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d84 <HAL_GPIO_Init+0x2c8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d007      	beq.n	8000ca0 <HAL_GPIO_Init+0x1e4>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a3d      	ldr	r2, [pc, #244]	@ (8000d88 <HAL_GPIO_Init+0x2cc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d101      	bne.n	8000c9c <HAL_GPIO_Init+0x1e0>
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e006      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	e004      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e002      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <HAL_GPIO_Init+0x1ee>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cac:	f002 0203 	and.w	r2, r2, #3
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	4093      	lsls	r3, r2
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cba:	492f      	ldr	r1, [pc, #188]	@ (8000d78 <HAL_GPIO_Init+0x2bc>)
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	492c      	ldr	r1, [pc, #176]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	608b      	str	r3, [r1, #8]
 8000ce0:	e006      	b.n	8000cf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	4928      	ldr	r1, [pc, #160]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cfc:	4b23      	ldr	r3, [pc, #140]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	4922      	ldr	r1, [pc, #136]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	60cb      	str	r3, [r1, #12]
 8000d08:	e006      	b.n	8000d18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d0a:	4b20      	ldr	r3, [pc, #128]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	491e      	ldr	r1, [pc, #120]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d24:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	4918      	ldr	r1, [pc, #96]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	604b      	str	r3, [r1, #4]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d32:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	4914      	ldr	r1, [pc, #80]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d021      	beq.n	8000d90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	490e      	ldr	r1, [pc, #56]	@ (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
 8000d58:	e021      	b.n	8000d9e <HAL_GPIO_Init+0x2e2>
 8000d5a:	bf00      	nop
 8000d5c:	10320000 	.word	0x10320000
 8000d60:	10310000 	.word	0x10310000
 8000d64:	10220000 	.word	0x10220000
 8000d68:	10210000 	.word	0x10210000
 8000d6c:	10120000 	.word	0x10120000
 8000d70:	10110000 	.word	0x10110000
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	40011000 	.word	0x40011000
 8000d88:	40011400 	.word	0x40011400
 8000d8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <HAL_GPIO_Init+0x304>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	4909      	ldr	r1, [pc, #36]	@ (8000dc0 <HAL_GPIO_Init+0x304>)
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da0:	3301      	adds	r3, #1
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000daa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f47f ae8e 	bne.w	8000ad0 <HAL_GPIO_Init+0x14>
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	372c      	adds	r7, #44	@ 0x2c
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40010400 	.word	0x40010400

08000dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e001      	b.n	8000de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	807b      	strh	r3, [r7, #2]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e02:	787b      	ldrb	r3, [r7, #1]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e08:	887a      	ldrh	r2, [r7, #2]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e0e:	e003      	b.n	8000e18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e10:	887b      	ldrh	r3, [r7, #2]
 8000e12:	041a      	lsls	r2, r3, #16
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	611a      	str	r2, [r3, #16]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
	...

08000e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e272      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8087 	beq.w	8000f52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e44:	4b92      	ldr	r3, [pc, #584]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d00c      	beq.n	8000e6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e50:	4b8f      	ldr	r3, [pc, #572]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d112      	bne.n	8000e82 <HAL_RCC_OscConfig+0x5e>
 8000e5c:	4b8c      	ldr	r3, [pc, #560]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e68:	d10b      	bne.n	8000e82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6a:	4b89      	ldr	r3, [pc, #548]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d06c      	beq.n	8000f50 <HAL_RCC_OscConfig+0x12c>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d168      	bne.n	8000f50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e24c      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e8a:	d106      	bne.n	8000e9a <HAL_RCC_OscConfig+0x76>
 8000e8c:	4b80      	ldr	r3, [pc, #512]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a7f      	ldr	r2, [pc, #508]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e02e      	b.n	8000ef8 <HAL_RCC_OscConfig+0xd4>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x98>
 8000ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a7a      	ldr	r2, [pc, #488]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b78      	ldr	r3, [pc, #480]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a77      	ldr	r2, [pc, #476]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e01d      	b.n	8000ef8 <HAL_RCC_OscConfig+0xd4>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0xbc>
 8000ec6:	4b72      	ldr	r3, [pc, #456]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a71      	ldr	r2, [pc, #452]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e00b      	b.n	8000ef8 <HAL_RCC_OscConfig+0xd4>
 8000ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a6a      	ldr	r2, [pc, #424]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b68      	ldr	r3, [pc, #416]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a67      	ldr	r2, [pc, #412]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f00:	f7ff fcee 	bl	80008e0 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f08:	f7ff fcea 	bl	80008e0 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	@ 0x64
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e200      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f0      	beq.n	8000f08 <HAL_RCC_OscConfig+0xe4>
 8000f26:	e014      	b.n	8000f52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fcda 	bl	80008e0 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fcd6 	bl	80008e0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	@ 0x64
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e1ec      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f42:	4b53      	ldr	r3, [pc, #332]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f0      	bne.n	8000f30 <HAL_RCC_OscConfig+0x10c>
 8000f4e:	e000      	b.n	8000f52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d063      	beq.n	8001026 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 030c 	and.w	r3, r3, #12
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00b      	beq.n	8000f82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f6a:	4b49      	ldr	r3, [pc, #292]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d11c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x18c>
 8000f76:	4b46      	ldr	r3, [pc, #280]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d116      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f82:	4b43      	ldr	r3, [pc, #268]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <HAL_RCC_OscConfig+0x176>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d001      	beq.n	8000f9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e1c0      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4939      	ldr	r1, [pc, #228]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fae:	e03a      	b.n	8001026 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d020      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb8:	4b36      	ldr	r3, [pc, #216]	@ (8001094 <HAL_RCC_OscConfig+0x270>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fc8f 	bl	80008e0 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc6:	f7ff fc8b 	bl	80008e0 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e1a1      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4927      	ldr	r1, [pc, #156]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	600b      	str	r3, [r1, #0]
 8000ff8:	e015      	b.n	8001026 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <HAL_RCC_OscConfig+0x270>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fc6e 	bl	80008e0 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001008:	f7ff fc6a 	bl	80008e0 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e180      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101a:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d03a      	beq.n	80010a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d019      	beq.n	800106e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <HAL_RCC_OscConfig+0x274>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001040:	f7ff fc4e 	bl	80008e0 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001048:	f7ff fc4a 	bl	80008e0 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e160      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 800105c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001066:	2001      	movs	r0, #1
 8001068:	f000 fa9c 	bl	80015a4 <RCC_Delay>
 800106c:	e01c      	b.n	80010a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_RCC_OscConfig+0x274>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001074:	f7ff fc34 	bl	80008e0 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800107a:	e00f      	b.n	800109c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800107c:	f7ff fc30 	bl	80008e0 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d908      	bls.n	800109c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e146      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	42420000 	.word	0x42420000
 8001098:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800109c:	4b92      	ldr	r3, [pc, #584]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1e9      	bne.n	800107c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80a6 	beq.w	8001202 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ba:	4b8b      	ldr	r3, [pc, #556]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10d      	bne.n	80010e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b88      	ldr	r3, [pc, #544]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a87      	ldr	r2, [pc, #540]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b85      	ldr	r3, [pc, #532]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010de:	2301      	movs	r3, #1
 80010e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e2:	4b82      	ldr	r3, [pc, #520]	@ (80012ec <HAL_RCC_OscConfig+0x4c8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ee:	4b7f      	ldr	r3, [pc, #508]	@ (80012ec <HAL_RCC_OscConfig+0x4c8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a7e      	ldr	r2, [pc, #504]	@ (80012ec <HAL_RCC_OscConfig+0x4c8>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010fa:	f7ff fbf1 	bl	80008e0 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001102:	f7ff fbed 	bl	80008e0 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b64      	cmp	r3, #100	@ 0x64
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e103      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001114:	4b75      	ldr	r3, [pc, #468]	@ (80012ec <HAL_RCC_OscConfig+0x4c8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d106      	bne.n	8001136 <HAL_RCC_OscConfig+0x312>
 8001128:	4b6f      	ldr	r3, [pc, #444]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a6e      	ldr	r2, [pc, #440]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6213      	str	r3, [r2, #32]
 8001134:	e02d      	b.n	8001192 <HAL_RCC_OscConfig+0x36e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x334>
 800113e:	4b6a      	ldr	r3, [pc, #424]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a69      	ldr	r2, [pc, #420]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	f023 0301 	bic.w	r3, r3, #1
 8001148:	6213      	str	r3, [r2, #32]
 800114a:	4b67      	ldr	r3, [pc, #412]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4a66      	ldr	r2, [pc, #408]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	f023 0304 	bic.w	r3, r3, #4
 8001154:	6213      	str	r3, [r2, #32]
 8001156:	e01c      	b.n	8001192 <HAL_RCC_OscConfig+0x36e>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b05      	cmp	r3, #5
 800115e:	d10c      	bne.n	800117a <HAL_RCC_OscConfig+0x356>
 8001160:	4b61      	ldr	r3, [pc, #388]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	4a60      	ldr	r2, [pc, #384]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6213      	str	r3, [r2, #32]
 800116c:	4b5e      	ldr	r3, [pc, #376]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4a5d      	ldr	r2, [pc, #372]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6213      	str	r3, [r2, #32]
 8001178:	e00b      	b.n	8001192 <HAL_RCC_OscConfig+0x36e>
 800117a:	4b5b      	ldr	r3, [pc, #364]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a5a      	ldr	r2, [pc, #360]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	f023 0301 	bic.w	r3, r3, #1
 8001184:	6213      	str	r3, [r2, #32]
 8001186:	4b58      	ldr	r3, [pc, #352]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	4a57      	ldr	r2, [pc, #348]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	f023 0304 	bic.w	r3, r3, #4
 8001190:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d015      	beq.n	80011c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119a:	f7ff fba1 	bl	80008e0 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a2:	f7ff fb9d 	bl	80008e0 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e0b1      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b8:	4b4b      	ldr	r3, [pc, #300]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0ee      	beq.n	80011a2 <HAL_RCC_OscConfig+0x37e>
 80011c4:	e014      	b.n	80011f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c6:	f7ff fb8b 	bl	80008e0 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011cc:	e00a      	b.n	80011e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f7ff fb87 	bl	80008e0 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011dc:	4293      	cmp	r3, r2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e09b      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e4:	4b40      	ldr	r3, [pc, #256]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1ee      	bne.n	80011ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d105      	bne.n	8001202 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f6:	4b3c      	ldr	r3, [pc, #240]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a3b      	ldr	r2, [pc, #236]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001200:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8087 	beq.w	800131a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800120c:	4b36      	ldr	r3, [pc, #216]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b08      	cmp	r3, #8
 8001216:	d061      	beq.n	80012dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d146      	bne.n	80012ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001220:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <HAL_RCC_OscConfig+0x4cc>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001226:	f7ff fb5b 	bl	80008e0 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122e:	f7ff fb57 	bl	80008e0 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e06d      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001240:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f0      	bne.n	800122e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001254:	d108      	bne.n	8001268 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4921      	ldr	r1, [pc, #132]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a19      	ldr	r1, [r3, #32]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001278:	430b      	orrs	r3, r1
 800127a:	491b      	ldr	r1, [pc, #108]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <HAL_RCC_OscConfig+0x4cc>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fb2b 	bl	80008e0 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128e:	f7ff fb27 	bl	80008e0 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e03d      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x46a>
 80012ac:	e035      	b.n	800131a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <HAL_RCC_OscConfig+0x4cc>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fb14 	bl	80008e0 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012bc:	f7ff fb10 	bl	80008e0 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e026      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x498>
 80012da:	e01e      	b.n	800131a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d107      	bne.n	80012f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e019      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40007000 	.word	0x40007000
 80012f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_RCC_OscConfig+0x500>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	429a      	cmp	r2, r3
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001312:	429a      	cmp	r2, r3
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e0d0      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800133c:	4b6a      	ldr	r3, [pc, #424]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d910      	bls.n	800136c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b67      	ldr	r3, [pc, #412]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 0207 	bic.w	r2, r3, #7
 8001352:	4965      	ldr	r1, [pc, #404]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b63      	ldr	r3, [pc, #396]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0b8      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001384:	4b59      	ldr	r3, [pc, #356]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a58      	ldr	r2, [pc, #352]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800138e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800139c:	4b53      	ldr	r3, [pc, #332]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a52      	ldr	r2, [pc, #328]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80013a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a8:	4b50      	ldr	r3, [pc, #320]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	494d      	ldr	r1, [pc, #308]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d040      	beq.n	8001448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b47      	ldr	r3, [pc, #284]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d115      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e07f      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e6:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e073      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e06b      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001406:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f023 0203 	bic.w	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4936      	ldr	r1, [pc, #216]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001418:	f7ff fa62 	bl	80008e0 <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141e:	e00a      	b.n	8001436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001420:	f7ff fa5e 	bl	80008e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e053      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 020c 	and.w	r2, r3, #12
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	429a      	cmp	r2, r3
 8001446:	d1eb      	bne.n	8001420 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001448:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d210      	bcs.n	8001478 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 0207 	bic.w	r2, r3, #7
 800145e:	4922      	ldr	r1, [pc, #136]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e032      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001484:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4916      	ldr	r1, [pc, #88]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014a2:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	490e      	ldr	r1, [pc, #56]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014b6:	f000 f821 	bl	80014fc <HAL_RCC_GetSysClockFreq>
 80014ba:	4602      	mov	r2, r0
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	490a      	ldr	r1, [pc, #40]	@ (80014f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014c8:	5ccb      	ldrb	r3, [r1, r3]
 80014ca:	fa22 f303 	lsr.w	r3, r2, r3
 80014ce:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <HAL_RCC_ClockConfig+0x1cc>)
 80014d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <HAL_RCC_ClockConfig+0x1d0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f9c0 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	08001f4c 	.word	0x08001f4c
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001516:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x94>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b04      	cmp	r3, #4
 8001524:	d002      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x30>
 8001526:	2b08      	cmp	r3, #8
 8001528:	d003      	beq.n	8001532 <HAL_RCC_GetSysClockFreq+0x36>
 800152a:	e027      	b.n	800157c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x98>)
 800152e:	613b      	str	r3, [r7, #16]
      break;
 8001530:	e027      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	0c9b      	lsrs	r3, r3, #18
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	4a17      	ldr	r2, [pc, #92]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x9c>)
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d010      	beq.n	800156c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x94>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	0c5b      	lsrs	r3, r3, #17
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	4a11      	ldr	r2, [pc, #68]	@ (800159c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x98>)
 800155e:	fb03 f202 	mul.w	r2, r3, r2
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e004      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	613b      	str	r3, [r7, #16]
      break;
 800157a:	e002      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x98>)
 800157e:	613b      	str	r3, [r7, #16]
      break;
 8001580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001582:	693b      	ldr	r3, [r7, #16]
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	007a1200 	.word	0x007a1200
 8001598:	08001f5c 	.word	0x08001f5c
 800159c:	08001f6c 	.word	0x08001f6c
 80015a0:	003d0900 	.word	0x003d0900

080015a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015ac:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <RCC_Delay+0x34>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <RCC_Delay+0x38>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	0a5b      	lsrs	r3, r3, #9
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015c0:	bf00      	nop
  }
  while (Delay --);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1e5a      	subs	r2, r3, #1
 80015c6:	60fa      	str	r2, [r7, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f9      	bne.n	80015c0 <RCC_Delay+0x1c>
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20000000 	.word	0x20000000
 80015dc:	10624dd3 	.word	0x10624dd3

080015e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e041      	b.n	8001676 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d106      	bne.n	800160c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff f868 	bl	80006dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3304      	adds	r3, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4610      	mov	r0, r2
 8001620:	f000 f992 	bl	8001948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <HAL_TIM_PWM_Start+0x24>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b01      	cmp	r3, #1
 800169a:	bf14      	ite	ne
 800169c:	2301      	movne	r3, #1
 800169e:	2300      	moveq	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	e022      	b.n	80016ea <HAL_TIM_PWM_Start+0x6a>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d109      	bne.n	80016be <HAL_TIM_PWM_Start+0x3e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	e015      	b.n	80016ea <HAL_TIM_PWM_Start+0x6a>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d109      	bne.n	80016d8 <HAL_TIM_PWM_Start+0x58>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	bf14      	ite	ne
 80016d0:	2301      	movne	r3, #1
 80016d2:	2300      	moveq	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	e008      	b.n	80016ea <HAL_TIM_PWM_Start+0x6a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	bf14      	ite	ne
 80016e4:	2301      	movne	r3, #1
 80016e6:	2300      	moveq	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e05e      	b.n	80017b0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d104      	bne.n	8001702 <HAL_TIM_PWM_Start+0x82>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001700:	e013      	b.n	800172a <HAL_TIM_PWM_Start+0xaa>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b04      	cmp	r3, #4
 8001706:	d104      	bne.n	8001712 <HAL_TIM_PWM_Start+0x92>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001710:	e00b      	b.n	800172a <HAL_TIM_PWM_Start+0xaa>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2b08      	cmp	r3, #8
 8001716:	d104      	bne.n	8001722 <HAL_TIM_PWM_Start+0xa2>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001720:	e003      	b.n	800172a <HAL_TIM_PWM_Start+0xaa>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2202      	movs	r2, #2
 8001726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2201      	movs	r2, #1
 8001730:	6839      	ldr	r1, [r7, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fafe 	bl	8001d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1e      	ldr	r2, [pc, #120]	@ (80017b8 <HAL_TIM_PWM_Start+0x138>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d107      	bne.n	8001752 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001750:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a18      	ldr	r2, [pc, #96]	@ (80017b8 <HAL_TIM_PWM_Start+0x138>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d00e      	beq.n	800177a <HAL_TIM_PWM_Start+0xfa>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001764:	d009      	beq.n	800177a <HAL_TIM_PWM_Start+0xfa>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a14      	ldr	r2, [pc, #80]	@ (80017bc <HAL_TIM_PWM_Start+0x13c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d004      	beq.n	800177a <HAL_TIM_PWM_Start+0xfa>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a12      	ldr	r2, [pc, #72]	@ (80017c0 <HAL_TIM_PWM_Start+0x140>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d111      	bne.n	800179e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b06      	cmp	r3, #6
 800178a:	d010      	beq.n	80017ae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800179c:	e007      	b.n	80017ae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40012c00 	.word	0x40012c00
 80017bc:	40000400 	.word	0x40000400
 80017c0:	40000800 	.word	0x40000800

080017c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80017de:	2302      	movs	r3, #2
 80017e0:	e0ae      	b.n	8001940 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	f200 809f 	bhi.w	8001930 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80017f2:	a201      	add	r2, pc, #4	@ (adr r2, 80017f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	0800182d 	.word	0x0800182d
 80017fc:	08001931 	.word	0x08001931
 8001800:	08001931 	.word	0x08001931
 8001804:	08001931 	.word	0x08001931
 8001808:	0800186d 	.word	0x0800186d
 800180c:	08001931 	.word	0x08001931
 8001810:	08001931 	.word	0x08001931
 8001814:	08001931 	.word	0x08001931
 8001818:	080018af 	.word	0x080018af
 800181c:	08001931 	.word	0x08001931
 8001820:	08001931 	.word	0x08001931
 8001824:	08001931 	.word	0x08001931
 8001828:	080018ef 	.word	0x080018ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f8f6 	bl	8001a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0208 	orr.w	r2, r2, #8
 8001846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0204 	bic.w	r2, r2, #4
 8001856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6999      	ldr	r1, [r3, #24]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	619a      	str	r2, [r3, #24]
      break;
 800186a:	e064      	b.n	8001936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f93c 	bl	8001af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6999      	ldr	r1, [r3, #24]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	021a      	lsls	r2, r3, #8
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	619a      	str	r2, [r3, #24]
      break;
 80018ac:	e043      	b.n	8001936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68b9      	ldr	r1, [r7, #8]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f985 	bl	8001bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69da      	ldr	r2, [r3, #28]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0208 	orr.w	r2, r2, #8
 80018c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69da      	ldr	r2, [r3, #28]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0204 	bic.w	r2, r2, #4
 80018d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	69d9      	ldr	r1, [r3, #28]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	61da      	str	r2, [r3, #28]
      break;
 80018ec:	e023      	b.n	8001936 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f9cf 	bl	8001c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69da      	ldr	r2, [r3, #28]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	69d9      	ldr	r1, [r3, #28]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	021a      	lsls	r2, r3, #8
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	61da      	str	r2, [r3, #28]
      break;
 800192e:	e002      	b.n	8001936 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	75fb      	strb	r3, [r7, #23]
      break;
 8001934:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800193e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a18 <TIM_Base_SetConfig+0xd0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00b      	beq.n	8001978 <TIM_Base_SetConfig+0x30>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001966:	d007      	beq.n	8001978 <TIM_Base_SetConfig+0x30>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a2c      	ldr	r2, [pc, #176]	@ (8001a1c <TIM_Base_SetConfig+0xd4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d003      	beq.n	8001978 <TIM_Base_SetConfig+0x30>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a2b      	ldr	r2, [pc, #172]	@ (8001a20 <TIM_Base_SetConfig+0xd8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d108      	bne.n	800198a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800197e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a22      	ldr	r2, [pc, #136]	@ (8001a18 <TIM_Base_SetConfig+0xd0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00b      	beq.n	80019aa <TIM_Base_SetConfig+0x62>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001998:	d007      	beq.n	80019aa <TIM_Base_SetConfig+0x62>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a1f      	ldr	r2, [pc, #124]	@ (8001a1c <TIM_Base_SetConfig+0xd4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d003      	beq.n	80019aa <TIM_Base_SetConfig+0x62>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001a20 <TIM_Base_SetConfig+0xd8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d108      	bne.n	80019bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <TIM_Base_SetConfig+0xd0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d103      	bne.n	80019f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f023 0201 	bic.w	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	40012c00 	.word	0x40012c00
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40000800 	.word	0x40000800

08001a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f023 0201 	bic.w	r2, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f023 0303 	bic.w	r3, r3, #3
 8001a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f023 0302 	bic.w	r3, r3, #2
 8001a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aec <TIM_OC1_SetConfig+0xc8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d10c      	bne.n	8001a9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f023 0308 	bic.w	r3, r3, #8
 8001a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a13      	ldr	r2, [pc, #76]	@ (8001aec <TIM_OC1_SetConfig+0xc8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d111      	bne.n	8001ac6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	621a      	str	r2, [r3, #32]
}
 8001ae0:	bf00      	nop
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40012c00 	.word	0x40012c00

08001af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f023 0210 	bic.w	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f023 0320 	bic.w	r3, r3, #32
 8001b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc0 <TIM_OC2_SetConfig+0xd0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10d      	bne.n	8001b6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001b6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <TIM_OC2_SetConfig+0xd0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d113      	bne.n	8001b9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	621a      	str	r2, [r3, #32]
}
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40012c00 	.word	0x40012c00

08001bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f023 0303 	bic.w	r3, r3, #3
 8001bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c94 <TIM_OC3_SetConfig+0xd0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d10d      	bne.n	8001c3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a14      	ldr	r2, [pc, #80]	@ (8001c94 <TIM_OC3_SetConfig+0xd0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d113      	bne.n	8001c6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	621a      	str	r2, [r3, #32]
}
 8001c88:	bf00      	nop
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40012c00 	.word	0x40012c00

08001c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	031b      	lsls	r3, r3, #12
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8001d30 <TIM_OC4_SetConfig+0x98>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d109      	bne.n	8001d0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	621a      	str	r2, [r3, #32]
}
 8001d26:	bf00      	nop
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	40012c00 	.word	0x40012c00

08001d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	2201      	movs	r2, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a1a      	ldr	r2, [r3, #32]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	401a      	ands	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a1a      	ldr	r2, [r3, #32]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	621a      	str	r2, [r3, #32]
}
 8001d72:	bf00      	nop
 8001d74:	371c      	adds	r7, #28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e046      	b.n	8001e22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a16      	ldr	r2, [pc, #88]	@ (8001e2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00e      	beq.n	8001df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de0:	d009      	beq.n	8001df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a12      	ldr	r2, [pc, #72]	@ (8001e30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d004      	beq.n	8001df6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a10      	ldr	r2, [pc, #64]	@ (8001e34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10c      	bne.n	8001e10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	40012c00 	.word	0x40012c00
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40000800 	.word	0x40000800

08001e38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e03d      	b.n	8001ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <memset>:
 8001eda:	4603      	mov	r3, r0
 8001edc:	4402      	add	r2, r0
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d100      	bne.n	8001ee4 <memset+0xa>
 8001ee2:	4770      	bx	lr
 8001ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8001ee8:	e7f9      	b.n	8001ede <memset+0x4>
	...

08001eec <__libc_init_array>:
 8001eec:	b570      	push	{r4, r5, r6, lr}
 8001eee:	2600      	movs	r6, #0
 8001ef0:	4d0c      	ldr	r5, [pc, #48]	@ (8001f24 <__libc_init_array+0x38>)
 8001ef2:	4c0d      	ldr	r4, [pc, #52]	@ (8001f28 <__libc_init_array+0x3c>)
 8001ef4:	1b64      	subs	r4, r4, r5
 8001ef6:	10a4      	asrs	r4, r4, #2
 8001ef8:	42a6      	cmp	r6, r4
 8001efa:	d109      	bne.n	8001f10 <__libc_init_array+0x24>
 8001efc:	f000 f81a 	bl	8001f34 <_init>
 8001f00:	2600      	movs	r6, #0
 8001f02:	4d0a      	ldr	r5, [pc, #40]	@ (8001f2c <__libc_init_array+0x40>)
 8001f04:	4c0a      	ldr	r4, [pc, #40]	@ (8001f30 <__libc_init_array+0x44>)
 8001f06:	1b64      	subs	r4, r4, r5
 8001f08:	10a4      	asrs	r4, r4, #2
 8001f0a:	42a6      	cmp	r6, r4
 8001f0c:	d105      	bne.n	8001f1a <__libc_init_array+0x2e>
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}
 8001f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f14:	4798      	blx	r3
 8001f16:	3601      	adds	r6, #1
 8001f18:	e7ee      	b.n	8001ef8 <__libc_init_array+0xc>
 8001f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f1e:	4798      	blx	r3
 8001f20:	3601      	adds	r6, #1
 8001f22:	e7f2      	b.n	8001f0a <__libc_init_array+0x1e>
 8001f24:	08001f70 	.word	0x08001f70
 8001f28:	08001f70 	.word	0x08001f70
 8001f2c:	08001f70 	.word	0x08001f70
 8001f30:	08001f74 	.word	0x08001f74

08001f34 <_init>:
 8001f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f36:	bf00      	nop
 8001f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f3a:	bc08      	pop	{r3}
 8001f3c:	469e      	mov	lr, r3
 8001f3e:	4770      	bx	lr

08001f40 <_fini>:
 8001f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f42:	bf00      	nop
 8001f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f46:	bc08      	pop	{r3}
 8001f48:	469e      	mov	lr, r3
 8001f4a:	4770      	bx	lr
