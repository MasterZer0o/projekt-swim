
proj_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004504  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e3c  08004610  08004610  00005610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800544c  0800544c  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800544c  0800544c  00007064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800544c  0800544c  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800544c  0800544c  0000644c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005450  08005450  00006450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005454  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000064  080054b8  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  080054b8  0000747c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c29f  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e86  00000000  00000000  0001332c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  000151b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abc  00000000  00000000  00015f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001831a  00000000  00000000  00016a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101b2  00000000  00000000  0002ed5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc6f  00000000  00000000  0003ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cab7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004094  00000000  00000000  000cabc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080045f8 	.word	0x080045f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080045f8 	.word	0x080045f8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <DWT_Init+0x38>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10e      	bne.n	80007ae <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <DWT_Init+0x38>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <DWT_Init+0x38>)
 8000796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800079a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <DWT_Init+0x3c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <DWT_Init+0x3c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a05      	ldr	r2, [pc, #20]	@ (80007bc <DWT_Init+0x3c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6013      	str	r3, [r2, #0]
    }
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000edf0 	.word	0xe000edf0
 80007bc:	e0001000 	.word	0xe0001000

080007c0 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <DWT_Delay+0x40>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <DWT_Delay+0x44>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <DWT_Delay+0x48>)
 80007d4:	fba2 2303 	umull	r2, r3, r2, r3
 80007d8:	0c9a      	lsrs	r2, r3, #18
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	fb02 f303 	mul.w	r3, r2, r3
 80007e0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80007e2:	bf00      	nop
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <DWT_Delay+0x40>)
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d8f8      	bhi.n	80007e4 <DWT_Delay+0x24>
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e0001000 	.word	0xe0001000
 8000804:	20000008 	.word	0x20000008
 8000808:	431bde83 	.word	0x431bde83

0800080c <setSpeed>:
/* USER CODE BEGIN 0 */
static int currentSpeed = BASE_SPEED;
static uint32_t last_update_time = 0;

void setSpeed(int speed1, int speed2)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed1);
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <setSpeed+0x24>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed2);
 800081e:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <setSpeed+0x24>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	683a      	ldr	r2, [r7, #0]
 8000824:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	200000d4 	.word	0x200000d4

08000834 <setDirections>:

void setDirections(GPIO_PinState in1, GPIO_PinState in2, GPIO_PinState in3, GPIO_PinState in4)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4604      	mov	r4, r0
 800083c:	4608      	mov	r0, r1
 800083e:	4611      	mov	r1, r2
 8000840:	461a      	mov	r2, r3
 8000842:	4623      	mov	r3, r4
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	4603      	mov	r3, r0
 8000848:	71bb      	strb	r3, [r7, #6]
 800084a:	460b      	mov	r3, r1
 800084c:	717b      	strb	r3, [r7, #5]
 800084e:	4613      	mov	r3, r2
 8000850:	713b      	strb	r3, [r7, #4]
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, in1);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	461a      	mov	r2, r3
 8000856:	2101      	movs	r1, #1
 8000858:	480d      	ldr	r0, [pc, #52]	@ (8000890 <setDirections+0x5c>)
 800085a:	f001 fcca 	bl	80021f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, in2);
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	461a      	mov	r2, r3
 8000862:	2102      	movs	r1, #2
 8000864:	480a      	ldr	r0, [pc, #40]	@ (8000890 <setDirections+0x5c>)
 8000866:	f001 fcc4 	bl	80021f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, in3);
 800086a:	797b      	ldrb	r3, [r7, #5]
 800086c:	461a      	mov	r2, r3
 800086e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000872:	4807      	ldr	r0, [pc, #28]	@ (8000890 <setDirections+0x5c>)
 8000874:	f001 fcbd 	bl	80021f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, in4);
 8000878:	793b      	ldrb	r3, [r7, #4]
 800087a:	461a      	mov	r2, r3
 800087c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000880:	4803      	ldr	r0, [pc, #12]	@ (8000890 <setDirections+0x5c>)
 8000882:	f001 fcb6 	bl	80021f2 <HAL_GPIO_WritePin>
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	bf00      	nop
 8000890:	40010c00 	.word	0x40010c00

08000894 <stop>:

void stop()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  setSpeed(0, 0);
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ffb6 	bl	800080c <setSpeed>
  setDirections(false, false, false, false);
 80008a0:	2300      	movs	r3, #0
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff ffc4 	bl	8000834 <setDirections>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <resetDirection>:

void resetDirection()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  stop();         // reset silników
 80008b4:	f7ff ffee 	bl	8000894 <stop>
  HAL_Delay(150); // odczekanie
 80008b8:	2096      	movs	r0, #150	@ 0x96
 80008ba:	f001 f9f7 	bl	8001cac <HAL_Delay>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <turnLeft>:

void turnLeft()
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  setSpeed(BASE_SPEED + 25, BASE_SPEED + 25);
 80008c6:	214b      	movs	r1, #75	@ 0x4b
 80008c8:	204b      	movs	r0, #75	@ 0x4b
 80008ca:	f7ff ff9f 	bl	800080c <setSpeed>
  // lewy silnik do tyłu
  // prawy silnik do przodu
  setDirections(LOW, HIGH, HIGH, LOW);
 80008ce:	2000      	movs	r0, #0
 80008d0:	2101      	movs	r1, #1
 80008d2:	2201      	movs	r2, #1
 80008d4:	2300      	movs	r3, #0
 80008d6:	f7ff ffad 	bl	8000834 <setDirections>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}

080008de <turnRight>:

void turnRight()
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  setSpeed(BASE_SPEED + 25, BASE_SPEED + 25);
 80008e2:	214b      	movs	r1, #75	@ 0x4b
 80008e4:	204b      	movs	r0, #75	@ 0x4b
 80008e6:	f7ff ff91 	bl	800080c <setSpeed>
  // lewy silnik do przodu
  // prawy silnik do tyłu
  setDirections(HIGH, LOW, LOW, HIGH);
 80008ea:	2001      	movs	r0, #1
 80008ec:	2100      	movs	r1, #0
 80008ee:	2200      	movs	r2, #0
 80008f0:	2301      	movs	r3, #1
 80008f2:	f7ff ff9f 	bl	8000834 <setDirections>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <goForward>:

void goForward()
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  setSpeed(currentSpeed, currentSpeed);
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <goForward+0x24>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a06      	ldr	r2, [pc, #24]	@ (8000920 <goForward+0x24>)
 8000906:	6812      	ldr	r2, [r2, #0]
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff7e 	bl	800080c <setSpeed>
  setDirections(HIGH, LOW, HIGH, LOW);
 8000910:	2001      	movs	r0, #1
 8000912:	2100      	movs	r1, #0
 8000914:	2201      	movs	r2, #1
 8000916:	2300      	movs	r3, #0
 8000918:	f7ff ff8c 	bl	8000834 <setDirections>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000

08000924 <goBackward>:

void goBackward()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  setSpeed(currentSpeed, currentSpeed);
 8000928:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <goBackward+0x24>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a06      	ldr	r2, [pc, #24]	@ (8000948 <goBackward+0x24>)
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff6a 	bl	800080c <setSpeed>
  setDirections(LOW, HIGH, LOW, HIGH);
 8000938:	2000      	movs	r0, #0
 800093a:	2101      	movs	r1, #1
 800093c:	2200      	movs	r2, #0
 800093e:	2301      	movs	r3, #1
 8000940:	f7ff ff78 	bl	8000834 <setDirections>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000

0800094c <read_distance_cm>:

float read_distance_cm()
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
  uint32_t startTick, endTick, pulseDuration;
  float distance;

  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, LOW);
 8000952:	2300      	movs	r3, #0
 8000954:	461a      	mov	r2, r3
 8000956:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800095a:	4832      	ldr	r0, [pc, #200]	@ (8000a24 <read_distance_cm+0xd8>)
 800095c:	f001 fc49 	bl	80021f2 <HAL_GPIO_WritePin>
  DWT_Delay(2);
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff ff2d 	bl	80007c0 <DWT_Delay>
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, HIGH);
 8000966:	2301      	movs	r3, #1
 8000968:	461a      	mov	r2, r3
 800096a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800096e:	482d      	ldr	r0, [pc, #180]	@ (8000a24 <read_distance_cm+0xd8>)
 8000970:	f001 fc3f 	bl	80021f2 <HAL_GPIO_WritePin>
  DWT_Delay(10);
 8000974:	200a      	movs	r0, #10
 8000976:	f7ff ff23 	bl	80007c0 <DWT_Delay>
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, LOW);
 800097a:	2300      	movs	r3, #0
 800097c:	461a      	mov	r2, r3
 800097e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000982:	4828      	ldr	r0, [pc, #160]	@ (8000a24 <read_distance_cm+0xd8>)
 8000984:	f001 fc35 	bl	80021f2 <HAL_GPIO_WritePin>

  // Wait for Echo to go HIGH
  while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == LOW)
 8000988:	bf00      	nop
 800098a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800098e:	4825      	ldr	r0, [pc, #148]	@ (8000a24 <read_distance_cm+0xd8>)
 8000990:	f001 fc18 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	2300      	movs	r3, #0
 800099a:	429a      	cmp	r2, r3
 800099c:	d0f5      	beq.n	800098a <read_distance_cm+0x3e>
    ;
  startTick = DWT->CYCCNT;
 800099e:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <read_distance_cm+0xdc>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	617b      	str	r3, [r7, #20]

  // Wait for Echo to go LOW
  while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == HIGH)
 80009a4:	bf00      	nop
 80009a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009aa:	481e      	ldr	r0, [pc, #120]	@ (8000a24 <read_distance_cm+0xd8>)
 80009ac:	f001 fc0a 	bl	80021c4 <HAL_GPIO_ReadPin>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	2301      	movs	r3, #1
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d0f5      	beq.n	80009a6 <read_distance_cm+0x5a>
    ;
  endTick = DWT->CYCCNT;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <read_distance_cm+0xdc>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	613b      	str	r3, [r7, #16]

  uint32_t cpu_freq = HAL_RCC_GetHCLKFreq();
 80009c0:	f002 fc9c 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 80009c4:	60f8      	str	r0, [r7, #12]
  pulseDuration = (float)(endTick - startTick) / (cpu_freq / 1000000.0f);
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fc73 	bl	80002b8 <__aeabi_ui2f>
 80009d2:	4604      	mov	r4, r0
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f7ff fc6f 	bl	80002b8 <__aeabi_ui2f>
 80009da:	4603      	mov	r3, r0
 80009dc:	4913      	ldr	r1, [pc, #76]	@ (8000a2c <read_distance_cm+0xe0>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fd76 	bl	80004d0 <__aeabi_fdiv>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4619      	mov	r1, r3
 80009e8:	4620      	mov	r0, r4
 80009ea:	f7ff fd71 	bl	80004d0 <__aeabi_fdiv>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fea5 	bl	8000740 <__aeabi_f2uiz>
 80009f6:	4603      	mov	r3, r0
 80009f8:	60bb      	str	r3, [r7, #8]

  // distance in cm
  distance = pulseDuration * 0.0343f / 2.0f;
 80009fa:	68b8      	ldr	r0, [r7, #8]
 80009fc:	f7ff fc5c 	bl	80002b8 <__aeabi_ui2f>
 8000a00:	4603      	mov	r3, r0
 8000a02:	490b      	ldr	r1, [pc, #44]	@ (8000a30 <read_distance_cm+0xe4>)
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fcaf 	bl	8000368 <__aeabi_fmul>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fd5d 	bl	80004d0 <__aeabi_fdiv>
 8000a16:	4603      	mov	r3, r0
 8000a18:	607b      	str	r3, [r7, #4]

  return distance;
 8000a1a:	687b      	ldr	r3, [r7, #4]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	371c      	adds	r7, #28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	40010800 	.word	0x40010800
 8000a28:	e0001000 	.word	0xe0001000
 8000a2c:	49742400 	.word	0x49742400
 8000a30:	3d0c7e28 	.word	0x3d0c7e28

08000a34 <shouldGoLeft>:

bool shouldGoLeft()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == HIGH;
 8000a38:	2108      	movs	r1, #8
 8000a3a:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <shouldGoLeft+0x20>)
 8000a3c:	f001 fbc2 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	2301      	movs	r3, #1
 8000a46:	429a      	cmp	r2, r3
 8000a48:	bf0c      	ite	eq
 8000a4a:	2301      	moveq	r3, #1
 8000a4c:	2300      	movne	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <shouldGoRight>:

bool shouldGoRight()
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin) == HIGH;
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <shouldGoRight+0x20>)
 8000a60:	f001 fbb0 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	2301      	movs	r3, #1
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	bf0c      	ite	eq
 8000a6e:	2301      	moveq	r3, #1
 8000a70:	2300      	movne	r3, #0
 8000a72:	b2db      	uxtb	r3, r3
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40010c00 	.word	0x40010c00

08000a7c <shouldGoForward>:

bool shouldGoForward()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin) == HIGH;
 8000a80:	2140      	movs	r1, #64	@ 0x40
 8000a82:	4806      	ldr	r0, [pc, #24]	@ (8000a9c <shouldGoForward+0x20>)
 8000a84:	f001 fb9e 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	bf0c      	ite	eq
 8000a92:	2301      	moveq	r3, #1
 8000a94:	2300      	movne	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40010c00 	.word	0x40010c00

08000aa0 <shouldGoBackward>:

bool shouldGoBackward()
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin) == HIGH;
 8000aa4:	2180      	movs	r1, #128	@ 0x80
 8000aa6:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <shouldGoBackward+0x20>)
 8000aa8:	f001 fb8c 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2301      	moveq	r3, #1
 8000ab8:	2300      	movne	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40010c00 	.word	0x40010c00

08000ac4 <displayWriteMode>:

void displayWriteMode(bool autoMode)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  char str[13];
  snprintf(str, sizeof(str), "Tryb: %s", autoMode ? "auto" : "manual");
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <displayWriteMode+0x14>
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <displayWriteMode+0x58>)
 8000ad6:	e000      	b.n	8000ada <displayWriteMode+0x16>
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <displayWriteMode+0x5c>)
 8000ada:	f107 0008 	add.w	r0, r7, #8
 8000ade:	4a11      	ldr	r2, [pc, #68]	@ (8000b24 <displayWriteMode+0x60>)
 8000ae0:	210d      	movs	r1, #13
 8000ae2:	f003 f8c5 	bl	8003c70 <sniprintf>
  ssd1306_FillRectangle(0, 21, 128, 28, Black);
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	231c      	movs	r3, #28
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	2115      	movs	r1, #21
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 fff9 	bl	8001ae8 <ssd1306_FillRectangle>
  ssd1306_SetCursor(0, 21);
 8000af6:	2115      	movs	r1, #21
 8000af8:	2000      	movs	r0, #0
 8000afa:	f000 ffdd 	bl	8001ab8 <ssd1306_SetCursor>
  ssd1306_WriteString(str, Font_7x10, White);
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <displayWriteMode+0x64>)
 8000b00:	f107 0008 	add.w	r0, r7, #8
 8000b04:	2201      	movs	r2, #1
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b0a:	f000 ffaf 	bl	8001a6c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000b0e:	f000 fea1 	bl	8001854 <ssd1306_UpdateScreen>
}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	08004610 	.word	0x08004610
 8000b20:	08004618 	.word	0x08004618
 8000b24:	08004620 	.word	0x08004620
 8000b28:	080053f8 	.word	0x080053f8

08000b2c <displayWriteDir>:
 * 3- do przodu
 * 4- do tylu
 * 0 - stop
 */
void displayWriteDir(Direction dirNum)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	@ 0x30
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  char str[17];
  char dir[10];
  switch (dirNum)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d831      	bhi.n	8000ba2 <displayWriteDir+0x76>
 8000b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b44 <displayWriteDir+0x18>)
 8000b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b44:	08000b55 	.word	0x08000b55
 8000b48:	08000b67 	.word	0x08000b67
 8000b4c:	08000b79 	.word	0x08000b79
 8000b50:	08000b91 	.word	0x08000b91
  {
  case RIGHT:
    strcpy(dir, "Prawo");
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	4a27      	ldr	r2, [pc, #156]	@ (8000bf8 <displayWriteDir+0xcc>)
 8000b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b5e:	6018      	str	r0, [r3, #0]
 8000b60:	3304      	adds	r3, #4
 8000b62:	8019      	strh	r1, [r3, #0]
    break;
 8000b64:	e026      	b.n	8000bb4 <displayWriteDir+0x88>
  case LEFT:
    strcpy(dir, "Lewo");
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	4a24      	ldr	r2, [pc, #144]	@ (8000bfc <displayWriteDir+0xd0>)
 8000b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b70:	6018      	str	r0, [r3, #0]
 8000b72:	3304      	adds	r3, #4
 8000b74:	7019      	strb	r1, [r3, #0]
    break;
 8000b76:	e01d      	b.n	8000bb4 <displayWriteDir+0x88>
  case FORWARD:
    strcpy(dir, "Wprost");
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	4a20      	ldr	r2, [pc, #128]	@ (8000c00 <displayWriteDir+0xd4>)
 8000b7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b82:	6018      	str	r0, [r3, #0]
 8000b84:	3304      	adds	r3, #4
 8000b86:	8019      	strh	r1, [r3, #0]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	0c0a      	lsrs	r2, r1, #16
 8000b8c:	701a      	strb	r2, [r3, #0]
    break;
 8000b8e:	e011      	b.n	8000bb4 <displayWriteDir+0x88>
  case BACKWARD:
    strcpy(dir, "Tylem");
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	4a1b      	ldr	r2, [pc, #108]	@ (8000c04 <displayWriteDir+0xd8>)
 8000b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b9a:	6018      	str	r0, [r3, #0]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	8019      	strh	r1, [r3, #0]
    break;
 8000ba0:	e008      	b.n	8000bb4 <displayWriteDir+0x88>
  default:
    strcpy(dir, "STOP");
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	4a18      	ldr	r2, [pc, #96]	@ (8000c08 <displayWriteDir+0xdc>)
 8000ba8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bac:	6018      	str	r0, [r3, #0]
 8000bae:	3304      	adds	r3, #4
 8000bb0:	7019      	strb	r1, [r3, #0]
    break;
 8000bb2:	bf00      	nop
  }
  snprintf(str, sizeof(str), "Dir:%s", dir);
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	f107 0014 	add.w	r0, r7, #20
 8000bbc:	4a13      	ldr	r2, [pc, #76]	@ (8000c0c <displayWriteDir+0xe0>)
 8000bbe:	2111      	movs	r1, #17
 8000bc0:	f003 f856 	bl	8003c70 <sniprintf>
  ssd1306_FillRectangle(0, 0, 70, 10, Black);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	230a      	movs	r3, #10
 8000bca:	2246      	movs	r2, #70	@ 0x46
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 ff8a 	bl	8001ae8 <ssd1306_FillRectangle>
  ssd1306_SetCursor(0, 0);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 ff6e 	bl	8001ab8 <ssd1306_SetCursor>
  ssd1306_WriteString(str, Font_7x10, White);
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <displayWriteDir+0xe4>)
 8000bde:	f107 0014 	add.w	r0, r7, #20
 8000be2:	2201      	movs	r2, #1
 8000be4:	9200      	str	r2, [sp, #0]
 8000be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000be8:	f000 ff40 	bl	8001a6c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000bec:	f000 fe32 	bl	8001854 <ssd1306_UpdateScreen>
}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	0800462c 	.word	0x0800462c
 8000bfc:	08004634 	.word	0x08004634
 8000c00:	0800463c 	.word	0x0800463c
 8000c04:	08004644 	.word	0x08004644
 8000c08:	0800464c 	.word	0x0800464c
 8000c0c:	08004654 	.word	0x08004654
 8000c10:	080053f8 	.word	0x080053f8

08000c14 <displayWriteDistance>:

void displayWriteDistance(float distance)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	@ 0x30
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	6078      	str	r0, [r7, #4]
  char str[20];
  int int_part = (int)distance;
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fd69 	bl	80006f4 <__aeabi_f2iz>
 8000c22:	4603      	mov	r3, r0
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  int decimal_part = (int)((distance - int_part) * 10);
 8000c26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c28:	f7ff fb4a 	bl	80002c0 <__aeabi_i2f>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff fa8f 	bl	8000154 <__aeabi_fsub>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4916      	ldr	r1, [pc, #88]	@ (8000c94 <displayWriteDistance+0x80>)
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fb94 	bl	8000368 <__aeabi_fmul>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fd56 	bl	80006f4 <__aeabi_f2iz>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	623b      	str	r3, [r7, #32]
  snprintf(str, sizeof(str), "Dst:%d.%01d cm", int_part, decimal_part);
 8000c4c:	f107 000c 	add.w	r0, r7, #12
 8000c50:	6a3b      	ldr	r3, [r7, #32]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c56:	4a10      	ldr	r2, [pc, #64]	@ (8000c98 <displayWriteDistance+0x84>)
 8000c58:	2114      	movs	r1, #20
 8000c5a:	f003 f809 	bl	8003c70 <sniprintf>
  ssd1306_FillRectangle(75, 0, 128, 10, Black);
 8000c5e:	2300      	movs	r3, #0
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	230a      	movs	r3, #10
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	2100      	movs	r1, #0
 8000c68:	204b      	movs	r0, #75	@ 0x4b
 8000c6a:	f000 ff3d 	bl	8001ae8 <ssd1306_FillRectangle>
  ssd1306_SetCursor(75, 0);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	204b      	movs	r0, #75	@ 0x4b
 8000c72:	f000 ff21 	bl	8001ab8 <ssd1306_SetCursor>
  ssd1306_WriteString(str, Font_6x8, White);
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <displayWriteDistance+0x88>)
 8000c78:	f107 000c 	add.w	r0, r7, #12
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	9200      	str	r2, [sp, #0]
 8000c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c82:	f000 fef3 	bl	8001a6c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000c86:	f000 fde5 	bl	8001854 <ssd1306_UpdateScreen>
}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	@ 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	41200000 	.word	0x41200000
 8000c98:	0800465c 	.word	0x0800465c
 8000c9c:	080053ec 	.word	0x080053ec

08000ca0 <toggleBoardLed>:
/**
 * Zmienia stan wbudowanego LED `state` na płytce
 */
void toggleBoardLed(bool state)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, !state);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f083 0301 	eor.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb8:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <toggleBoardLed+0x28>)
 8000cba:	f001 fa9a 	bl	80021f2 <HAL_GPIO_WritePin>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40011000 	.word	0x40011000

08000ccc <readLineSensors>:

uint8_t leftOnLine, centerOnLine, rightOnLine;

/** Aktualizuje zmienne o wartości czy czujnik wykrył linię */
void readLineSensors()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  leftOnLine = HAL_GPIO_ReadPin(LINE_LEFT_GPIO_Port, LINE_LEFT_Pin) == HIGH;
 8000cd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cd4:	4817      	ldr	r0, [pc, #92]	@ (8000d34 <readLineSensors+0x68>)
 8000cd6:	f001 fa75 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	2301      	movs	r3, #1
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	bf0c      	ite	eq
 8000ce4:	2301      	moveq	r3, #1
 8000ce6:	2300      	movne	r3, #0
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <readLineSensors+0x6c>)
 8000cee:	701a      	strb	r2, [r3, #0]
  centerOnLine = HAL_GPIO_ReadPin(LINE_CENTER_GPIO_Port, LINE_CENTER_Pin) == HIGH;
 8000cf0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cf4:	480f      	ldr	r0, [pc, #60]	@ (8000d34 <readLineSensors+0x68>)
 8000cf6:	f001 fa65 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	2301      	movs	r3, #1
 8000d00:	429a      	cmp	r2, r3
 8000d02:	bf0c      	ite	eq
 8000d04:	2301      	moveq	r3, #1
 8000d06:	2300      	movne	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <readLineSensors+0x70>)
 8000d0e:	701a      	strb	r2, [r3, #0]
  rightOnLine = HAL_GPIO_ReadPin(LINE_RIGHT_GPIO_Port, LINE_RIGHT_Pin) == HIGH;
 8000d10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d14:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <readLineSensors+0x68>)
 8000d16:	f001 fa55 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2301      	movs	r3, #1
 8000d20:	429a      	cmp	r2, r3
 8000d22:	bf0c      	ite	eq
 8000d24:	2301      	moveq	r3, #1
 8000d26:	2300      	movne	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <readLineSensors+0x74>)
 8000d2e:	701a      	strb	r2, [r3, #0]
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40010c00 	.word	0x40010c00
 8000d38:	20000120 	.word	0x20000120
 8000d3c:	20000121 	.word	0x20000121
 8000d40:	20000122 	.word	0x20000122

08000d44 <runAutoMode>:

static Direction lastMove = FORWARD;

void runAutoMode()
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  readLineSensors();
 8000d48:	f7ff ffc0 	bl	8000ccc <readLineSensors>

  if (centerOnLine)
 8000d4c:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <runAutoMode+0x90>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d008      	beq.n	8000d66 <runAutoMode+0x22>
  {
    goForward();
 8000d54:	f7ff fdd2 	bl	80008fc <goForward>
    lastMove = FORWARD;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <runAutoMode+0x94>)
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	701a      	strb	r2, [r3, #0]
    displayWriteDir(FORWARD);
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f7ff fee4 	bl	8000b2c <displayWriteDir>
    default:
      break;
    }
    displayWriteDir(lastMove);
  }
}
 8000d64:	e033      	b.n	8000dce <runAutoMode+0x8a>
  else if (leftOnLine)
 8000d66:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <runAutoMode+0x98>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d008      	beq.n	8000d80 <runAutoMode+0x3c>
    turnLeft();
 8000d6e:	f7ff fda8 	bl	80008c2 <turnLeft>
    lastMove = LEFT;
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <runAutoMode+0x94>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	701a      	strb	r2, [r3, #0]
    displayWriteDir(LEFT);
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f7ff fed7 	bl	8000b2c <displayWriteDir>
}
 8000d7e:	e026      	b.n	8000dce <runAutoMode+0x8a>
  else if (rightOnLine)
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <runAutoMode+0x9c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d008      	beq.n	8000d9a <runAutoMode+0x56>
    turnRight();
 8000d88:	f7ff fda9 	bl	80008de <turnRight>
    lastMove = RIGHT;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <runAutoMode+0x94>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
    displayWriteDir(RIGHT);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f7ff feca 	bl	8000b2c <displayWriteDir>
}
 8000d98:	e019      	b.n	8000dce <runAutoMode+0x8a>
    switch (lastMove)
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <runAutoMode+0x94>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d00c      	beq.n	8000dbc <runAutoMode+0x78>
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	dc0d      	bgt.n	8000dc2 <runAutoMode+0x7e>
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d002      	beq.n	8000db0 <runAutoMode+0x6c>
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d003      	beq.n	8000db6 <runAutoMode+0x72>
      break;
 8000dae:	e008      	b.n	8000dc2 <runAutoMode+0x7e>
      turnRight();
 8000db0:	f7ff fd95 	bl	80008de <turnRight>
      break;
 8000db4:	e006      	b.n	8000dc4 <runAutoMode+0x80>
      turnLeft();
 8000db6:	f7ff fd84 	bl	80008c2 <turnLeft>
      break;
 8000dba:	e003      	b.n	8000dc4 <runAutoMode+0x80>
      goForward();
 8000dbc:	f7ff fd9e 	bl	80008fc <goForward>
      break;
 8000dc0:	e000      	b.n	8000dc4 <runAutoMode+0x80>
      break;
 8000dc2:	bf00      	nop
    displayWriteDir(lastMove);
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <runAutoMode+0x94>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff feaf 	bl	8000b2c <displayWriteDir>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000121 	.word	0x20000121
 8000dd8:	20000004 	.word	0x20000004
 8000ddc:	20000120 	.word	0x20000120
 8000de0:	20000122 	.word	0x20000122

08000de4 <handleDistance>:

bool handleDistance()
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
  uint32_t current_time = HAL_GetTick();
 8000dea:	f000 ff55 	bl	8001c98 <HAL_GetTick>
 8000dee:	60b8      	str	r0, [r7, #8]

  bool obstacleDetected = false;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  // aktualizacja wyświetlacza co 0.45s o dane z sensora odległości
  if ((current_time - last_update_time) >= 450)
 8000df4:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <handleDistance+0x54>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000e00:	d314      	bcc.n	8000e2c <handleDistance+0x48>
  {
    last_update_time = current_time;
 8000e02:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <handleDistance+0x54>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	6013      	str	r3, [r2, #0]
    float dist = read_distance_cm();
 8000e08:	f7ff fda0 	bl	800094c <read_distance_cm>
 8000e0c:	6078      	str	r0, [r7, #4]
    displayWriteDistance(dist);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff00 	bl	8000c14 <displayWriteDistance>
    obstacleDetected = (dist <= 50);
 8000e14:	2301      	movs	r3, #1
 8000e16:	461c      	mov	r4, r3
 8000e18:	4908      	ldr	r1, [pc, #32]	@ (8000e3c <handleDistance+0x58>)
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fc4c 	bl	80006b8 <__aeabi_fcmple>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d101      	bne.n	8000e2a <handleDistance+0x46>
 8000e26:	2300      	movs	r3, #0
 8000e28:	461c      	mov	r4, r3
 8000e2a:	73fc      	strb	r4, [r7, #15]
  }

  return obstacleDetected;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000011c 	.word	0x2000011c
 8000e3c:	42480000 	.word	0x42480000

08000e40 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	@ 0x30
 8000e44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e46:	f000 fecf 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4a:	f000 f947 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4e:	f000 fa3f 	bl	80012d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e52:	f000 f9ad 	bl	80011b0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000e56:	f000 f97d 	bl	8001154 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e5a:	4b97      	ldr	r3, [pc, #604]	@ (80010b8 <main+0x278>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e66:	61fb      	str	r3, [r7, #28]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	4a91      	ldr	r2, [pc, #580]	@ (80010b8 <main+0x278>)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	6053      	str	r3, [r2, #4]
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000e76:	4b90      	ldr	r3, [pc, #576]	@ (80010b8 <main+0x278>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	4a8a      	ldr	r2, [pc, #552]	@ (80010b8 <main+0x278>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	6053      	str	r3, [r2, #4]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Sterownik port "EN_A"
 8000e92:	2100      	movs	r1, #0
 8000e94:	4889      	ldr	r0, [pc, #548]	@ (80010bc <main+0x27c>)
 8000e96:	f002 fabd 	bl	8003414 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Sterownik port "EN_B"
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	4887      	ldr	r0, [pc, #540]	@ (80010bc <main+0x27c>)
 8000e9e:	f002 fab9 	bl	8003414 <HAL_TIM_PWM_Start>
  toggleBoardLed(false);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fefc 	bl	8000ca0 <toggleBoardLed>
  ssd1306_Init();
 8000ea8:	f000 fc52 	bl	8001750 <ssd1306_Init>

  displayWriteMode(false);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fe09 	bl	8000ac4 <displayWriteMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool prevForward = false;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bool prevBackward = false;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  bool prevLeft = false;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  bool prevRight = false;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

  uint8_t buttonPrevState = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t autoMode = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  DWT_Init();
 8000ed6:	f7ff fc53 	bl	8000780 <DWT_Init>

  bool obstacleDetected = false;
 8000eda:	2300      	movs	r3, #0
 8000edc:	75fb      	strb	r3, [r7, #23]

  while (1)
  {
    uint8_t button_current = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);
 8000ede:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ee2:	4877      	ldr	r0, [pc, #476]	@ (80010c0 <main+0x280>)
 8000ee4:	f001 f96e 	bl	80021c4 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	75bb      	strb	r3, [r7, #22]

    if (buttonPrevState == 0 && button_current == 1)
 8000eec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d115      	bne.n	8000f20 <main+0xe0>
 8000ef4:	7dbb      	ldrb	r3, [r7, #22]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d112      	bne.n	8000f20 <main+0xe0>
    {
      autoMode = !autoMode;
 8000efa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf0c      	ite	eq
 8000f02:	2301      	moveq	r3, #1
 8000f04:	2300      	movne	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      displayWriteMode(autoMode);
 8000f0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fdd2 	bl	8000ac4 <displayWriteMode>
    }

    buttonPrevState = button_current;
 8000f20:	7dbb      	ldrb	r3, [r7, #22]
 8000f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    bool currentForward = shouldGoForward();
 8000f26:	f7ff fda9 	bl	8000a7c <shouldGoForward>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	757b      	strb	r3, [r7, #21]

    obstacleDetected = handleDistance();
 8000f2e:	f7ff ff59 	bl	8000de4 <handleDistance>
 8000f32:	4603      	mov	r3, r0
 8000f34:	75fb      	strb	r3, [r7, #23]

    if (autoMode)
 8000f36:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d032      	beq.n	8000fa4 <main+0x164>
    {
      currentSpeed = BASE_SPEED;
 8000f3e:	4b61      	ldr	r3, [pc, #388]	@ (80010c4 <main+0x284>)
 8000f40:	2232      	movs	r2, #50	@ 0x32
 8000f42:	601a      	str	r2, [r3, #0]
      runAutoMode();
 8000f44:	f7ff fefe 	bl	8000d44 <runAutoMode>

      char str[16];
      snprintf(str, sizeof(str), "L%d C%d R%d", leftOnLine, centerOnLine, rightOnLine);
 8000f48:	4b5f      	ldr	r3, [pc, #380]	@ (80010c8 <main+0x288>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80010cc <main+0x28c>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b5e      	ldr	r3, [pc, #376]	@ (80010d0 <main+0x290>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4638      	mov	r0, r7
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	9200      	str	r2, [sp, #0]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4a5c      	ldr	r2, [pc, #368]	@ (80010d4 <main+0x294>)
 8000f62:	2110      	movs	r1, #16
 8000f64:	f002 fe84 	bl	8003c70 <sniprintf>
      ssd1306_FillRectangle(90, 21, 128, 28, Black);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	231c      	movs	r3, #28
 8000f6e:	2280      	movs	r2, #128	@ 0x80
 8000f70:	2115      	movs	r1, #21
 8000f72:	205a      	movs	r0, #90	@ 0x5a
 8000f74:	f000 fdb8 	bl	8001ae8 <ssd1306_FillRectangle>
      ssd1306_SetCursor(80, 21);
 8000f78:	2115      	movs	r1, #21
 8000f7a:	2050      	movs	r0, #80	@ 0x50
 8000f7c:	f000 fd9c 	bl	8001ab8 <ssd1306_SetCursor>
      ssd1306_WriteString(str, Font_6x8, White);
 8000f80:	4b55      	ldr	r3, [pc, #340]	@ (80010d8 <main+0x298>)
 8000f82:	4638      	mov	r0, r7
 8000f84:	2201      	movs	r2, #1
 8000f86:	9200      	str	r2, [sp, #0]
 8000f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f8a:	f000 fd6f 	bl	8001a6c <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8000f8e:	f000 fc61 	bl	8001854 <ssd1306_UpdateScreen>

      HAL_Delay(50);
 8000f92:	2032      	movs	r0, #50	@ 0x32
 8000f94:	f000 fe8a 	bl	8001cac <HAL_Delay>
      stop();
 8000f98:	f7ff fc7c 	bl	8000894 <stop>
      HAL_Delay(100);
 8000f9c:	2064      	movs	r0, #100	@ 0x64
 8000f9e:	f000 fe85 	bl	8001cac <HAL_Delay>
      continue;
 8000fa2:	e087      	b.n	80010b4 <main+0x274>
    }
    currentSpeed = 65;
 8000fa4:	4b47      	ldr	r3, [pc, #284]	@ (80010c4 <main+0x284>)
 8000fa6:	2241      	movs	r2, #65	@ 0x41
 8000fa8:	601a      	str	r2, [r3, #0]

    bool currentBackward = shouldGoBackward();
 8000faa:	f7ff fd79 	bl	8000aa0 <shouldGoBackward>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	753b      	strb	r3, [r7, #20]
    bool currentLeft = shouldGoLeft();
 8000fb2:	f7ff fd3f 	bl	8000a34 <shouldGoLeft>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	74fb      	strb	r3, [r7, #19]
    bool currentRight = shouldGoRight();
 8000fba:	f7ff fd4d 	bl	8000a58 <shouldGoRight>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	74bb      	strb	r3, [r7, #18]
    if (
 8000fc2:	7d7b      	ldrb	r3, [r7, #21]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d108      	bne.n	8000fda <main+0x19a>
        currentForward || currentBackward || currentLeft || currentRight)
 8000fc8:	7d3b      	ldrb	r3, [r7, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d105      	bne.n	8000fda <main+0x19a>
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <main+0x19a>
 8000fd4:	7cbb      	ldrb	r3, [r7, #18]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <main+0x1a0>
    {
      toggleBoardLed(true);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff fe60 	bl	8000ca0 <toggleBoardLed>
    }

    if (currentForward)
 8000fe0:	7d7b      	ldrb	r3, [r7, #21]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00c      	beq.n	8001000 <main+0x1c0>
    {
      goForward();
 8000fe6:	f7ff fc89 	bl	80008fc <goForward>
      if (!prevForward)
 8000fea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fee:	f083 0301 	eor.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d051      	beq.n	800109c <main+0x25c>
      {
        displayWriteDir(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff fd97 	bl	8000b2c <displayWriteDir>
 8000ffe:	e04d      	b.n	800109c <main+0x25c>
      }
    }
    else if (currentBackward)
 8001000:	7d3b      	ldrb	r3, [r7, #20]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00c      	beq.n	8001020 <main+0x1e0>
    {
      goBackward();
 8001006:	f7ff fc8d 	bl	8000924 <goBackward>
      if (!prevBackward)
 800100a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800100e:	f083 0301 	eor.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d041      	beq.n	800109c <main+0x25c>
      {
        displayWriteDir(2);
 8001018:	2002      	movs	r0, #2
 800101a:	f7ff fd87 	bl	8000b2c <displayWriteDir>
 800101e:	e03d      	b.n	800109c <main+0x25c>
      }
    }
    else if (currentLeft && !obstacleDetected)
 8001020:	7cfb      	ldrb	r3, [r7, #19]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d012      	beq.n	800104c <main+0x20c>
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	f083 0301 	eor.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00c      	beq.n	800104c <main+0x20c>
    {
      turnLeft();
 8001032:	f7ff fc46 	bl	80008c2 <turnLeft>
      if (!prevLeft)
 8001036:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800103a:	f083 0301 	eor.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d02b      	beq.n	800109c <main+0x25c>
      {
        displayWriteDir(3);
 8001044:	2003      	movs	r0, #3
 8001046:	f7ff fd71 	bl	8000b2c <displayWriteDir>
      if (!prevLeft)
 800104a:	e027      	b.n	800109c <main+0x25c>
      }
    }
    else if (currentRight)
 800104c:	7cbb      	ldrb	r3, [r7, #18]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00c      	beq.n	800106c <main+0x22c>
    {
      turnRight();
 8001052:	f7ff fc44 	bl	80008de <turnRight>
      if (!prevRight)
 8001056:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800105a:	f083 0301 	eor.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01b      	beq.n	800109c <main+0x25c>
      {
        displayWriteDir(4);
 8001064:	2004      	movs	r0, #4
 8001066:	f7ff fd61 	bl	8000b2c <displayWriteDir>
 800106a:	e017      	b.n	800109c <main+0x25c>
      }
    }
    else
    {
      toggleBoardLed(false);
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff fe17 	bl	8000ca0 <toggleBoardLed>
      resetDirection();
 8001072:	f7ff fc1d 	bl	80008b0 <resetDirection>

      if (prevBackward || prevForward || prevLeft || prevRight)
 8001076:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10b      	bne.n	8001096 <main+0x256>
 800107e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001082:	2b00      	cmp	r3, #0
 8001084:	d107      	bne.n	8001096 <main+0x256>
 8001086:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800108a:	2b00      	cmp	r3, #0
 800108c:	d103      	bne.n	8001096 <main+0x256>
 800108e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <main+0x25c>
      {
        displayWriteDir(0);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff fd48 	bl	8000b2c <displayWriteDir>

    // if (currentLeft || currentRight || currentForward || currentBackward) {
    //   HAL_Delay(150);
    // }

    prevForward = currentForward;
 800109c:	7d7b      	ldrb	r3, [r7, #21]
 800109e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    prevBackward = currentBackward;
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    prevLeft = currentLeft;
 80010a8:	7cfb      	ldrb	r3, [r7, #19]
 80010aa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    prevRight = currentRight;
 80010ae:	7cbb      	ldrb	r3, [r7, #18]
 80010b0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  {
 80010b4:	e713      	b.n	8000ede <main+0x9e>
 80010b6:	bf00      	nop
 80010b8:	40010000 	.word	0x40010000
 80010bc:	200000d4 	.word	0x200000d4
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000120 	.word	0x20000120
 80010cc:	20000121 	.word	0x20000121
 80010d0:	20000122 	.word	0x20000122
 80010d4:	0800466c 	.word	0x0800466c
 80010d8:	080053ec 	.word	0x080053ec

080010dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b090      	sub	sp, #64	@ 0x40
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	2228      	movs	r2, #40	@ 0x28
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fdf6 	bl	8003cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001102:	2301      	movs	r3, #1
 8001104:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001106:	2310      	movs	r3, #16
 8001108:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110a:	2300      	movs	r3, #0
 800110c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fd32 	bl	8002b7c <HAL_RCC_OscConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800111e:	f000 f977 	bl	8001410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001122:	230f      	movs	r3, #15
 8001124:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f001 ffa0 	bl	8003080 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001146:	f000 f963 	bl	8001410 <Error_Handler>
  }
}
 800114a:	bf00      	nop
 800114c:	3740      	adds	r7, #64	@ 0x40
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <MX_I2C1_Init+0x50>)
 800115a:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <MX_I2C1_Init+0x54>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001160:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <MX_I2C1_Init+0x58>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001172:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001176:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <MX_I2C1_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001192:	f001 f847 	bl	8002224 <HAL_I2C_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800119c:	f000 f938 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000080 	.word	0x20000080
 80011a8:	40005400 	.word	0x40005400
 80011ac:	000186a0 	.word	0x000186a0

080011b0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b092      	sub	sp, #72	@ 0x48
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2220      	movs	r2, #32
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fd7e 	bl	8003cdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011e0:	4b39      	ldr	r3, [pc, #228]	@ (80012c8 <MX_TIM1_Init+0x118>)
 80011e2:	4a3a      	ldr	r2, [pc, #232]	@ (80012cc <MX_TIM1_Init+0x11c>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 700;
 80011e6:	4b38      	ldr	r3, [pc, #224]	@ (80012c8 <MX_TIM1_Init+0x118>)
 80011e8:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80011ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <MX_TIM1_Init+0x118>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <MX_TIM1_Init+0x118>)
 80011f6:	2263      	movs	r2, #99	@ 0x63
 80011f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <MX_TIM1_Init+0x118>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <MX_TIM1_Init+0x118>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <MX_TIM1_Init+0x118>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800120c:	482e      	ldr	r0, [pc, #184]	@ (80012c8 <MX_TIM1_Init+0x118>)
 800120e:	f002 f8b1 	bl	8003374 <HAL_TIM_PWM_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001218:	f000 f8fa 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001224:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001228:	4619      	mov	r1, r3
 800122a:	4827      	ldr	r0, [pc, #156]	@ (80012c8 <MX_TIM1_Init+0x118>)
 800122c:	f002 fc70 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001236:	f000 f8eb 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123a:	2360      	movs	r3, #96	@ 0x60
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125a:	2200      	movs	r2, #0
 800125c:	4619      	mov	r1, r3
 800125e:	481a      	ldr	r0, [pc, #104]	@ (80012c8 <MX_TIM1_Init+0x118>)
 8001260:	f002 f97a 	bl	8003558 <HAL_TIM_PWM_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800126a:	f000 f8d1 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800126e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001272:	2204      	movs	r2, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4814      	ldr	r0, [pc, #80]	@ (80012c8 <MX_TIM1_Init+0x118>)
 8001278:	f002 f96e 	bl	8003558 <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001282:	f000 f8c5 	bl	8001410 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800129a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800129e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	@ (80012c8 <MX_TIM1_Init+0x118>)
 80012aa:	f002 fc8f 	bl	8003bcc <HAL_TIMEx_ConfigBreakDeadTime>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80012b4:	f000 f8ac 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012b8:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <MX_TIM1_Init+0x118>)
 80012ba:	f000 f94f 	bl	800155c <HAL_TIM_MspPostInit>
}
 80012be:	bf00      	nop
 80012c0:	3748      	adds	r7, #72	@ 0x48
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000d4 	.word	0x200000d4
 80012cc:	40012c00 	.word	0x40012c00

080012d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e4:	4b46      	ldr	r3, [pc, #280]	@ (8001400 <MX_GPIO_Init+0x130>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a45      	ldr	r2, [pc, #276]	@ (8001400 <MX_GPIO_Init+0x130>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b43      	ldr	r3, [pc, #268]	@ (8001400 <MX_GPIO_Init+0x130>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	4b40      	ldr	r3, [pc, #256]	@ (8001400 <MX_GPIO_Init+0x130>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a3f      	ldr	r2, [pc, #252]	@ (8001400 <MX_GPIO_Init+0x130>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b3d      	ldr	r3, [pc, #244]	@ (8001400 <MX_GPIO_Init+0x130>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b3a      	ldr	r3, [pc, #232]	@ (8001400 <MX_GPIO_Init+0x130>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a39      	ldr	r2, [pc, #228]	@ (8001400 <MX_GPIO_Init+0x130>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b37      	ldr	r3, [pc, #220]	@ (8001400 <MX_GPIO_Init+0x130>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001332:	4834      	ldr	r0, [pc, #208]	@ (8001404 <MX_GPIO_Init+0x134>)
 8001334:	f000 ff5d 	bl	80021f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin | IN2_Pin | IN4_Pin | IN3_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f640 4103 	movw	r1, #3075	@ 0xc03
 800133e:	4832      	ldr	r0, [pc, #200]	@ (8001408 <MX_GPIO_Init+0x138>)
 8001340:	f000 ff57 	bl	80021f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800134a:	4830      	ldr	r0, [pc, #192]	@ (800140c <MX_GPIO_Init+0x13c>)
 800134c:	f000 ff51 	bl	80021f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	4826      	ldr	r0, [pc, #152]	@ (8001404 <MX_GPIO_Init+0x134>)
 800136a:	f000 fda7 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = IN1_Pin | IN2_Pin | IN4_Pin | IN3_Pin;
 800136e:	f640 4303 	movw	r3, #3075	@ 0xc03
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2302      	movs	r3, #2
 800137e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	4619      	mov	r1, r3
 8001386:	4820      	ldr	r0, [pc, #128]	@ (8001408 <MX_GPIO_Init+0x138>)
 8001388:	f000 fd98 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800138c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	4819      	ldr	r0, [pc, #100]	@ (8001408 <MX_GPIO_Init+0x138>)
 80013a2:	f000 fd8b 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_RIGHT_Pin LINE_CENTER_Pin LINE_LEFT_Pin LEFT_Pin
                           RIGHT_Pin FORWARD_Pin BACKWARD_Pin */
  GPIO_InitStruct.Pin = LINE_RIGHT_Pin | LINE_CENTER_Pin | LINE_LEFT_Pin | LEFT_Pin | RIGHT_Pin | FORWARD_Pin | BACKWARD_Pin;
 80013a6:	f24e 03d8 	movw	r3, #57560	@ 0xe0d8
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4813      	ldr	r0, [pc, #76]	@ (8001408 <MX_GPIO_Init+0x138>)
 80013bc:	f000 fd7e 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80013c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_GPIO_Init+0x13c>)
 80013d6:	f000 fd71 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80013da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	@ (800140c <MX_GPIO_Init+0x13c>)
 80013f4:	f000 fd62 	bl	8001ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	40011000 	.word	0x40011000
 8001408:	40010c00 	.word	0x40010c00
 800140c:	40010800 	.word	0x40010800

08001410 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <Error_Handler+0x8>

0800141c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_MspInit+0x5c>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <HAL_MspInit+0x5c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_MspInit+0x5c>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_MspInit+0x5c>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_MspInit+0x5c>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_MspInit+0x5c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_MspInit+0x60>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_MspInit+0x60>)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000

08001480 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <HAL_I2C_MspInit+0x90>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d132      	bne.n	8001506 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <HAL_I2C_MspInit+0x94>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001514 <HAL_I2C_MspInit+0x94>)
 80014a6:	f043 0308 	orr.w	r3, r3, #8
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <HAL_I2C_MspInit+0x94>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014be:	2312      	movs	r3, #18
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4812      	ldr	r0, [pc, #72]	@ (8001518 <HAL_I2C_MspInit+0x98>)
 80014ce:	f000 fcf5 	bl	8001ebc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_I2C_MspInit+0x9c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e8:	4a0c      	ldr	r2, [pc, #48]	@ (800151c <HAL_I2C_MspInit+0x9c>)
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <HAL_I2C_MspInit+0x94>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <HAL_I2C_MspInit+0x94>)
 80014f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_I2C_MspInit+0x94>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	@ 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40005400 	.word	0x40005400
 8001514:	40021000 	.word	0x40021000
 8001518:	40010c00 	.word	0x40010c00
 800151c:	40010000 	.word	0x40010000

08001520 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <HAL_TIM_PWM_MspInit+0x34>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d10b      	bne.n	800154a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <HAL_TIM_PWM_MspInit+0x38>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <HAL_TIM_PWM_MspInit+0x38>)
 8001538:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800153c:	6193      	str	r3, [r2, #24]
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_TIM_PWM_MspInit+0x38>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	40012c00 	.word	0x40012c00
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a10      	ldr	r2, [pc, #64]	@ (80015b8 <HAL_TIM_MspPostInit+0x5c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d118      	bne.n	80015ae <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <HAL_TIM_MspPostInit+0x60>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a0e      	ldr	r2, [pc, #56]	@ (80015bc <HAL_TIM_MspPostInit+0x60>)
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <HAL_TIM_MspPostInit+0x60>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_B_Pin|EN_A_Pin;
 8001594:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <HAL_TIM_MspPostInit+0x64>)
 80015aa:	f000 fc87 	bl	8001ebc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40012c00 	.word	0x40012c00
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010800 	.word	0x40010800

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <NMI_Handler+0x4>

080015cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <MemManage_Handler+0x4>

080015dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 fb2e 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f002 fb4e 	bl	8003cec <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20005000 	.word	0x20005000
 800167c:	00000400 	.word	0x00000400
 8001680:	20000124 	.word	0x20000124
 8001684:	20000480 	.word	0x20000480

08001688 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001694:	f7ff fff8 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001698:	480b      	ldr	r0, [pc, #44]	@ (80016c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800169a:	490c      	ldr	r1, [pc, #48]	@ (80016cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800169c:	4a0c      	ldr	r2, [pc, #48]	@ (80016d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a09      	ldr	r2, [pc, #36]	@ (80016d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016b0:	4c09      	ldr	r4, [pc, #36]	@ (80016d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016be:	f002 fb1b 	bl	8003cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c2:	f7ff fbbd 	bl	8000e40 <main>
  bx lr
 80016c6:	4770      	bx	lr
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80016d0:	08005454 	.word	0x08005454
  ldr r2, =_sbss
 80016d4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80016d8:	2000047c 	.word	0x2000047c

080016dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC1_2_IRQHandler>

080016de <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
	...

080016ec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af04      	add	r7, sp, #16
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2301      	movs	r3, #1
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2301      	movs	r3, #1
 8001706:	2200      	movs	r2, #0
 8001708:	2178      	movs	r1, #120	@ 0x78
 800170a:	4803      	ldr	r0, [pc, #12]	@ (8001718 <ssd1306_WriteCommand+0x2c>)
 800170c:	f000 fece 	bl	80024ac <HAL_I2C_Mem_Write>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000080 	.word	0x20000080

0800171c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af04      	add	r7, sp, #16
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	f04f 32ff 	mov.w	r2, #4294967295
 800172e:	9202      	str	r2, [sp, #8]
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2301      	movs	r3, #1
 8001738:	2240      	movs	r2, #64	@ 0x40
 800173a:	2178      	movs	r1, #120	@ 0x78
 800173c:	4803      	ldr	r0, [pc, #12]	@ (800174c <ssd1306_WriteData+0x30>)
 800173e:	f000 feb5 	bl	80024ac <HAL_I2C_Mem_Write>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000080 	.word	0x20000080

08001750 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001754:	f7ff ffc3 	bl	80016de <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001758:	2064      	movs	r0, #100	@ 0x64
 800175a:	f000 faa7 	bl	8001cac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800175e:	2000      	movs	r0, #0
 8001760:	f000 fa24 	bl	8001bac <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001764:	2020      	movs	r0, #32
 8001766:	f7ff ffc1 	bl	80016ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff ffbe 	bl	80016ec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001770:	20b0      	movs	r0, #176	@ 0xb0
 8001772:	f7ff ffbb 	bl	80016ec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001776:	20c8      	movs	r0, #200	@ 0xc8
 8001778:	f7ff ffb8 	bl	80016ec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff ffb5 	bl	80016ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001782:	2010      	movs	r0, #16
 8001784:	f7ff ffb2 	bl	80016ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001788:	2040      	movs	r0, #64	@ 0x40
 800178a:	f7ff ffaf 	bl	80016ec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800178e:	20ff      	movs	r0, #255	@ 0xff
 8001790:	f000 f9f8 	bl	8001b84 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001794:	20a1      	movs	r0, #161	@ 0xa1
 8001796:	f7ff ffa9 	bl	80016ec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800179a:	20a6      	movs	r0, #166	@ 0xa6
 800179c:	f7ff ffa6 	bl	80016ec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80017a0:	20a8      	movs	r0, #168	@ 0xa8
 80017a2:	f7ff ffa3 	bl	80016ec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80017a6:	201f      	movs	r0, #31
 80017a8:	f7ff ffa0 	bl	80016ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017ac:	20a4      	movs	r0, #164	@ 0xa4
 80017ae:	f7ff ff9d 	bl	80016ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80017b2:	20d3      	movs	r0, #211	@ 0xd3
 80017b4:	f7ff ff9a 	bl	80016ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff ff97 	bl	80016ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80017be:	20d5      	movs	r0, #213	@ 0xd5
 80017c0:	f7ff ff94 	bl	80016ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80017c4:	20f0      	movs	r0, #240	@ 0xf0
 80017c6:	f7ff ff91 	bl	80016ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80017ca:	20d9      	movs	r0, #217	@ 0xd9
 80017cc:	f7ff ff8e 	bl	80016ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80017d0:	2022      	movs	r0, #34	@ 0x22
 80017d2:	f7ff ff8b 	bl	80016ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80017d6:	20da      	movs	r0, #218	@ 0xda
 80017d8:	f7ff ff88 	bl	80016ec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80017dc:	2002      	movs	r0, #2
 80017de:	f7ff ff85 	bl	80016ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80017e2:	20db      	movs	r0, #219	@ 0xdb
 80017e4:	f7ff ff82 	bl	80016ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80017e8:	2020      	movs	r0, #32
 80017ea:	f7ff ff7f 	bl	80016ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80017ee:	208d      	movs	r0, #141	@ 0x8d
 80017f0:	f7ff ff7c 	bl	80016ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80017f4:	2014      	movs	r0, #20
 80017f6:	f7ff ff79 	bl	80016ec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80017fa:	2001      	movs	r0, #1
 80017fc:	f000 f9d6 	bl	8001bac <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001800:	2000      	movs	r0, #0
 8001802:	f000 f80f 	bl	8001824 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001806:	f000 f825 	bl	8001854 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800180a:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <ssd1306_Init+0xd0>)
 800180c:	2200      	movs	r2, #0
 800180e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <ssd1306_Init+0xd0>)
 8001812:	2200      	movs	r2, #0
 8001814:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001816:	4b02      	ldr	r3, [pc, #8]	@ (8001820 <ssd1306_Init+0xd0>)
 8001818:	2201      	movs	r2, #1
 800181a:	711a      	strb	r2, [r3, #4]
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000328 	.word	0x20000328

08001824 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <ssd1306_Fill+0x14>
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <ssd1306_Fill+0x16>
 8001838:	23ff      	movs	r3, #255	@ 0xff
 800183a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800183e:	4619      	mov	r1, r3
 8001840:	4803      	ldr	r0, [pc, #12]	@ (8001850 <ssd1306_Fill+0x2c>)
 8001842:	f002 fa4b 	bl	8003cdc <memset>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000128 	.word	0x20000128

08001854 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800185a:	2300      	movs	r3, #0
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	e016      	b.n	800188e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	3b50      	subs	r3, #80	@ 0x50
 8001864:	b2db      	uxtb	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff40 	bl	80016ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff ff3d 	bl	80016ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001872:	2010      	movs	r0, #16
 8001874:	f7ff ff3a 	bl	80016ec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	01db      	lsls	r3, r3, #7
 800187c:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <ssd1306_UpdateScreen+0x4c>)
 800187e:	4413      	add	r3, r2
 8001880:	2180      	movs	r1, #128	@ 0x80
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff4a 	bl	800171c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	3301      	adds	r3, #1
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d9e5      	bls.n	8001860 <ssd1306_UpdateScreen+0xc>
    }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000128 	.word	0x20000128

080018a4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	460b      	mov	r3, r1
 80018b0:	71bb      	strb	r3, [r7, #6]
 80018b2:	4613      	mov	r3, r2
 80018b4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db3d      	blt.n	800193a <ssd1306_DrawPixel+0x96>
 80018be:	79bb      	ldrb	r3, [r7, #6]
 80018c0:	2b1f      	cmp	r3, #31
 80018c2:	d83a      	bhi.n	800193a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80018c4:	797b      	ldrb	r3, [r7, #5]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d11a      	bne.n	8001900 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018ca:	79fa      	ldrb	r2, [r7, #7]
 80018cc:	79bb      	ldrb	r3, [r7, #6]
 80018ce:	08db      	lsrs	r3, r3, #3
 80018d0:	b2d8      	uxtb	r0, r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	01db      	lsls	r3, r3, #7
 80018d6:	4413      	add	r3, r2
 80018d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001944 <ssd1306_DrawPixel+0xa0>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	b25a      	sxtb	r2, r3
 80018de:	79bb      	ldrb	r3, [r7, #6]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b259      	sxtb	r1, r3
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	4603      	mov	r3, r0
 80018f4:	01db      	lsls	r3, r3, #7
 80018f6:	4413      	add	r3, r2
 80018f8:	b2c9      	uxtb	r1, r1
 80018fa:	4a12      	ldr	r2, [pc, #72]	@ (8001944 <ssd1306_DrawPixel+0xa0>)
 80018fc:	54d1      	strb	r1, [r2, r3]
 80018fe:	e01d      	b.n	800193c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001900:	79fa      	ldrb	r2, [r7, #7]
 8001902:	79bb      	ldrb	r3, [r7, #6]
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	b2d8      	uxtb	r0, r3
 8001908:	4603      	mov	r3, r0
 800190a:	01db      	lsls	r3, r3, #7
 800190c:	4413      	add	r3, r2
 800190e:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <ssd1306_DrawPixel+0xa0>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	b25a      	sxtb	r2, r3
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	2101      	movs	r1, #1
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	b25b      	sxtb	r3, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	b25b      	sxtb	r3, r3
 8001926:	4013      	ands	r3, r2
 8001928:	b259      	sxtb	r1, r3
 800192a:	79fa      	ldrb	r2, [r7, #7]
 800192c:	4603      	mov	r3, r0
 800192e:	01db      	lsls	r3, r3, #7
 8001930:	4413      	add	r3, r2
 8001932:	b2c9      	uxtb	r1, r1
 8001934:	4a03      	ldr	r2, [pc, #12]	@ (8001944 <ssd1306_DrawPixel+0xa0>)
 8001936:	54d1      	strb	r1, [r2, r3]
 8001938:	e000      	b.n	800193c <ssd1306_DrawPixel+0x98>
        return;
 800193a:	bf00      	nop
    }
}
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	20000128 	.word	0x20000128

08001948 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	4604      	mov	r4, r0
 8001950:	4638      	mov	r0, r7
 8001952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001956:	4623      	mov	r3, r4
 8001958:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	2b1f      	cmp	r3, #31
 800195e:	d902      	bls.n	8001966 <ssd1306_WriteChar+0x1e>
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	2b7e      	cmp	r3, #126	@ 0x7e
 8001964:	d901      	bls.n	800196a <ssd1306_WriteChar+0x22>
        return 0;
 8001966:	2300      	movs	r3, #0
 8001968:	e079      	b.n	8001a5e <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <ssd1306_WriteChar+0x34>
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	3b20      	subs	r3, #32
 8001976:	4413      	add	r3, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	e000      	b.n	800197e <ssd1306_WriteChar+0x36>
 800197c:	783b      	ldrb	r3, [r7, #0]
 800197e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001980:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <ssd1306_WriteChar+0x120>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	4413      	add	r3, r2
 800198a:	2b80      	cmp	r3, #128	@ 0x80
 800198c:	dc06      	bgt.n	800199c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800198e:	4b36      	ldr	r3, [pc, #216]	@ (8001a68 <ssd1306_WriteChar+0x120>)
 8001990:	885b      	ldrh	r3, [r3, #2]
 8001992:	461a      	mov	r2, r3
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001998:	2b20      	cmp	r3, #32
 800199a:	dd01      	ble.n	80019a0 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800199c:	2300      	movs	r3, #0
 800199e:	e05e      	b.n	8001a5e <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	e04d      	b.n	8001a42 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	3b20      	subs	r3, #32
 80019ac:	7879      	ldrb	r1, [r7, #1]
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	440b      	add	r3, r1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	e036      	b.n	8001a34 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d013      	beq.n	80019fe <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80019d6:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <ssd1306_WriteChar+0x120>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	b2d8      	uxtb	r0, r3
 80019e4:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <ssd1306_WriteChar+0x120>)
 80019e6:	885b      	ldrh	r3, [r3, #2]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff ff54 	bl	80018a4 <ssd1306_DrawPixel>
 80019fc:	e017      	b.n	8001a2e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80019fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <ssd1306_WriteChar+0x120>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	b2d8      	uxtb	r0, r3
 8001a0c:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <ssd1306_WriteChar+0x120>)
 8001a0e:	885b      	ldrh	r3, [r3, #2]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	b2d9      	uxtb	r1, r3
 8001a1a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f7ff ff3b 	bl	80018a4 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d3c4      	bcc.n	80019c6 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	787b      	ldrb	r3, [r7, #1]
 8001a44:	461a      	mov	r2, r3
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d3ac      	bcc.n	80019a6 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <ssd1306_WriteChar+0x120>)
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b03      	ldr	r3, [pc, #12]	@ (8001a68 <ssd1306_WriteChar+0x120>)
 8001a5a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	@ 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd90      	pop	{r4, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000328 	.word	0x20000328

08001a6c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	4638      	mov	r0, r7
 8001a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001a7a:	e013      	b.n	8001aa4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	7818      	ldrb	r0, [r3, #0]
 8001a80:	7e3b      	ldrb	r3, [r7, #24]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	463b      	mov	r3, r7
 8001a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a88:	f7ff ff5e 	bl	8001948 <ssd1306_WriteChar>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d002      	beq.n	8001a9e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	e008      	b.n	8001ab0 <ssd1306_WriteString+0x44>
        }
        str++;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e7      	bne.n	8001a7c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	781b      	ldrb	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <ssd1306_SetCursor+0x2c>)
 8001ace:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001ad0:	79bb      	ldrb	r3, [r7, #6]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <ssd1306_SetCursor+0x2c>)
 8001ad6:	805a      	strh	r2, [r3, #2]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000328 	.word	0x20000328

08001ae8 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4604      	mov	r4, r0
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	71fb      	strb	r3, [r7, #7]
 8001afa:	4603      	mov	r3, r0
 8001afc:	71bb      	strb	r3, [r7, #6]
 8001afe:	460b      	mov	r3, r1
 8001b00:	717b      	strb	r3, [r7, #5]
 8001b02:	4613      	mov	r3, r2
 8001b04:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001b06:	79fa      	ldrb	r2, [r7, #7]
 8001b08:	797b      	ldrb	r3, [r7, #5]
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	bf28      	it	cs
 8001b0e:	4613      	movcs	r3, r2
 8001b10:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001b12:	797a      	ldrb	r2, [r7, #5]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	bf38      	it	cc
 8001b1a:	4613      	movcc	r3, r2
 8001b1c:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001b1e:	79ba      	ldrb	r2, [r7, #6]
 8001b20:	793b      	ldrb	r3, [r7, #4]
 8001b22:	4293      	cmp	r3, r2
 8001b24:	bf28      	it	cs
 8001b26:	4613      	movcs	r3, r2
 8001b28:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001b2a:	793a      	ldrb	r2, [r7, #4]
 8001b2c:	79bb      	ldrb	r3, [r7, #6]
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	bf38      	it	cc
 8001b32:	4613      	movcc	r3, r2
 8001b34:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001b36:	7afb      	ldrb	r3, [r7, #11]
 8001b38:	73fb      	strb	r3, [r7, #15]
 8001b3a:	e017      	b.n	8001b6c <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001b3c:	7b7b      	ldrb	r3, [r7, #13]
 8001b3e:	73bb      	strb	r3, [r7, #14]
 8001b40:	e009      	b.n	8001b56 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001b42:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b46:	7bf9      	ldrb	r1, [r7, #15]
 8001b48:	7bbb      	ldrb	r3, [r7, #14]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff feaa 	bl	80018a4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	3301      	adds	r3, #1
 8001b54:	73bb      	strb	r3, [r7, #14]
 8001b56:	7bba      	ldrb	r2, [r7, #14]
 8001b58:	7b3b      	ldrb	r3, [r7, #12]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d803      	bhi.n	8001b66 <ssd1306_FillRectangle+0x7e>
 8001b5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	daed      	bge.n	8001b42 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	7abb      	ldrb	r3, [r7, #10]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d803      	bhi.n	8001b7c <ssd1306_FillRectangle+0x94>
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b1f      	cmp	r3, #31
 8001b78:	d9e0      	bls.n	8001b3c <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
}
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b8e:	2381      	movs	r3, #129	@ 0x81
 8001b90:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fda9 	bl	80016ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fda5 	bl	80016ec <ssd1306_WriteCommand>
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001bbc:	23af      	movs	r3, #175	@ 0xaf
 8001bbe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <ssd1306_SetDisplayOn+0x38>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	715a      	strb	r2, [r3, #5]
 8001bc6:	e004      	b.n	8001bd2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001bc8:	23ae      	movs	r3, #174	@ 0xae
 8001bca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <ssd1306_SetDisplayOn+0x38>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fd89 	bl	80016ec <ssd1306_WriteCommand>
}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000328 	.word	0x20000328

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <HAL_Init+0x28>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	@ (8001c10 <HAL_Init+0x28>)
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f92b 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff fc0a 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f935 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 f90b 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	@ (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	20000010 	.word	0x20000010
 8001c70:	2000000c 	.word	0x2000000c

08001c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_IncTick+0x1c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_IncTick+0x20>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a03      	ldr	r2, [pc, #12]	@ (8001c94 <HAL_IncTick+0x20>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000010 	.word	0x20000010
 8001c94:	20000330 	.word	0x20000330

08001c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	@ (8001ca8 <HAL_GetTick+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000330 	.word	0x20000330

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffe0 	bl	8001c98 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000010 	.word	0x20000010

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	@ (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	@ (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	@ 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff90 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff49 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff5e 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff90 	bl	8001dac <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5f 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffb0 	bl	8001e10 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b08b      	sub	sp, #44	@ 0x2c
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ece:	e169      	b.n	80021a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	f040 8158 	bne.w	800219e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4a9a      	ldr	r2, [pc, #616]	@ (800215c <HAL_GPIO_Init+0x2a0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d05e      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
 8001ef8:	4a98      	ldr	r2, [pc, #608]	@ (800215c <HAL_GPIO_Init+0x2a0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d875      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001efe:	4a98      	ldr	r2, [pc, #608]	@ (8002160 <HAL_GPIO_Init+0x2a4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d058      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
 8001f04:	4a96      	ldr	r2, [pc, #600]	@ (8002160 <HAL_GPIO_Init+0x2a4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d86f      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001f0a:	4a96      	ldr	r2, [pc, #600]	@ (8002164 <HAL_GPIO_Init+0x2a8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d052      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
 8001f10:	4a94      	ldr	r2, [pc, #592]	@ (8002164 <HAL_GPIO_Init+0x2a8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d869      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001f16:	4a94      	ldr	r2, [pc, #592]	@ (8002168 <HAL_GPIO_Init+0x2ac>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d04c      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
 8001f1c:	4a92      	ldr	r2, [pc, #584]	@ (8002168 <HAL_GPIO_Init+0x2ac>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d863      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001f22:	4a92      	ldr	r2, [pc, #584]	@ (800216c <HAL_GPIO_Init+0x2b0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d046      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
 8001f28:	4a90      	ldr	r2, [pc, #576]	@ (800216c <HAL_GPIO_Init+0x2b0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d85d      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001f2e:	2b12      	cmp	r3, #18
 8001f30:	d82a      	bhi.n	8001f88 <HAL_GPIO_Init+0xcc>
 8001f32:	2b12      	cmp	r3, #18
 8001f34:	d859      	bhi.n	8001fea <HAL_GPIO_Init+0x12e>
 8001f36:	a201      	add	r2, pc, #4	@ (adr r2, 8001f3c <HAL_GPIO_Init+0x80>)
 8001f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3c:	08001fb7 	.word	0x08001fb7
 8001f40:	08001f91 	.word	0x08001f91
 8001f44:	08001fa3 	.word	0x08001fa3
 8001f48:	08001fe5 	.word	0x08001fe5
 8001f4c:	08001feb 	.word	0x08001feb
 8001f50:	08001feb 	.word	0x08001feb
 8001f54:	08001feb 	.word	0x08001feb
 8001f58:	08001feb 	.word	0x08001feb
 8001f5c:	08001feb 	.word	0x08001feb
 8001f60:	08001feb 	.word	0x08001feb
 8001f64:	08001feb 	.word	0x08001feb
 8001f68:	08001feb 	.word	0x08001feb
 8001f6c:	08001feb 	.word	0x08001feb
 8001f70:	08001feb 	.word	0x08001feb
 8001f74:	08001feb 	.word	0x08001feb
 8001f78:	08001feb 	.word	0x08001feb
 8001f7c:	08001feb 	.word	0x08001feb
 8001f80:	08001f99 	.word	0x08001f99
 8001f84:	08001fad 	.word	0x08001fad
 8001f88:	4a79      	ldr	r2, [pc, #484]	@ (8002170 <HAL_GPIO_Init+0x2b4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d013      	beq.n	8001fb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f8e:	e02c      	b.n	8001fea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	623b      	str	r3, [r7, #32]
          break;
 8001f96:	e029      	b.n	8001fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	623b      	str	r3, [r7, #32]
          break;
 8001fa0:	e024      	b.n	8001fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	3308      	adds	r3, #8
 8001fa8:	623b      	str	r3, [r7, #32]
          break;
 8001faa:	e01f      	b.n	8001fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	623b      	str	r3, [r7, #32]
          break;
 8001fb4:	e01a      	b.n	8001fec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	623b      	str	r3, [r7, #32]
          break;
 8001fc2:	e013      	b.n	8001fec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	611a      	str	r2, [r3, #16]
          break;
 8001fd6:	e009      	b.n	8001fec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	615a      	str	r2, [r3, #20]
          break;
 8001fe2:	e003      	b.n	8001fec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
          break;
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x130>
          break;
 8001fea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2bff      	cmp	r3, #255	@ 0xff
 8001ff0:	d801      	bhi.n	8001ff6 <HAL_GPIO_Init+0x13a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	e001      	b.n	8001ffa <HAL_GPIO_Init+0x13e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2bff      	cmp	r3, #255	@ 0xff
 8002000:	d802      	bhi.n	8002008 <HAL_GPIO_Init+0x14c>
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	e002      	b.n	800200e <HAL_GPIO_Init+0x152>
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	3b08      	subs	r3, #8
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	210f      	movs	r1, #15
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	401a      	ands	r2, r3
 8002020:	6a39      	ldr	r1, [r7, #32]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	431a      	orrs	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80b1 	beq.w	800219e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800203c:	4b4d      	ldr	r3, [pc, #308]	@ (8002174 <HAL_GPIO_Init+0x2b8>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a4c      	ldr	r2, [pc, #304]	@ (8002174 <HAL_GPIO_Init+0x2b8>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b4a      	ldr	r3, [pc, #296]	@ (8002174 <HAL_GPIO_Init+0x2b8>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002054:	4a48      	ldr	r2, [pc, #288]	@ (8002178 <HAL_GPIO_Init+0x2bc>)
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002060:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	220f      	movs	r2, #15
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a40      	ldr	r2, [pc, #256]	@ (800217c <HAL_GPIO_Init+0x2c0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d013      	beq.n	80020a8 <HAL_GPIO_Init+0x1ec>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3f      	ldr	r2, [pc, #252]	@ (8002180 <HAL_GPIO_Init+0x2c4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00d      	beq.n	80020a4 <HAL_GPIO_Init+0x1e8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3e      	ldr	r2, [pc, #248]	@ (8002184 <HAL_GPIO_Init+0x2c8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d007      	beq.n	80020a0 <HAL_GPIO_Init+0x1e4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3d      	ldr	r2, [pc, #244]	@ (8002188 <HAL_GPIO_Init+0x2cc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_GPIO_Init+0x1e0>
 8002098:	2303      	movs	r3, #3
 800209a:	e006      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 800209c:	2304      	movs	r3, #4
 800209e:	e004      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e002      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 80020a8:	2300      	movs	r3, #0
 80020aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ac:	f002 0203 	and.w	r2, r2, #3
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	4093      	lsls	r3, r2
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ba:	492f      	ldr	r1, [pc, #188]	@ (8002178 <HAL_GPIO_Init+0x2bc>)
 80020bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d4:	4b2d      	ldr	r3, [pc, #180]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	492c      	ldr	r1, [pc, #176]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020e2:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4928      	ldr	r1, [pc, #160]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020fc:	4b23      	ldr	r3, [pc, #140]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	4922      	ldr	r1, [pc, #136]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	60cb      	str	r3, [r1, #12]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800210a:	4b20      	ldr	r3, [pc, #128]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	491e      	ldr	r1, [pc, #120]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 8002114:	4013      	ands	r3, r2
 8002116:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002124:	4b19      	ldr	r3, [pc, #100]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4918      	ldr	r1, [pc, #96]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002132:	4b16      	ldr	r3, [pc, #88]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	43db      	mvns	r3, r3
 800213a:	4914      	ldr	r1, [pc, #80]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 800213c:	4013      	ands	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d021      	beq.n	8002190 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800214c:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	490e      	ldr	r1, [pc, #56]	@ (800218c <HAL_GPIO_Init+0x2d0>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
 8002158:	e021      	b.n	800219e <HAL_GPIO_Init+0x2e2>
 800215a:	bf00      	nop
 800215c:	10320000 	.word	0x10320000
 8002160:	10310000 	.word	0x10310000
 8002164:	10220000 	.word	0x10220000
 8002168:	10210000 	.word	0x10210000
 800216c:	10120000 	.word	0x10120000
 8002170:	10110000 	.word	0x10110000
 8002174:	40021000 	.word	0x40021000
 8002178:	40010000 	.word	0x40010000
 800217c:	40010800 	.word	0x40010800
 8002180:	40010c00 	.word	0x40010c00
 8002184:	40011000 	.word	0x40011000
 8002188:	40011400 	.word	0x40011400
 800218c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002190:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <HAL_GPIO_Init+0x304>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	43db      	mvns	r3, r3
 8002198:	4909      	ldr	r1, [pc, #36]	@ (80021c0 <HAL_GPIO_Init+0x304>)
 800219a:	4013      	ands	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	3301      	adds	r3, #1
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	fa22 f303 	lsr.w	r3, r2, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f47f ae8e 	bne.w	8001ed0 <HAL_GPIO_Init+0x14>
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	372c      	adds	r7, #44	@ 0x2c
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	40010400 	.word	0x40010400

080021c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e001      	b.n	80021e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	807b      	strh	r3, [r7, #2]
 80021fe:	4613      	mov	r3, r2
 8002200:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002202:	787b      	ldrb	r3, [r7, #1]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002208:	887a      	ldrh	r2, [r7, #2]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800220e:	e003      	b.n	8002218 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002210:	887b      	ldrh	r3, [r7, #2]
 8002212:	041a      	lsls	r2, r3, #16
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	611a      	str	r2, [r3, #16]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
	...

08002224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e12b      	b.n	800248e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff f918 	bl	8001480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2224      	movs	r2, #36	@ 0x24
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002276:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002286:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002288:	f001 f842 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 800228c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4a81      	ldr	r2, [pc, #516]	@ (8002498 <HAL_I2C_Init+0x274>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d807      	bhi.n	80022a8 <HAL_I2C_Init+0x84>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4a80      	ldr	r2, [pc, #512]	@ (800249c <HAL_I2C_Init+0x278>)
 800229c:	4293      	cmp	r3, r2
 800229e:	bf94      	ite	ls
 80022a0:	2301      	movls	r3, #1
 80022a2:	2300      	movhi	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e006      	b.n	80022b6 <HAL_I2C_Init+0x92>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a7d      	ldr	r2, [pc, #500]	@ (80024a0 <HAL_I2C_Init+0x27c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	bf94      	ite	ls
 80022b0:	2301      	movls	r3, #1
 80022b2:	2300      	movhi	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e0e7      	b.n	800248e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4a78      	ldr	r2, [pc, #480]	@ (80024a4 <HAL_I2C_Init+0x280>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0c9b      	lsrs	r3, r3, #18
 80022c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002498 <HAL_I2C_Init+0x274>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d802      	bhi.n	80022f8 <HAL_I2C_Init+0xd4>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3301      	adds	r3, #1
 80022f6:	e009      	b.n	800230c <HAL_I2C_Init+0xe8>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	4a69      	ldr	r2, [pc, #420]	@ (80024a8 <HAL_I2C_Init+0x284>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	3301      	adds	r3, #1
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	430b      	orrs	r3, r1
 8002312:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800231e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	495c      	ldr	r1, [pc, #368]	@ (8002498 <HAL_I2C_Init+0x274>)
 8002328:	428b      	cmp	r3, r1
 800232a:	d819      	bhi.n	8002360 <HAL_I2C_Init+0x13c>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1e59      	subs	r1, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fbb1 f3f3 	udiv	r3, r1, r3
 800233a:	1c59      	adds	r1, r3, #1
 800233c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002340:	400b      	ands	r3, r1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_I2C_Init+0x138>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1e59      	subs	r1, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fbb1 f3f3 	udiv	r3, r1, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235a:	e051      	b.n	8002400 <HAL_I2C_Init+0x1dc>
 800235c:	2304      	movs	r3, #4
 800235e:	e04f      	b.n	8002400 <HAL_I2C_Init+0x1dc>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d111      	bne.n	800238c <HAL_I2C_Init+0x168>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1e58      	subs	r0, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	440b      	add	r3, r1
 8002376:	fbb0 f3f3 	udiv	r3, r0, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e012      	b.n	80023b2 <HAL_I2C_Init+0x18e>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1e58      	subs	r0, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	0099      	lsls	r1, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a2:	3301      	adds	r3, #1
 80023a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_I2C_Init+0x196>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e022      	b.n	8002400 <HAL_I2C_Init+0x1dc>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10e      	bne.n	80023e0 <HAL_I2C_Init+0x1bc>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1e58      	subs	r0, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6859      	ldr	r1, [r3, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	440b      	add	r3, r1
 80023d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d4:	3301      	adds	r3, #1
 80023d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023de:	e00f      	b.n	8002400 <HAL_I2C_Init+0x1dc>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1e58      	subs	r0, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	0099      	lsls	r1, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	6809      	ldr	r1, [r1, #0]
 8002404:	4313      	orrs	r3, r2
 8002406:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800242e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6911      	ldr	r1, [r2, #16]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68d2      	ldr	r2, [r2, #12]
 800243a:	4311      	orrs	r1, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	430b      	orrs	r3, r1
 8002442:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	000186a0 	.word	0x000186a0
 800249c:	001e847f 	.word	0x001e847f
 80024a0:	003d08ff 	.word	0x003d08ff
 80024a4:	431bde83 	.word	0x431bde83
 80024a8:	10624dd3 	.word	0x10624dd3

080024ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	817b      	strh	r3, [r7, #10]
 80024be:	460b      	mov	r3, r1
 80024c0:	813b      	strh	r3, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024c6:	f7ff fbe7 	bl	8001c98 <HAL_GetTick>
 80024ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	f040 80d9 	bne.w	800268c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	2319      	movs	r3, #25
 80024e0:	2201      	movs	r2, #1
 80024e2:	496d      	ldr	r1, [pc, #436]	@ (8002698 <HAL_I2C_Mem_Write+0x1ec>)
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f971 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0cc      	b.n	800268e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_I2C_Mem_Write+0x56>
 80024fe:	2302      	movs	r3, #2
 8002500:	e0c5      	b.n	800268e <HAL_I2C_Mem_Write+0x1e2>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d007      	beq.n	8002528 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002536:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2221      	movs	r2, #33	@ 0x21
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2240      	movs	r2, #64	@ 0x40
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a3a      	ldr	r2, [r7, #32]
 8002552:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002558:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a4d      	ldr	r2, [pc, #308]	@ (800269c <HAL_I2C_Mem_Write+0x1f0>)
 8002568:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800256a:	88f8      	ldrh	r0, [r7, #6]
 800256c:	893a      	ldrh	r2, [r7, #8]
 800256e:	8979      	ldrh	r1, [r7, #10]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	4603      	mov	r3, r0
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f890 	bl	80026a0 <I2C_RequestMemoryWrite>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d052      	beq.n	800262c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e081      	b.n	800268e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fa36 	bl	8002a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00d      	beq.n	80025b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d107      	bne.n	80025b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06b      	b.n	800268e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d11b      	bne.n	800262c <HAL_I2C_Mem_Write+0x180>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d017      	beq.n	800262c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1aa      	bne.n	800258a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fa29 	bl	8002a90 <I2C_WaitOnBTFFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00d      	beq.n	8002660 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	2b04      	cmp	r3, #4
 800264a:	d107      	bne.n	800265c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800265a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e016      	b.n	800268e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	e000      	b.n	800268e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800268c:	2302      	movs	r3, #2
  }
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	00100002 	.word	0x00100002
 800269c:	ffff0000 	.word	0xffff0000

080026a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	4608      	mov	r0, r1
 80026aa:	4611      	mov	r1, r2
 80026ac:	461a      	mov	r2, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	817b      	strh	r3, [r7, #10]
 80026b2:	460b      	mov	r3, r1
 80026b4:	813b      	strh	r3, [r7, #8]
 80026b6:	4613      	mov	r3, r2
 80026b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f878 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026f0:	d103      	bne.n	80026fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e05f      	b.n	80027be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800270c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	6a3a      	ldr	r2, [r7, #32]
 8002712:	492d      	ldr	r1, [pc, #180]	@ (80027c8 <I2C_RequestMemoryWrite+0x128>)
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f8d3 	bl	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e04c      	b.n	80027be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800273a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800273c:	6a39      	ldr	r1, [r7, #32]
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f95e 	bl	8002a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00d      	beq.n	8002766 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	2b04      	cmp	r3, #4
 8002750:	d107      	bne.n	8002762 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002760:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e02b      	b.n	80027be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800276c:	893b      	ldrh	r3, [r7, #8]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	611a      	str	r2, [r3, #16]
 8002776:	e021      	b.n	80027bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002778:	893b      	ldrh	r3, [r7, #8]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b29b      	uxth	r3, r3
 800277e:	b2da      	uxtb	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002788:	6a39      	ldr	r1, [r7, #32]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f938 	bl	8002a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	2b04      	cmp	r3, #4
 800279c:	d107      	bne.n	80027ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e005      	b.n	80027be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027b2:	893b      	ldrh	r3, [r7, #8]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	00010002 	.word	0x00010002

080027cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027dc:	e048      	b.n	8002870 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d044      	beq.n	8002870 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e6:	f7ff fa57 	bl	8001c98 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d302      	bcc.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d139      	bne.n	8002870 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10d      	bne.n	8002822 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	43da      	mvns	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4013      	ands	r3, r2
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	e00c      	b.n	800283c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	43da      	mvns	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	429a      	cmp	r2, r3
 8002840:	d116      	bne.n	8002870 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e023      	b.n	80028b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	0c1b      	lsrs	r3, r3, #16
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d10d      	bne.n	8002896 <I2C_WaitOnFlagUntilTimeout+0xca>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	43da      	mvns	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4013      	ands	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	e00c      	b.n	80028b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	43da      	mvns	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4013      	ands	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d093      	beq.n	80027de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ce:	e071      	b.n	80029b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028de:	d123      	bne.n	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f043 0204 	orr.w	r2, r3, #4
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e067      	b.n	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292e:	d041      	beq.n	80029b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002930:	f7ff f9b2 	bl	8001c98 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	429a      	cmp	r2, r3
 800293e:	d302      	bcc.n	8002946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d136      	bne.n	80029b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	0c1b      	lsrs	r3, r3, #16
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d10c      	bne.n	800296a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4013      	ands	r3, r2
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	e00b      	b.n	8002982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	43da      	mvns	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4013      	ands	r3, r2
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e021      	b.n	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	0c1b      	lsrs	r3, r3, #16
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10c      	bne.n	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	43da      	mvns	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4013      	ands	r3, r2
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e00b      	b.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4013      	ands	r3, r2
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bf14      	ite	ne
 80029ea:	2301      	movne	r3, #1
 80029ec:	2300      	moveq	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f47f af6d 	bne.w	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a0c:	e034      	b.n	8002a78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f886 	bl	8002b20 <I2C_IsAcknowledgeFailed>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e034      	b.n	8002a88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a24:	d028      	beq.n	8002a78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a26:	f7ff f937 	bl	8001c98 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d302      	bcc.n	8002a3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d11d      	bne.n	8002a78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a46:	2b80      	cmp	r3, #128	@ 0x80
 8002a48:	d016      	beq.n	8002a78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	f043 0220 	orr.w	r2, r3, #32
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e007      	b.n	8002a88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a82:	2b80      	cmp	r3, #128	@ 0x80
 8002a84:	d1c3      	bne.n	8002a0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a9c:	e034      	b.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f83e 	bl	8002b20 <I2C_IsAcknowledgeFailed>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e034      	b.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d028      	beq.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab6:	f7ff f8ef 	bl	8001c98 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d11d      	bne.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d016      	beq.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e007      	b.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d1c3      	bne.n	8002a9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b36:	d11b      	bne.n	8002b70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	f043 0204 	orr.w	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e272      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8087 	beq.w	8002caa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b9c:	4b92      	ldr	r3, [pc, #584]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d00c      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ba8:	4b8f      	ldr	r3, [pc, #572]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d112      	bne.n	8002bda <HAL_RCC_OscConfig+0x5e>
 8002bb4:	4b8c      	ldr	r3, [pc, #560]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc0:	d10b      	bne.n	8002bda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc2:	4b89      	ldr	r3, [pc, #548]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d06c      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x12c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d168      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e24c      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x76>
 8002be4:	4b80      	ldr	r3, [pc, #512]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a7f      	ldr	r2, [pc, #508]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	e02e      	b.n	8002c50 <HAL_RCC_OscConfig+0xd4>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x98>
 8002bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7a      	ldr	r2, [pc, #488]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b78      	ldr	r3, [pc, #480]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a77      	ldr	r2, [pc, #476]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e01d      	b.n	8002c50 <HAL_RCC_OscConfig+0xd4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0xbc>
 8002c1e:	4b72      	ldr	r3, [pc, #456]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a71      	ldr	r2, [pc, #452]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6e      	ldr	r2, [pc, #440]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0xd4>
 8002c38:	4b6b      	ldr	r3, [pc, #428]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6a      	ldr	r2, [pc, #424]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b68      	ldr	r3, [pc, #416]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a67      	ldr	r2, [pc, #412]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7ff f81e 	bl	8001c98 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7ff f81a 	bl	8001c98 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	@ 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e200      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b5d      	ldr	r3, [pc, #372]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0xe4>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff f80a 	bl	8001c98 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff f806 	bl	8001c98 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1ec      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x10c>
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d063      	beq.n	8002d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cc2:	4b49      	ldr	r3, [pc, #292]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d11c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x18c>
 8002cce:	4b46      	ldr	r3, [pc, #280]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d116      	bne.n	8002d08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	4b43      	ldr	r3, [pc, #268]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x176>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e1c0      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4939      	ldr	r1, [pc, #228]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	e03a      	b.n	8002d7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b36      	ldr	r3, [pc, #216]	@ (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe ffbf 	bl	8001c98 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1e:	f7fe ffbb 	bl	8001c98 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e1a1      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d30:	4b2d      	ldr	r3, [pc, #180]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4927      	ldr	r1, [pc, #156]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
 8002d50:	e015      	b.n	8002d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d52:	4b26      	ldr	r3, [pc, #152]	@ (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe ff9e 	bl	8001c98 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d60:	f7fe ff9a 	bl	8001c98 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e180      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d03a      	beq.n	8002e00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d019      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d92:	4b17      	ldr	r3, [pc, #92]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d98:	f7fe ff7e 	bl	8001c98 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da0:	f7fe ff7a 	bl	8001c98 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e160      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f000 faba 	bl	8003338 <RCC_Delay>
 8002dc4:	e01c      	b.n	8002e00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dcc:	f7fe ff64 	bl	8001c98 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd2:	e00f      	b.n	8002df4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7fe ff60 	bl	8001c98 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d908      	bls.n	8002df4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e146      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	42420000 	.word	0x42420000
 8002df0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	4b92      	ldr	r3, [pc, #584]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1e9      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80a6 	beq.w	8002f5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e12:	4b8b      	ldr	r3, [pc, #556]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10d      	bne.n	8002e3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	4b88      	ldr	r3, [pc, #544]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	4a87      	ldr	r2, [pc, #540]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	61d3      	str	r3, [r2, #28]
 8002e2a:	4b85      	ldr	r3, [pc, #532]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b82      	ldr	r3, [pc, #520]	@ (8003044 <HAL_RCC_OscConfig+0x4c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d118      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e46:	4b7f      	ldr	r3, [pc, #508]	@ (8003044 <HAL_RCC_OscConfig+0x4c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003044 <HAL_RCC_OscConfig+0x4c8>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e52:	f7fe ff21 	bl	8001c98 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fe ff1d 	bl	8001c98 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b64      	cmp	r3, #100	@ 0x64
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e103      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	4b75      	ldr	r3, [pc, #468]	@ (8003044 <HAL_RCC_OscConfig+0x4c8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x312>
 8002e80:	4b6f      	ldr	r3, [pc, #444]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a6e      	ldr	r2, [pc, #440]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	e02d      	b.n	8002eea <HAL_RCC_OscConfig+0x36e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x334>
 8002e96:	4b6a      	ldr	r3, [pc, #424]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4a69      	ldr	r2, [pc, #420]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6213      	str	r3, [r2, #32]
 8002ea2:	4b67      	ldr	r3, [pc, #412]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4a66      	ldr	r2, [pc, #408]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	6213      	str	r3, [r2, #32]
 8002eae:	e01c      	b.n	8002eea <HAL_RCC_OscConfig+0x36e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x356>
 8002eb8:	4b61      	ldr	r3, [pc, #388]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a60      	ldr	r2, [pc, #384]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	4b5e      	ldr	r3, [pc, #376]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a5d      	ldr	r2, [pc, #372]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	e00b      	b.n	8002eea <HAL_RCC_OscConfig+0x36e>
 8002ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a5a      	ldr	r2, [pc, #360]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	4b58      	ldr	r3, [pc, #352]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a57      	ldr	r2, [pc, #348]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d015      	beq.n	8002f1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fed1 	bl	8001c98 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe fecd 	bl	8001c98 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0b1      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	4b4b      	ldr	r3, [pc, #300]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ee      	beq.n	8002efa <HAL_RCC_OscConfig+0x37e>
 8002f1c:	e014      	b.n	8002f48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe febb 	bl	8001c98 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fe feb7 	bl	8001c98 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e09b      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3c:	4b40      	ldr	r3, [pc, #256]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ee      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4a3b      	ldr	r2, [pc, #236]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8087 	beq.w	8003072 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f64:	4b36      	ldr	r3, [pc, #216]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d061      	beq.n	8003034 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d146      	bne.n	8003006 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b33      	ldr	r3, [pc, #204]	@ (8003048 <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fe8b 	bl	8001c98 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fe fe87 	bl	8001c98 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e06d      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f98:	4b29      	ldr	r3, [pc, #164]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fac:	d108      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fae:	4b24      	ldr	r3, [pc, #144]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	4921      	ldr	r1, [pc, #132]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a19      	ldr	r1, [r3, #32]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	491b      	ldr	r1, [pc, #108]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <HAL_RCC_OscConfig+0x4cc>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe fe5b 	bl	8001c98 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe fe57 	bl	8001c98 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e03d      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff8:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x46a>
 8003004:	e035      	b.n	8003072 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <HAL_RCC_OscConfig+0x4cc>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe fe44 	bl	8001c98 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fe40 	bl	8001c98 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e026      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003026:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x498>
 8003032:	e01e      	b.n	8003072 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e019      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
 8003040:	40021000 	.word	0x40021000
 8003044:	40007000 	.word	0x40007000
 8003048:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <HAL_RCC_OscConfig+0x500>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000

08003080 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0d0      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b6a      	ldr	r3, [pc, #424]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b67      	ldr	r3, [pc, #412]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	4965      	ldr	r1, [pc, #404]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b63      	ldr	r3, [pc, #396]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0b8      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d020      	beq.n	8003112 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030dc:	4b59      	ldr	r3, [pc, #356]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a58      	ldr	r2, [pc, #352]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f4:	4b53      	ldr	r3, [pc, #332]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a52      	ldr	r2, [pc, #328]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b50      	ldr	r3, [pc, #320]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	494d      	ldr	r1, [pc, #308]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d040      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d115      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e07f      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313e:	4b41      	ldr	r3, [pc, #260]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e073      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	4b3d      	ldr	r3, [pc, #244]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06b      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315e:	4b39      	ldr	r3, [pc, #228]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f023 0203 	bic.w	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4936      	ldr	r1, [pc, #216]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003170:	f7fe fd92 	bl	8001c98 <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	e00a      	b.n	800318e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003178:	f7fe fd8e 	bl	8001c98 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e053      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 020c 	and.w	r2, r3, #12
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	429a      	cmp	r2, r3
 800319e:	d1eb      	bne.n	8003178 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a0:	4b27      	ldr	r3, [pc, #156]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d210      	bcs.n	80031d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b24      	ldr	r3, [pc, #144]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 0207 	bic.w	r2, r3, #7
 80031b6:	4922      	ldr	r1, [pc, #136]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e032      	b.n	8003236 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031dc:	4b19      	ldr	r3, [pc, #100]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4916      	ldr	r1, [pc, #88]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031fa:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	490e      	ldr	r1, [pc, #56]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800320e:	f000 f821 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 8003212:	4602      	mov	r2, r0
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	490a      	ldr	r1, [pc, #40]	@ (8003248 <HAL_RCC_ClockConfig+0x1c8>)
 8003220:	5ccb      	ldrb	r3, [r1, r3]
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	4a09      	ldr	r2, [pc, #36]	@ (800324c <HAL_RCC_ClockConfig+0x1cc>)
 8003228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800322a:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_RCC_ClockConfig+0x1d0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fcf0 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40022000 	.word	0x40022000
 8003244:	40021000 	.word	0x40021000
 8003248:	08004678 	.word	0x08004678
 800324c:	20000008 	.word	0x20000008
 8003250:	2000000c 	.word	0x2000000c

08003254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800326e:	4b1e      	ldr	r3, [pc, #120]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b04      	cmp	r3, #4
 800327c:	d002      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x30>
 800327e:	2b08      	cmp	r3, #8
 8003280:	d003      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x36>
 8003282:	e027      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003284:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003286:	613b      	str	r3, [r7, #16]
      break;
 8003288:	e027      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	0c9b      	lsrs	r3, r3, #18
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	4a17      	ldr	r2, [pc, #92]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003294:	5cd3      	ldrb	r3, [r2, r3]
 8003296:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d010      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032a2:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	0c5b      	lsrs	r3, r3, #17
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	4a11      	ldr	r2, [pc, #68]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a0d      	ldr	r2, [pc, #52]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x98>)
 80032b6:	fb03 f202 	mul.w	r2, r3, r2
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e004      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a0c      	ldr	r2, [pc, #48]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	613b      	str	r3, [r7, #16]
      break;
 80032d2:	e002      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x98>)
 80032d6:	613b      	str	r3, [r7, #16]
      break;
 80032d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032da:	693b      	ldr	r3, [r7, #16]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
 80032ec:	007a1200 	.word	0x007a1200
 80032f0:	08005404 	.word	0x08005404
 80032f4:	08005414 	.word	0x08005414
 80032f8:	003d0900 	.word	0x003d0900

080032fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b02      	ldr	r3, [pc, #8]	@ (800330c <HAL_RCC_GetHCLKFreq+0x10>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	20000008 	.word	0x20000008

08003310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003314:	f7ff fff2 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4903      	ldr	r1, [pc, #12]	@ (8003334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000
 8003334:	08004688 	.word	0x08004688

08003338 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003340:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <RCC_Delay+0x34>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0a      	ldr	r2, [pc, #40]	@ (8003370 <RCC_Delay+0x38>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0a5b      	lsrs	r3, r3, #9
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003354:	bf00      	nop
  }
  while (Delay --);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1e5a      	subs	r2, r3, #1
 800335a:	60fa      	str	r2, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f9      	bne.n	8003354 <RCC_Delay+0x1c>
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	20000008 	.word	0x20000008
 8003370:	10624dd3 	.word	0x10624dd3

08003374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e041      	b.n	800340a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fe f8c0 	bl	8001520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4610      	mov	r0, r2
 80033b4:	f000 f992 	bl	80036dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_TIM_PWM_Start+0x24>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e022      	b.n	800347e <HAL_TIM_PWM_Start+0x6a>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b04      	cmp	r3, #4
 800343c:	d109      	bne.n	8003452 <HAL_TIM_PWM_Start+0x3e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	e015      	b.n	800347e <HAL_TIM_PWM_Start+0x6a>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d109      	bne.n	800346c <HAL_TIM_PWM_Start+0x58>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e008      	b.n	800347e <HAL_TIM_PWM_Start+0x6a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e05e      	b.n	8003544 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <HAL_TIM_PWM_Start+0x82>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003494:	e013      	b.n	80034be <HAL_TIM_PWM_Start+0xaa>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d104      	bne.n	80034a6 <HAL_TIM_PWM_Start+0x92>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a4:	e00b      	b.n	80034be <HAL_TIM_PWM_Start+0xaa>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_PWM_Start+0xa2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b4:	e003      	b.n	80034be <HAL_TIM_PWM_Start+0xaa>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2201      	movs	r2, #1
 80034c4:	6839      	ldr	r1, [r7, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fafe 	bl	8003ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1e      	ldr	r2, [pc, #120]	@ (800354c <HAL_TIM_PWM_Start+0x138>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d107      	bne.n	80034e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a18      	ldr	r2, [pc, #96]	@ (800354c <HAL_TIM_PWM_Start+0x138>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_TIM_PWM_Start+0xfa>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f8:	d009      	beq.n	800350e <HAL_TIM_PWM_Start+0xfa>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <HAL_TIM_PWM_Start+0x13c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_TIM_PWM_Start+0xfa>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a12      	ldr	r2, [pc, #72]	@ (8003554 <HAL_TIM_PWM_Start+0x140>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d111      	bne.n	8003532 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b06      	cmp	r3, #6
 800351e:	d010      	beq.n	8003542 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003530:	e007      	b.n	8003542 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800

08003558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003572:	2302      	movs	r3, #2
 8003574:	e0ae      	b.n	80036d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b0c      	cmp	r3, #12
 8003582:	f200 809f 	bhi.w	80036c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003586:	a201      	add	r2, pc, #4	@ (adr r2, 800358c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	080035c1 	.word	0x080035c1
 8003590:	080036c5 	.word	0x080036c5
 8003594:	080036c5 	.word	0x080036c5
 8003598:	080036c5 	.word	0x080036c5
 800359c:	08003601 	.word	0x08003601
 80035a0:	080036c5 	.word	0x080036c5
 80035a4:	080036c5 	.word	0x080036c5
 80035a8:	080036c5 	.word	0x080036c5
 80035ac:	08003643 	.word	0x08003643
 80035b0:	080036c5 	.word	0x080036c5
 80035b4:	080036c5 	.word	0x080036c5
 80035b8:	080036c5 	.word	0x080036c5
 80035bc:	08003683 	.word	0x08003683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f8f6 	bl	80037b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0208 	orr.w	r2, r2, #8
 80035da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0204 	bic.w	r2, r2, #4
 80035ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6999      	ldr	r1, [r3, #24]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	619a      	str	r2, [r3, #24]
      break;
 80035fe:	e064      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f93c 	bl	8003884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800361a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800362a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6999      	ldr	r1, [r3, #24]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	021a      	lsls	r2, r3, #8
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	619a      	str	r2, [r3, #24]
      break;
 8003640:	e043      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f985 	bl	8003958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0208 	orr.w	r2, r2, #8
 800365c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0204 	bic.w	r2, r2, #4
 800366c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69d9      	ldr	r1, [r3, #28]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	61da      	str	r2, [r3, #28]
      break;
 8003680:	e023      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f9cf 	bl	8003a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800369c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69d9      	ldr	r1, [r3, #28]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	021a      	lsls	r2, r3, #8
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	61da      	str	r2, [r3, #28]
      break;
 80036c2:	e002      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	75fb      	strb	r3, [r7, #23]
      break;
 80036c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a2f      	ldr	r2, [pc, #188]	@ (80037ac <TIM_Base_SetConfig+0xd0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00b      	beq.n	800370c <TIM_Base_SetConfig+0x30>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fa:	d007      	beq.n	800370c <TIM_Base_SetConfig+0x30>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a2c      	ldr	r2, [pc, #176]	@ (80037b0 <TIM_Base_SetConfig+0xd4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <TIM_Base_SetConfig+0x30>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a2b      	ldr	r2, [pc, #172]	@ (80037b4 <TIM_Base_SetConfig+0xd8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d108      	bne.n	800371e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a22      	ldr	r2, [pc, #136]	@ (80037ac <TIM_Base_SetConfig+0xd0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00b      	beq.n	800373e <TIM_Base_SetConfig+0x62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800372c:	d007      	beq.n	800373e <TIM_Base_SetConfig+0x62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a1f      	ldr	r2, [pc, #124]	@ (80037b0 <TIM_Base_SetConfig+0xd4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_Base_SetConfig+0x62>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1e      	ldr	r2, [pc, #120]	@ (80037b4 <TIM_Base_SetConfig+0xd8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d108      	bne.n	8003750 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a0d      	ldr	r2, [pc, #52]	@ (80037ac <TIM_Base_SetConfig+0xd0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d103      	bne.n	8003784 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f023 0201 	bic.w	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]
  }
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800

080037b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f023 0201 	bic.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 0302 	bic.w	r3, r3, #2
 8003800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1c      	ldr	r2, [pc, #112]	@ (8003880 <TIM_OC1_SetConfig+0xc8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10c      	bne.n	800382e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0308 	bic.w	r3, r3, #8
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f023 0304 	bic.w	r3, r3, #4
 800382c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a13      	ldr	r2, [pc, #76]	@ (8003880 <TIM_OC1_SetConfig+0xc8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d111      	bne.n	800385a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800383c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	621a      	str	r2, [r3, #32]
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40012c00 	.word	0x40012c00

08003884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f023 0210 	bic.w	r2, r3, #16
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 0320 	bic.w	r3, r3, #32
 80038ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a1d      	ldr	r2, [pc, #116]	@ (8003954 <TIM_OC2_SetConfig+0xd0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10d      	bne.n	8003900 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a14      	ldr	r2, [pc, #80]	@ (8003954 <TIM_OC2_SetConfig+0xd0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d113      	bne.n	8003930 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800390e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	40012c00 	.word	0x40012c00

08003958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a28 <TIM_OC3_SetConfig+0xd0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10d      	bne.n	80039d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a14      	ldr	r2, [pc, #80]	@ (8003a28 <TIM_OC3_SetConfig+0xd0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d113      	bne.n	8003a02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40012c00 	.word	0x40012c00

08003a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	031b      	lsls	r3, r3, #12
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0f      	ldr	r2, [pc, #60]	@ (8003ac4 <TIM_OC4_SetConfig+0x98>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d109      	bne.n	8003aa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	40012c00 	.word	0x40012c00

08003ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2201      	movs	r2, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a1a      	ldr	r2, [r3, #32]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	401a      	ands	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1a      	ldr	r2, [r3, #32]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	621a      	str	r2, [r3, #32]
}
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e046      	b.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a16      	ldr	r2, [pc, #88]	@ (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b74:	d009      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	@ (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a10      	ldr	r2, [pc, #64]	@ (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10c      	bne.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800

08003bcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e03d      	b.n	8003c64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
	...

08003c70 <sniprintf>:
 8003c70:	b40c      	push	{r2, r3}
 8003c72:	b530      	push	{r4, r5, lr}
 8003c74:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <sniprintf+0x68>)
 8003c76:	1e0c      	subs	r4, r1, #0
 8003c78:	681d      	ldr	r5, [r3, #0]
 8003c7a:	b09d      	sub	sp, #116	@ 0x74
 8003c7c:	da08      	bge.n	8003c90 <sniprintf+0x20>
 8003c7e:	238b      	movs	r3, #139	@ 0x8b
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	602b      	str	r3, [r5, #0]
 8003c86:	b01d      	add	sp, #116	@ 0x74
 8003c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c8c:	b002      	add	sp, #8
 8003c8e:	4770      	bx	lr
 8003c90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003c94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003c9e:	bf0c      	ite	eq
 8003ca0:	4623      	moveq	r3, r4
 8003ca2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ca6:	9304      	str	r3, [sp, #16]
 8003ca8:	9307      	str	r3, [sp, #28]
 8003caa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cae:	9002      	str	r0, [sp, #8]
 8003cb0:	9006      	str	r0, [sp, #24]
 8003cb2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	ab21      	add	r3, sp, #132	@ 0x84
 8003cba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003cbc:	a902      	add	r1, sp, #8
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	f000 f9a0 	bl	8004004 <_svfiprintf_r>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	bfbc      	itt	lt
 8003cc8:	238b      	movlt	r3, #139	@ 0x8b
 8003cca:	602b      	strlt	r3, [r5, #0]
 8003ccc:	2c00      	cmp	r4, #0
 8003cce:	d0da      	beq.n	8003c86 <sniprintf+0x16>
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	9b02      	ldr	r3, [sp, #8]
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e7d6      	b.n	8003c86 <sniprintf+0x16>
 8003cd8:	20000014 	.word	0x20000014

08003cdc <memset>:
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4402      	add	r2, r0
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d100      	bne.n	8003ce6 <memset+0xa>
 8003ce4:	4770      	bx	lr
 8003ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cea:	e7f9      	b.n	8003ce0 <memset+0x4>

08003cec <__errno>:
 8003cec:	4b01      	ldr	r3, [pc, #4]	@ (8003cf4 <__errno+0x8>)
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000014 	.word	0x20000014

08003cf8 <__libc_init_array>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	2600      	movs	r6, #0
 8003cfc:	4d0c      	ldr	r5, [pc, #48]	@ (8003d30 <__libc_init_array+0x38>)
 8003cfe:	4c0d      	ldr	r4, [pc, #52]	@ (8003d34 <__libc_init_array+0x3c>)
 8003d00:	1b64      	subs	r4, r4, r5
 8003d02:	10a4      	asrs	r4, r4, #2
 8003d04:	42a6      	cmp	r6, r4
 8003d06:	d109      	bne.n	8003d1c <__libc_init_array+0x24>
 8003d08:	f000 fc76 	bl	80045f8 <_init>
 8003d0c:	2600      	movs	r6, #0
 8003d0e:	4d0a      	ldr	r5, [pc, #40]	@ (8003d38 <__libc_init_array+0x40>)
 8003d10:	4c0a      	ldr	r4, [pc, #40]	@ (8003d3c <__libc_init_array+0x44>)
 8003d12:	1b64      	subs	r4, r4, r5
 8003d14:	10a4      	asrs	r4, r4, #2
 8003d16:	42a6      	cmp	r6, r4
 8003d18:	d105      	bne.n	8003d26 <__libc_init_array+0x2e>
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d20:	4798      	blx	r3
 8003d22:	3601      	adds	r6, #1
 8003d24:	e7ee      	b.n	8003d04 <__libc_init_array+0xc>
 8003d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2a:	4798      	blx	r3
 8003d2c:	3601      	adds	r6, #1
 8003d2e:	e7f2      	b.n	8003d16 <__libc_init_array+0x1e>
 8003d30:	0800544c 	.word	0x0800544c
 8003d34:	0800544c 	.word	0x0800544c
 8003d38:	0800544c 	.word	0x0800544c
 8003d3c:	08005450 	.word	0x08005450

08003d40 <__retarget_lock_acquire_recursive>:
 8003d40:	4770      	bx	lr

08003d42 <__retarget_lock_release_recursive>:
 8003d42:	4770      	bx	lr

08003d44 <memcpy>:
 8003d44:	440a      	add	r2, r1
 8003d46:	4291      	cmp	r1, r2
 8003d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d4c:	d100      	bne.n	8003d50 <memcpy+0xc>
 8003d4e:	4770      	bx	lr
 8003d50:	b510      	push	{r4, lr}
 8003d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d56:	4291      	cmp	r1, r2
 8003d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d5c:	d1f9      	bne.n	8003d52 <memcpy+0xe>
 8003d5e:	bd10      	pop	{r4, pc}

08003d60 <_free_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	4605      	mov	r5, r0
 8003d64:	2900      	cmp	r1, #0
 8003d66:	d040      	beq.n	8003dea <_free_r+0x8a>
 8003d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d6c:	1f0c      	subs	r4, r1, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bfb8      	it	lt
 8003d72:	18e4      	addlt	r4, r4, r3
 8003d74:	f000 f8de 	bl	8003f34 <__malloc_lock>
 8003d78:	4a1c      	ldr	r2, [pc, #112]	@ (8003dec <_free_r+0x8c>)
 8003d7a:	6813      	ldr	r3, [r2, #0]
 8003d7c:	b933      	cbnz	r3, 8003d8c <_free_r+0x2c>
 8003d7e:	6063      	str	r3, [r4, #4]
 8003d80:	6014      	str	r4, [r2, #0]
 8003d82:	4628      	mov	r0, r5
 8003d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d88:	f000 b8da 	b.w	8003f40 <__malloc_unlock>
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	d908      	bls.n	8003da2 <_free_r+0x42>
 8003d90:	6820      	ldr	r0, [r4, #0]
 8003d92:	1821      	adds	r1, r4, r0
 8003d94:	428b      	cmp	r3, r1
 8003d96:	bf01      	itttt	eq
 8003d98:	6819      	ldreq	r1, [r3, #0]
 8003d9a:	685b      	ldreq	r3, [r3, #4]
 8003d9c:	1809      	addeq	r1, r1, r0
 8003d9e:	6021      	streq	r1, [r4, #0]
 8003da0:	e7ed      	b.n	8003d7e <_free_r+0x1e>
 8003da2:	461a      	mov	r2, r3
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	b10b      	cbz	r3, 8003dac <_free_r+0x4c>
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d9fa      	bls.n	8003da2 <_free_r+0x42>
 8003dac:	6811      	ldr	r1, [r2, #0]
 8003dae:	1850      	adds	r0, r2, r1
 8003db0:	42a0      	cmp	r0, r4
 8003db2:	d10b      	bne.n	8003dcc <_free_r+0x6c>
 8003db4:	6820      	ldr	r0, [r4, #0]
 8003db6:	4401      	add	r1, r0
 8003db8:	1850      	adds	r0, r2, r1
 8003dba:	4283      	cmp	r3, r0
 8003dbc:	6011      	str	r1, [r2, #0]
 8003dbe:	d1e0      	bne.n	8003d82 <_free_r+0x22>
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4408      	add	r0, r1
 8003dc6:	6010      	str	r0, [r2, #0]
 8003dc8:	6053      	str	r3, [r2, #4]
 8003dca:	e7da      	b.n	8003d82 <_free_r+0x22>
 8003dcc:	d902      	bls.n	8003dd4 <_free_r+0x74>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	602b      	str	r3, [r5, #0]
 8003dd2:	e7d6      	b.n	8003d82 <_free_r+0x22>
 8003dd4:	6820      	ldr	r0, [r4, #0]
 8003dd6:	1821      	adds	r1, r4, r0
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	bf01      	itttt	eq
 8003ddc:	6819      	ldreq	r1, [r3, #0]
 8003dde:	685b      	ldreq	r3, [r3, #4]
 8003de0:	1809      	addeq	r1, r1, r0
 8003de2:	6021      	streq	r1, [r4, #0]
 8003de4:	6063      	str	r3, [r4, #4]
 8003de6:	6054      	str	r4, [r2, #4]
 8003de8:	e7cb      	b.n	8003d82 <_free_r+0x22>
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	20000478 	.word	0x20000478

08003df0 <sbrk_aligned>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	4e0f      	ldr	r6, [pc, #60]	@ (8003e30 <sbrk_aligned+0x40>)
 8003df4:	460c      	mov	r4, r1
 8003df6:	6831      	ldr	r1, [r6, #0]
 8003df8:	4605      	mov	r5, r0
 8003dfa:	b911      	cbnz	r1, 8003e02 <sbrk_aligned+0x12>
 8003dfc:	f000 fba8 	bl	8004550 <_sbrk_r>
 8003e00:	6030      	str	r0, [r6, #0]
 8003e02:	4621      	mov	r1, r4
 8003e04:	4628      	mov	r0, r5
 8003e06:	f000 fba3 	bl	8004550 <_sbrk_r>
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	d103      	bne.n	8003e16 <sbrk_aligned+0x26>
 8003e0e:	f04f 34ff 	mov.w	r4, #4294967295
 8003e12:	4620      	mov	r0, r4
 8003e14:	bd70      	pop	{r4, r5, r6, pc}
 8003e16:	1cc4      	adds	r4, r0, #3
 8003e18:	f024 0403 	bic.w	r4, r4, #3
 8003e1c:	42a0      	cmp	r0, r4
 8003e1e:	d0f8      	beq.n	8003e12 <sbrk_aligned+0x22>
 8003e20:	1a21      	subs	r1, r4, r0
 8003e22:	4628      	mov	r0, r5
 8003e24:	f000 fb94 	bl	8004550 <_sbrk_r>
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d1f2      	bne.n	8003e12 <sbrk_aligned+0x22>
 8003e2c:	e7ef      	b.n	8003e0e <sbrk_aligned+0x1e>
 8003e2e:	bf00      	nop
 8003e30:	20000474 	.word	0x20000474

08003e34 <_malloc_r>:
 8003e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e38:	1ccd      	adds	r5, r1, #3
 8003e3a:	f025 0503 	bic.w	r5, r5, #3
 8003e3e:	3508      	adds	r5, #8
 8003e40:	2d0c      	cmp	r5, #12
 8003e42:	bf38      	it	cc
 8003e44:	250c      	movcc	r5, #12
 8003e46:	2d00      	cmp	r5, #0
 8003e48:	4606      	mov	r6, r0
 8003e4a:	db01      	blt.n	8003e50 <_malloc_r+0x1c>
 8003e4c:	42a9      	cmp	r1, r5
 8003e4e:	d904      	bls.n	8003e5a <_malloc_r+0x26>
 8003e50:	230c      	movs	r3, #12
 8003e52:	6033      	str	r3, [r6, #0]
 8003e54:	2000      	movs	r0, #0
 8003e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f30 <_malloc_r+0xfc>
 8003e5e:	f000 f869 	bl	8003f34 <__malloc_lock>
 8003e62:	f8d8 3000 	ldr.w	r3, [r8]
 8003e66:	461c      	mov	r4, r3
 8003e68:	bb44      	cbnz	r4, 8003ebc <_malloc_r+0x88>
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7ff ffbf 	bl	8003df0 <sbrk_aligned>
 8003e72:	1c43      	adds	r3, r0, #1
 8003e74:	4604      	mov	r4, r0
 8003e76:	d158      	bne.n	8003f2a <_malloc_r+0xf6>
 8003e78:	f8d8 4000 	ldr.w	r4, [r8]
 8003e7c:	4627      	mov	r7, r4
 8003e7e:	2f00      	cmp	r7, #0
 8003e80:	d143      	bne.n	8003f0a <_malloc_r+0xd6>
 8003e82:	2c00      	cmp	r4, #0
 8003e84:	d04b      	beq.n	8003f1e <_malloc_r+0xea>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	4639      	mov	r1, r7
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	eb04 0903 	add.w	r9, r4, r3
 8003e90:	f000 fb5e 	bl	8004550 <_sbrk_r>
 8003e94:	4581      	cmp	r9, r0
 8003e96:	d142      	bne.n	8003f1e <_malloc_r+0xea>
 8003e98:	6821      	ldr	r1, [r4, #0]
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	1a6d      	subs	r5, r5, r1
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	f7ff ffa6 	bl	8003df0 <sbrk_aligned>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d03a      	beq.n	8003f1e <_malloc_r+0xea>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	442b      	add	r3, r5
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	f8d8 3000 	ldr.w	r3, [r8]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	bb62      	cbnz	r2, 8003f10 <_malloc_r+0xdc>
 8003eb6:	f8c8 7000 	str.w	r7, [r8]
 8003eba:	e00f      	b.n	8003edc <_malloc_r+0xa8>
 8003ebc:	6822      	ldr	r2, [r4, #0]
 8003ebe:	1b52      	subs	r2, r2, r5
 8003ec0:	d420      	bmi.n	8003f04 <_malloc_r+0xd0>
 8003ec2:	2a0b      	cmp	r2, #11
 8003ec4:	d917      	bls.n	8003ef6 <_malloc_r+0xc2>
 8003ec6:	1961      	adds	r1, r4, r5
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	6025      	str	r5, [r4, #0]
 8003ecc:	bf18      	it	ne
 8003ece:	6059      	strne	r1, [r3, #4]
 8003ed0:	6863      	ldr	r3, [r4, #4]
 8003ed2:	bf08      	it	eq
 8003ed4:	f8c8 1000 	streq.w	r1, [r8]
 8003ed8:	5162      	str	r2, [r4, r5]
 8003eda:	604b      	str	r3, [r1, #4]
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 f82f 	bl	8003f40 <__malloc_unlock>
 8003ee2:	f104 000b 	add.w	r0, r4, #11
 8003ee6:	1d23      	adds	r3, r4, #4
 8003ee8:	f020 0007 	bic.w	r0, r0, #7
 8003eec:	1ac2      	subs	r2, r0, r3
 8003eee:	bf1c      	itt	ne
 8003ef0:	1a1b      	subne	r3, r3, r0
 8003ef2:	50a3      	strne	r3, [r4, r2]
 8003ef4:	e7af      	b.n	8003e56 <_malloc_r+0x22>
 8003ef6:	6862      	ldr	r2, [r4, #4]
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	bf0c      	ite	eq
 8003efc:	f8c8 2000 	streq.w	r2, [r8]
 8003f00:	605a      	strne	r2, [r3, #4]
 8003f02:	e7eb      	b.n	8003edc <_malloc_r+0xa8>
 8003f04:	4623      	mov	r3, r4
 8003f06:	6864      	ldr	r4, [r4, #4]
 8003f08:	e7ae      	b.n	8003e68 <_malloc_r+0x34>
 8003f0a:	463c      	mov	r4, r7
 8003f0c:	687f      	ldr	r7, [r7, #4]
 8003f0e:	e7b6      	b.n	8003e7e <_malloc_r+0x4a>
 8003f10:	461a      	mov	r2, r3
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	42a3      	cmp	r3, r4
 8003f16:	d1fb      	bne.n	8003f10 <_malloc_r+0xdc>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6053      	str	r3, [r2, #4]
 8003f1c:	e7de      	b.n	8003edc <_malloc_r+0xa8>
 8003f1e:	230c      	movs	r3, #12
 8003f20:	4630      	mov	r0, r6
 8003f22:	6033      	str	r3, [r6, #0]
 8003f24:	f000 f80c 	bl	8003f40 <__malloc_unlock>
 8003f28:	e794      	b.n	8003e54 <_malloc_r+0x20>
 8003f2a:	6005      	str	r5, [r0, #0]
 8003f2c:	e7d6      	b.n	8003edc <_malloc_r+0xa8>
 8003f2e:	bf00      	nop
 8003f30:	20000478 	.word	0x20000478

08003f34 <__malloc_lock>:
 8003f34:	4801      	ldr	r0, [pc, #4]	@ (8003f3c <__malloc_lock+0x8>)
 8003f36:	f7ff bf03 	b.w	8003d40 <__retarget_lock_acquire_recursive>
 8003f3a:	bf00      	nop
 8003f3c:	20000470 	.word	0x20000470

08003f40 <__malloc_unlock>:
 8003f40:	4801      	ldr	r0, [pc, #4]	@ (8003f48 <__malloc_unlock+0x8>)
 8003f42:	f7ff befe 	b.w	8003d42 <__retarget_lock_release_recursive>
 8003f46:	bf00      	nop
 8003f48:	20000470 	.word	0x20000470

08003f4c <__ssputs_r>:
 8003f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f50:	461f      	mov	r7, r3
 8003f52:	688e      	ldr	r6, [r1, #8]
 8003f54:	4682      	mov	sl, r0
 8003f56:	42be      	cmp	r6, r7
 8003f58:	460c      	mov	r4, r1
 8003f5a:	4690      	mov	r8, r2
 8003f5c:	680b      	ldr	r3, [r1, #0]
 8003f5e:	d82d      	bhi.n	8003fbc <__ssputs_r+0x70>
 8003f60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f68:	d026      	beq.n	8003fb8 <__ssputs_r+0x6c>
 8003f6a:	6965      	ldr	r5, [r4, #20]
 8003f6c:	6909      	ldr	r1, [r1, #16]
 8003f6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f72:	eba3 0901 	sub.w	r9, r3, r1
 8003f76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f7a:	1c7b      	adds	r3, r7, #1
 8003f7c:	444b      	add	r3, r9
 8003f7e:	106d      	asrs	r5, r5, #1
 8003f80:	429d      	cmp	r5, r3
 8003f82:	bf38      	it	cc
 8003f84:	461d      	movcc	r5, r3
 8003f86:	0553      	lsls	r3, r2, #21
 8003f88:	d527      	bpl.n	8003fda <__ssputs_r+0x8e>
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	f7ff ff52 	bl	8003e34 <_malloc_r>
 8003f90:	4606      	mov	r6, r0
 8003f92:	b360      	cbz	r0, 8003fee <__ssputs_r+0xa2>
 8003f94:	464a      	mov	r2, r9
 8003f96:	6921      	ldr	r1, [r4, #16]
 8003f98:	f7ff fed4 	bl	8003d44 <memcpy>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa6:	81a3      	strh	r3, [r4, #12]
 8003fa8:	6126      	str	r6, [r4, #16]
 8003faa:	444e      	add	r6, r9
 8003fac:	6026      	str	r6, [r4, #0]
 8003fae:	463e      	mov	r6, r7
 8003fb0:	6165      	str	r5, [r4, #20]
 8003fb2:	eba5 0509 	sub.w	r5, r5, r9
 8003fb6:	60a5      	str	r5, [r4, #8]
 8003fb8:	42be      	cmp	r6, r7
 8003fba:	d900      	bls.n	8003fbe <__ssputs_r+0x72>
 8003fbc:	463e      	mov	r6, r7
 8003fbe:	4632      	mov	r2, r6
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	6820      	ldr	r0, [r4, #0]
 8003fc4:	f000 faaa 	bl	800451c <memmove>
 8003fc8:	2000      	movs	r0, #0
 8003fca:	68a3      	ldr	r3, [r4, #8]
 8003fcc:	1b9b      	subs	r3, r3, r6
 8003fce:	60a3      	str	r3, [r4, #8]
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	4433      	add	r3, r6
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fda:	462a      	mov	r2, r5
 8003fdc:	f000 fad6 	bl	800458c <_realloc_r>
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d1e0      	bne.n	8003fa8 <__ssputs_r+0x5c>
 8003fe6:	4650      	mov	r0, sl
 8003fe8:	6921      	ldr	r1, [r4, #16]
 8003fea:	f7ff feb9 	bl	8003d60 <_free_r>
 8003fee:	230c      	movs	r3, #12
 8003ff0:	f8ca 3000 	str.w	r3, [sl]
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ffe:	81a3      	strh	r3, [r4, #12]
 8004000:	e7e9      	b.n	8003fd6 <__ssputs_r+0x8a>
	...

08004004 <_svfiprintf_r>:
 8004004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004008:	4698      	mov	r8, r3
 800400a:	898b      	ldrh	r3, [r1, #12]
 800400c:	4607      	mov	r7, r0
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	460d      	mov	r5, r1
 8004012:	4614      	mov	r4, r2
 8004014:	b09d      	sub	sp, #116	@ 0x74
 8004016:	d510      	bpl.n	800403a <_svfiprintf_r+0x36>
 8004018:	690b      	ldr	r3, [r1, #16]
 800401a:	b973      	cbnz	r3, 800403a <_svfiprintf_r+0x36>
 800401c:	2140      	movs	r1, #64	@ 0x40
 800401e:	f7ff ff09 	bl	8003e34 <_malloc_r>
 8004022:	6028      	str	r0, [r5, #0]
 8004024:	6128      	str	r0, [r5, #16]
 8004026:	b930      	cbnz	r0, 8004036 <_svfiprintf_r+0x32>
 8004028:	230c      	movs	r3, #12
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	b01d      	add	sp, #116	@ 0x74
 8004032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004036:	2340      	movs	r3, #64	@ 0x40
 8004038:	616b      	str	r3, [r5, #20]
 800403a:	2300      	movs	r3, #0
 800403c:	9309      	str	r3, [sp, #36]	@ 0x24
 800403e:	2320      	movs	r3, #32
 8004040:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004044:	2330      	movs	r3, #48	@ 0x30
 8004046:	f04f 0901 	mov.w	r9, #1
 800404a:	f8cd 800c 	str.w	r8, [sp, #12]
 800404e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80041e8 <_svfiprintf_r+0x1e4>
 8004052:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004056:	4623      	mov	r3, r4
 8004058:	469a      	mov	sl, r3
 800405a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800405e:	b10a      	cbz	r2, 8004064 <_svfiprintf_r+0x60>
 8004060:	2a25      	cmp	r2, #37	@ 0x25
 8004062:	d1f9      	bne.n	8004058 <_svfiprintf_r+0x54>
 8004064:	ebba 0b04 	subs.w	fp, sl, r4
 8004068:	d00b      	beq.n	8004082 <_svfiprintf_r+0x7e>
 800406a:	465b      	mov	r3, fp
 800406c:	4622      	mov	r2, r4
 800406e:	4629      	mov	r1, r5
 8004070:	4638      	mov	r0, r7
 8004072:	f7ff ff6b 	bl	8003f4c <__ssputs_r>
 8004076:	3001      	adds	r0, #1
 8004078:	f000 80a7 	beq.w	80041ca <_svfiprintf_r+0x1c6>
 800407c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800407e:	445a      	add	r2, fp
 8004080:	9209      	str	r2, [sp, #36]	@ 0x24
 8004082:	f89a 3000 	ldrb.w	r3, [sl]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 809f 	beq.w	80041ca <_svfiprintf_r+0x1c6>
 800408c:	2300      	movs	r3, #0
 800408e:	f04f 32ff 	mov.w	r2, #4294967295
 8004092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004096:	f10a 0a01 	add.w	sl, sl, #1
 800409a:	9304      	str	r3, [sp, #16]
 800409c:	9307      	str	r3, [sp, #28]
 800409e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80040a4:	4654      	mov	r4, sl
 80040a6:	2205      	movs	r2, #5
 80040a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ac:	484e      	ldr	r0, [pc, #312]	@ (80041e8 <_svfiprintf_r+0x1e4>)
 80040ae:	f000 fa5f 	bl	8004570 <memchr>
 80040b2:	9a04      	ldr	r2, [sp, #16]
 80040b4:	b9d8      	cbnz	r0, 80040ee <_svfiprintf_r+0xea>
 80040b6:	06d0      	lsls	r0, r2, #27
 80040b8:	bf44      	itt	mi
 80040ba:	2320      	movmi	r3, #32
 80040bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040c0:	0711      	lsls	r1, r2, #28
 80040c2:	bf44      	itt	mi
 80040c4:	232b      	movmi	r3, #43	@ 0x2b
 80040c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040ca:	f89a 3000 	ldrb.w	r3, [sl]
 80040ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80040d0:	d015      	beq.n	80040fe <_svfiprintf_r+0xfa>
 80040d2:	4654      	mov	r4, sl
 80040d4:	2000      	movs	r0, #0
 80040d6:	f04f 0c0a 	mov.w	ip, #10
 80040da:	9a07      	ldr	r2, [sp, #28]
 80040dc:	4621      	mov	r1, r4
 80040de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040e2:	3b30      	subs	r3, #48	@ 0x30
 80040e4:	2b09      	cmp	r3, #9
 80040e6:	d94b      	bls.n	8004180 <_svfiprintf_r+0x17c>
 80040e8:	b1b0      	cbz	r0, 8004118 <_svfiprintf_r+0x114>
 80040ea:	9207      	str	r2, [sp, #28]
 80040ec:	e014      	b.n	8004118 <_svfiprintf_r+0x114>
 80040ee:	eba0 0308 	sub.w	r3, r0, r8
 80040f2:	fa09 f303 	lsl.w	r3, r9, r3
 80040f6:	4313      	orrs	r3, r2
 80040f8:	46a2      	mov	sl, r4
 80040fa:	9304      	str	r3, [sp, #16]
 80040fc:	e7d2      	b.n	80040a4 <_svfiprintf_r+0xa0>
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	1d19      	adds	r1, r3, #4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	9103      	str	r1, [sp, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	bfbb      	ittet	lt
 800410a:	425b      	neglt	r3, r3
 800410c:	f042 0202 	orrlt.w	r2, r2, #2
 8004110:	9307      	strge	r3, [sp, #28]
 8004112:	9307      	strlt	r3, [sp, #28]
 8004114:	bfb8      	it	lt
 8004116:	9204      	strlt	r2, [sp, #16]
 8004118:	7823      	ldrb	r3, [r4, #0]
 800411a:	2b2e      	cmp	r3, #46	@ 0x2e
 800411c:	d10a      	bne.n	8004134 <_svfiprintf_r+0x130>
 800411e:	7863      	ldrb	r3, [r4, #1]
 8004120:	2b2a      	cmp	r3, #42	@ 0x2a
 8004122:	d132      	bne.n	800418a <_svfiprintf_r+0x186>
 8004124:	9b03      	ldr	r3, [sp, #12]
 8004126:	3402      	adds	r4, #2
 8004128:	1d1a      	adds	r2, r3, #4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	9203      	str	r2, [sp, #12]
 800412e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004132:	9305      	str	r3, [sp, #20]
 8004134:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80041ec <_svfiprintf_r+0x1e8>
 8004138:	2203      	movs	r2, #3
 800413a:	4650      	mov	r0, sl
 800413c:	7821      	ldrb	r1, [r4, #0]
 800413e:	f000 fa17 	bl	8004570 <memchr>
 8004142:	b138      	cbz	r0, 8004154 <_svfiprintf_r+0x150>
 8004144:	2240      	movs	r2, #64	@ 0x40
 8004146:	9b04      	ldr	r3, [sp, #16]
 8004148:	eba0 000a 	sub.w	r0, r0, sl
 800414c:	4082      	lsls	r2, r0
 800414e:	4313      	orrs	r3, r2
 8004150:	3401      	adds	r4, #1
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004158:	2206      	movs	r2, #6
 800415a:	4825      	ldr	r0, [pc, #148]	@ (80041f0 <_svfiprintf_r+0x1ec>)
 800415c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004160:	f000 fa06 	bl	8004570 <memchr>
 8004164:	2800      	cmp	r0, #0
 8004166:	d036      	beq.n	80041d6 <_svfiprintf_r+0x1d2>
 8004168:	4b22      	ldr	r3, [pc, #136]	@ (80041f4 <_svfiprintf_r+0x1f0>)
 800416a:	bb1b      	cbnz	r3, 80041b4 <_svfiprintf_r+0x1b0>
 800416c:	9b03      	ldr	r3, [sp, #12]
 800416e:	3307      	adds	r3, #7
 8004170:	f023 0307 	bic.w	r3, r3, #7
 8004174:	3308      	adds	r3, #8
 8004176:	9303      	str	r3, [sp, #12]
 8004178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800417a:	4433      	add	r3, r6
 800417c:	9309      	str	r3, [sp, #36]	@ 0x24
 800417e:	e76a      	b.n	8004056 <_svfiprintf_r+0x52>
 8004180:	460c      	mov	r4, r1
 8004182:	2001      	movs	r0, #1
 8004184:	fb0c 3202 	mla	r2, ip, r2, r3
 8004188:	e7a8      	b.n	80040dc <_svfiprintf_r+0xd8>
 800418a:	2300      	movs	r3, #0
 800418c:	f04f 0c0a 	mov.w	ip, #10
 8004190:	4619      	mov	r1, r3
 8004192:	3401      	adds	r4, #1
 8004194:	9305      	str	r3, [sp, #20]
 8004196:	4620      	mov	r0, r4
 8004198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800419c:	3a30      	subs	r2, #48	@ 0x30
 800419e:	2a09      	cmp	r2, #9
 80041a0:	d903      	bls.n	80041aa <_svfiprintf_r+0x1a6>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0c6      	beq.n	8004134 <_svfiprintf_r+0x130>
 80041a6:	9105      	str	r1, [sp, #20]
 80041a8:	e7c4      	b.n	8004134 <_svfiprintf_r+0x130>
 80041aa:	4604      	mov	r4, r0
 80041ac:	2301      	movs	r3, #1
 80041ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80041b2:	e7f0      	b.n	8004196 <_svfiprintf_r+0x192>
 80041b4:	ab03      	add	r3, sp, #12
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	462a      	mov	r2, r5
 80041ba:	4638      	mov	r0, r7
 80041bc:	4b0e      	ldr	r3, [pc, #56]	@ (80041f8 <_svfiprintf_r+0x1f4>)
 80041be:	a904      	add	r1, sp, #16
 80041c0:	f3af 8000 	nop.w
 80041c4:	1c42      	adds	r2, r0, #1
 80041c6:	4606      	mov	r6, r0
 80041c8:	d1d6      	bne.n	8004178 <_svfiprintf_r+0x174>
 80041ca:	89ab      	ldrh	r3, [r5, #12]
 80041cc:	065b      	lsls	r3, r3, #25
 80041ce:	f53f af2d 	bmi.w	800402c <_svfiprintf_r+0x28>
 80041d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041d4:	e72c      	b.n	8004030 <_svfiprintf_r+0x2c>
 80041d6:	ab03      	add	r3, sp, #12
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	462a      	mov	r2, r5
 80041dc:	4638      	mov	r0, r7
 80041de:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <_svfiprintf_r+0x1f4>)
 80041e0:	a904      	add	r1, sp, #16
 80041e2:	f000 f87d 	bl	80042e0 <_printf_i>
 80041e6:	e7ed      	b.n	80041c4 <_svfiprintf_r+0x1c0>
 80041e8:	08005416 	.word	0x08005416
 80041ec:	0800541c 	.word	0x0800541c
 80041f0:	08005420 	.word	0x08005420
 80041f4:	00000000 	.word	0x00000000
 80041f8:	08003f4d 	.word	0x08003f4d

080041fc <_printf_common>:
 80041fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004200:	4616      	mov	r6, r2
 8004202:	4698      	mov	r8, r3
 8004204:	688a      	ldr	r2, [r1, #8]
 8004206:	690b      	ldr	r3, [r1, #16]
 8004208:	4607      	mov	r7, r0
 800420a:	4293      	cmp	r3, r2
 800420c:	bfb8      	it	lt
 800420e:	4613      	movlt	r3, r2
 8004210:	6033      	str	r3, [r6, #0]
 8004212:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004216:	460c      	mov	r4, r1
 8004218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800421c:	b10a      	cbz	r2, 8004222 <_printf_common+0x26>
 800421e:	3301      	adds	r3, #1
 8004220:	6033      	str	r3, [r6, #0]
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	0699      	lsls	r1, r3, #26
 8004226:	bf42      	ittt	mi
 8004228:	6833      	ldrmi	r3, [r6, #0]
 800422a:	3302      	addmi	r3, #2
 800422c:	6033      	strmi	r3, [r6, #0]
 800422e:	6825      	ldr	r5, [r4, #0]
 8004230:	f015 0506 	ands.w	r5, r5, #6
 8004234:	d106      	bne.n	8004244 <_printf_common+0x48>
 8004236:	f104 0a19 	add.w	sl, r4, #25
 800423a:	68e3      	ldr	r3, [r4, #12]
 800423c:	6832      	ldr	r2, [r6, #0]
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	42ab      	cmp	r3, r5
 8004242:	dc2b      	bgt.n	800429c <_printf_common+0xa0>
 8004244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	3b00      	subs	r3, #0
 800424c:	bf18      	it	ne
 800424e:	2301      	movne	r3, #1
 8004250:	0692      	lsls	r2, r2, #26
 8004252:	d430      	bmi.n	80042b6 <_printf_common+0xba>
 8004254:	4641      	mov	r1, r8
 8004256:	4638      	mov	r0, r7
 8004258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800425c:	47c8      	blx	r9
 800425e:	3001      	adds	r0, #1
 8004260:	d023      	beq.n	80042aa <_printf_common+0xae>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	6922      	ldr	r2, [r4, #16]
 8004266:	f003 0306 	and.w	r3, r3, #6
 800426a:	2b04      	cmp	r3, #4
 800426c:	bf14      	ite	ne
 800426e:	2500      	movne	r5, #0
 8004270:	6833      	ldreq	r3, [r6, #0]
 8004272:	f04f 0600 	mov.w	r6, #0
 8004276:	bf08      	it	eq
 8004278:	68e5      	ldreq	r5, [r4, #12]
 800427a:	f104 041a 	add.w	r4, r4, #26
 800427e:	bf08      	it	eq
 8004280:	1aed      	subeq	r5, r5, r3
 8004282:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004286:	bf08      	it	eq
 8004288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800428c:	4293      	cmp	r3, r2
 800428e:	bfc4      	itt	gt
 8004290:	1a9b      	subgt	r3, r3, r2
 8004292:	18ed      	addgt	r5, r5, r3
 8004294:	42b5      	cmp	r5, r6
 8004296:	d11a      	bne.n	80042ce <_printf_common+0xd2>
 8004298:	2000      	movs	r0, #0
 800429a:	e008      	b.n	80042ae <_printf_common+0xb2>
 800429c:	2301      	movs	r3, #1
 800429e:	4652      	mov	r2, sl
 80042a0:	4641      	mov	r1, r8
 80042a2:	4638      	mov	r0, r7
 80042a4:	47c8      	blx	r9
 80042a6:	3001      	adds	r0, #1
 80042a8:	d103      	bne.n	80042b2 <_printf_common+0xb6>
 80042aa:	f04f 30ff 	mov.w	r0, #4294967295
 80042ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b2:	3501      	adds	r5, #1
 80042b4:	e7c1      	b.n	800423a <_printf_common+0x3e>
 80042b6:	2030      	movs	r0, #48	@ 0x30
 80042b8:	18e1      	adds	r1, r4, r3
 80042ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042c4:	4422      	add	r2, r4
 80042c6:	3302      	adds	r3, #2
 80042c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042cc:	e7c2      	b.n	8004254 <_printf_common+0x58>
 80042ce:	2301      	movs	r3, #1
 80042d0:	4622      	mov	r2, r4
 80042d2:	4641      	mov	r1, r8
 80042d4:	4638      	mov	r0, r7
 80042d6:	47c8      	blx	r9
 80042d8:	3001      	adds	r0, #1
 80042da:	d0e6      	beq.n	80042aa <_printf_common+0xae>
 80042dc:	3601      	adds	r6, #1
 80042de:	e7d9      	b.n	8004294 <_printf_common+0x98>

080042e0 <_printf_i>:
 80042e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	7e0f      	ldrb	r7, [r1, #24]
 80042e6:	4691      	mov	r9, r2
 80042e8:	2f78      	cmp	r7, #120	@ 0x78
 80042ea:	4680      	mov	r8, r0
 80042ec:	460c      	mov	r4, r1
 80042ee:	469a      	mov	sl, r3
 80042f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042f6:	d807      	bhi.n	8004308 <_printf_i+0x28>
 80042f8:	2f62      	cmp	r7, #98	@ 0x62
 80042fa:	d80a      	bhi.n	8004312 <_printf_i+0x32>
 80042fc:	2f00      	cmp	r7, #0
 80042fe:	f000 80d1 	beq.w	80044a4 <_printf_i+0x1c4>
 8004302:	2f58      	cmp	r7, #88	@ 0x58
 8004304:	f000 80b8 	beq.w	8004478 <_printf_i+0x198>
 8004308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800430c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004310:	e03a      	b.n	8004388 <_printf_i+0xa8>
 8004312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004316:	2b15      	cmp	r3, #21
 8004318:	d8f6      	bhi.n	8004308 <_printf_i+0x28>
 800431a:	a101      	add	r1, pc, #4	@ (adr r1, 8004320 <_printf_i+0x40>)
 800431c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004320:	08004379 	.word	0x08004379
 8004324:	0800438d 	.word	0x0800438d
 8004328:	08004309 	.word	0x08004309
 800432c:	08004309 	.word	0x08004309
 8004330:	08004309 	.word	0x08004309
 8004334:	08004309 	.word	0x08004309
 8004338:	0800438d 	.word	0x0800438d
 800433c:	08004309 	.word	0x08004309
 8004340:	08004309 	.word	0x08004309
 8004344:	08004309 	.word	0x08004309
 8004348:	08004309 	.word	0x08004309
 800434c:	0800448b 	.word	0x0800448b
 8004350:	080043b7 	.word	0x080043b7
 8004354:	08004445 	.word	0x08004445
 8004358:	08004309 	.word	0x08004309
 800435c:	08004309 	.word	0x08004309
 8004360:	080044ad 	.word	0x080044ad
 8004364:	08004309 	.word	0x08004309
 8004368:	080043b7 	.word	0x080043b7
 800436c:	08004309 	.word	0x08004309
 8004370:	08004309 	.word	0x08004309
 8004374:	0800444d 	.word	0x0800444d
 8004378:	6833      	ldr	r3, [r6, #0]
 800437a:	1d1a      	adds	r2, r3, #4
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6032      	str	r2, [r6, #0]
 8004380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004388:	2301      	movs	r3, #1
 800438a:	e09c      	b.n	80044c6 <_printf_i+0x1e6>
 800438c:	6833      	ldr	r3, [r6, #0]
 800438e:	6820      	ldr	r0, [r4, #0]
 8004390:	1d19      	adds	r1, r3, #4
 8004392:	6031      	str	r1, [r6, #0]
 8004394:	0606      	lsls	r6, r0, #24
 8004396:	d501      	bpl.n	800439c <_printf_i+0xbc>
 8004398:	681d      	ldr	r5, [r3, #0]
 800439a:	e003      	b.n	80043a4 <_printf_i+0xc4>
 800439c:	0645      	lsls	r5, r0, #25
 800439e:	d5fb      	bpl.n	8004398 <_printf_i+0xb8>
 80043a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043a4:	2d00      	cmp	r5, #0
 80043a6:	da03      	bge.n	80043b0 <_printf_i+0xd0>
 80043a8:	232d      	movs	r3, #45	@ 0x2d
 80043aa:	426d      	negs	r5, r5
 80043ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b0:	230a      	movs	r3, #10
 80043b2:	4858      	ldr	r0, [pc, #352]	@ (8004514 <_printf_i+0x234>)
 80043b4:	e011      	b.n	80043da <_printf_i+0xfa>
 80043b6:	6821      	ldr	r1, [r4, #0]
 80043b8:	6833      	ldr	r3, [r6, #0]
 80043ba:	0608      	lsls	r0, r1, #24
 80043bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80043c0:	d402      	bmi.n	80043c8 <_printf_i+0xe8>
 80043c2:	0649      	lsls	r1, r1, #25
 80043c4:	bf48      	it	mi
 80043c6:	b2ad      	uxthmi	r5, r5
 80043c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80043ca:	6033      	str	r3, [r6, #0]
 80043cc:	bf14      	ite	ne
 80043ce:	230a      	movne	r3, #10
 80043d0:	2308      	moveq	r3, #8
 80043d2:	4850      	ldr	r0, [pc, #320]	@ (8004514 <_printf_i+0x234>)
 80043d4:	2100      	movs	r1, #0
 80043d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043da:	6866      	ldr	r6, [r4, #4]
 80043dc:	2e00      	cmp	r6, #0
 80043de:	60a6      	str	r6, [r4, #8]
 80043e0:	db05      	blt.n	80043ee <_printf_i+0x10e>
 80043e2:	6821      	ldr	r1, [r4, #0]
 80043e4:	432e      	orrs	r6, r5
 80043e6:	f021 0104 	bic.w	r1, r1, #4
 80043ea:	6021      	str	r1, [r4, #0]
 80043ec:	d04b      	beq.n	8004486 <_printf_i+0x1a6>
 80043ee:	4616      	mov	r6, r2
 80043f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80043f4:	fb03 5711 	mls	r7, r3, r1, r5
 80043f8:	5dc7      	ldrb	r7, [r0, r7]
 80043fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043fe:	462f      	mov	r7, r5
 8004400:	42bb      	cmp	r3, r7
 8004402:	460d      	mov	r5, r1
 8004404:	d9f4      	bls.n	80043f0 <_printf_i+0x110>
 8004406:	2b08      	cmp	r3, #8
 8004408:	d10b      	bne.n	8004422 <_printf_i+0x142>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	07df      	lsls	r7, r3, #31
 800440e:	d508      	bpl.n	8004422 <_printf_i+0x142>
 8004410:	6923      	ldr	r3, [r4, #16]
 8004412:	6861      	ldr	r1, [r4, #4]
 8004414:	4299      	cmp	r1, r3
 8004416:	bfde      	ittt	le
 8004418:	2330      	movle	r3, #48	@ 0x30
 800441a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800441e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004422:	1b92      	subs	r2, r2, r6
 8004424:	6122      	str	r2, [r4, #16]
 8004426:	464b      	mov	r3, r9
 8004428:	4621      	mov	r1, r4
 800442a:	4640      	mov	r0, r8
 800442c:	f8cd a000 	str.w	sl, [sp]
 8004430:	aa03      	add	r2, sp, #12
 8004432:	f7ff fee3 	bl	80041fc <_printf_common>
 8004436:	3001      	adds	r0, #1
 8004438:	d14a      	bne.n	80044d0 <_printf_i+0x1f0>
 800443a:	f04f 30ff 	mov.w	r0, #4294967295
 800443e:	b004      	add	sp, #16
 8004440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	f043 0320 	orr.w	r3, r3, #32
 800444a:	6023      	str	r3, [r4, #0]
 800444c:	2778      	movs	r7, #120	@ 0x78
 800444e:	4832      	ldr	r0, [pc, #200]	@ (8004518 <_printf_i+0x238>)
 8004450:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	6831      	ldr	r1, [r6, #0]
 8004458:	061f      	lsls	r7, r3, #24
 800445a:	f851 5b04 	ldr.w	r5, [r1], #4
 800445e:	d402      	bmi.n	8004466 <_printf_i+0x186>
 8004460:	065f      	lsls	r7, r3, #25
 8004462:	bf48      	it	mi
 8004464:	b2ad      	uxthmi	r5, r5
 8004466:	6031      	str	r1, [r6, #0]
 8004468:	07d9      	lsls	r1, r3, #31
 800446a:	bf44      	itt	mi
 800446c:	f043 0320 	orrmi.w	r3, r3, #32
 8004470:	6023      	strmi	r3, [r4, #0]
 8004472:	b11d      	cbz	r5, 800447c <_printf_i+0x19c>
 8004474:	2310      	movs	r3, #16
 8004476:	e7ad      	b.n	80043d4 <_printf_i+0xf4>
 8004478:	4826      	ldr	r0, [pc, #152]	@ (8004514 <_printf_i+0x234>)
 800447a:	e7e9      	b.n	8004450 <_printf_i+0x170>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	f023 0320 	bic.w	r3, r3, #32
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	e7f6      	b.n	8004474 <_printf_i+0x194>
 8004486:	4616      	mov	r6, r2
 8004488:	e7bd      	b.n	8004406 <_printf_i+0x126>
 800448a:	6833      	ldr	r3, [r6, #0]
 800448c:	6825      	ldr	r5, [r4, #0]
 800448e:	1d18      	adds	r0, r3, #4
 8004490:	6961      	ldr	r1, [r4, #20]
 8004492:	6030      	str	r0, [r6, #0]
 8004494:	062e      	lsls	r6, r5, #24
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	d501      	bpl.n	800449e <_printf_i+0x1be>
 800449a:	6019      	str	r1, [r3, #0]
 800449c:	e002      	b.n	80044a4 <_printf_i+0x1c4>
 800449e:	0668      	lsls	r0, r5, #25
 80044a0:	d5fb      	bpl.n	800449a <_printf_i+0x1ba>
 80044a2:	8019      	strh	r1, [r3, #0]
 80044a4:	2300      	movs	r3, #0
 80044a6:	4616      	mov	r6, r2
 80044a8:	6123      	str	r3, [r4, #16]
 80044aa:	e7bc      	b.n	8004426 <_printf_i+0x146>
 80044ac:	6833      	ldr	r3, [r6, #0]
 80044ae:	2100      	movs	r1, #0
 80044b0:	1d1a      	adds	r2, r3, #4
 80044b2:	6032      	str	r2, [r6, #0]
 80044b4:	681e      	ldr	r6, [r3, #0]
 80044b6:	6862      	ldr	r2, [r4, #4]
 80044b8:	4630      	mov	r0, r6
 80044ba:	f000 f859 	bl	8004570 <memchr>
 80044be:	b108      	cbz	r0, 80044c4 <_printf_i+0x1e4>
 80044c0:	1b80      	subs	r0, r0, r6
 80044c2:	6060      	str	r0, [r4, #4]
 80044c4:	6863      	ldr	r3, [r4, #4]
 80044c6:	6123      	str	r3, [r4, #16]
 80044c8:	2300      	movs	r3, #0
 80044ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044ce:	e7aa      	b.n	8004426 <_printf_i+0x146>
 80044d0:	4632      	mov	r2, r6
 80044d2:	4649      	mov	r1, r9
 80044d4:	4640      	mov	r0, r8
 80044d6:	6923      	ldr	r3, [r4, #16]
 80044d8:	47d0      	blx	sl
 80044da:	3001      	adds	r0, #1
 80044dc:	d0ad      	beq.n	800443a <_printf_i+0x15a>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	079b      	lsls	r3, r3, #30
 80044e2:	d413      	bmi.n	800450c <_printf_i+0x22c>
 80044e4:	68e0      	ldr	r0, [r4, #12]
 80044e6:	9b03      	ldr	r3, [sp, #12]
 80044e8:	4298      	cmp	r0, r3
 80044ea:	bfb8      	it	lt
 80044ec:	4618      	movlt	r0, r3
 80044ee:	e7a6      	b.n	800443e <_printf_i+0x15e>
 80044f0:	2301      	movs	r3, #1
 80044f2:	4632      	mov	r2, r6
 80044f4:	4649      	mov	r1, r9
 80044f6:	4640      	mov	r0, r8
 80044f8:	47d0      	blx	sl
 80044fa:	3001      	adds	r0, #1
 80044fc:	d09d      	beq.n	800443a <_printf_i+0x15a>
 80044fe:	3501      	adds	r5, #1
 8004500:	68e3      	ldr	r3, [r4, #12]
 8004502:	9903      	ldr	r1, [sp, #12]
 8004504:	1a5b      	subs	r3, r3, r1
 8004506:	42ab      	cmp	r3, r5
 8004508:	dcf2      	bgt.n	80044f0 <_printf_i+0x210>
 800450a:	e7eb      	b.n	80044e4 <_printf_i+0x204>
 800450c:	2500      	movs	r5, #0
 800450e:	f104 0619 	add.w	r6, r4, #25
 8004512:	e7f5      	b.n	8004500 <_printf_i+0x220>
 8004514:	08005427 	.word	0x08005427
 8004518:	08005438 	.word	0x08005438

0800451c <memmove>:
 800451c:	4288      	cmp	r0, r1
 800451e:	b510      	push	{r4, lr}
 8004520:	eb01 0402 	add.w	r4, r1, r2
 8004524:	d902      	bls.n	800452c <memmove+0x10>
 8004526:	4284      	cmp	r4, r0
 8004528:	4623      	mov	r3, r4
 800452a:	d807      	bhi.n	800453c <memmove+0x20>
 800452c:	1e43      	subs	r3, r0, #1
 800452e:	42a1      	cmp	r1, r4
 8004530:	d008      	beq.n	8004544 <memmove+0x28>
 8004532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800453a:	e7f8      	b.n	800452e <memmove+0x12>
 800453c:	4601      	mov	r1, r0
 800453e:	4402      	add	r2, r0
 8004540:	428a      	cmp	r2, r1
 8004542:	d100      	bne.n	8004546 <memmove+0x2a>
 8004544:	bd10      	pop	{r4, pc}
 8004546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800454a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800454e:	e7f7      	b.n	8004540 <memmove+0x24>

08004550 <_sbrk_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	2300      	movs	r3, #0
 8004554:	4d05      	ldr	r5, [pc, #20]	@ (800456c <_sbrk_r+0x1c>)
 8004556:	4604      	mov	r4, r0
 8004558:	4608      	mov	r0, r1
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	f7fd f85e 	bl	800161c <_sbrk>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_sbrk_r+0x1a>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	b103      	cbz	r3, 800456a <_sbrk_r+0x1a>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	2000046c 	.word	0x2000046c

08004570 <memchr>:
 8004570:	4603      	mov	r3, r0
 8004572:	b510      	push	{r4, lr}
 8004574:	b2c9      	uxtb	r1, r1
 8004576:	4402      	add	r2, r0
 8004578:	4293      	cmp	r3, r2
 800457a:	4618      	mov	r0, r3
 800457c:	d101      	bne.n	8004582 <memchr+0x12>
 800457e:	2000      	movs	r0, #0
 8004580:	e003      	b.n	800458a <memchr+0x1a>
 8004582:	7804      	ldrb	r4, [r0, #0]
 8004584:	3301      	adds	r3, #1
 8004586:	428c      	cmp	r4, r1
 8004588:	d1f6      	bne.n	8004578 <memchr+0x8>
 800458a:	bd10      	pop	{r4, pc}

0800458c <_realloc_r>:
 800458c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004590:	4607      	mov	r7, r0
 8004592:	4614      	mov	r4, r2
 8004594:	460d      	mov	r5, r1
 8004596:	b921      	cbnz	r1, 80045a2 <_realloc_r+0x16>
 8004598:	4611      	mov	r1, r2
 800459a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800459e:	f7ff bc49 	b.w	8003e34 <_malloc_r>
 80045a2:	b92a      	cbnz	r2, 80045b0 <_realloc_r+0x24>
 80045a4:	f7ff fbdc 	bl	8003d60 <_free_r>
 80045a8:	4625      	mov	r5, r4
 80045aa:	4628      	mov	r0, r5
 80045ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045b0:	f000 f81a 	bl	80045e8 <_malloc_usable_size_r>
 80045b4:	4284      	cmp	r4, r0
 80045b6:	4606      	mov	r6, r0
 80045b8:	d802      	bhi.n	80045c0 <_realloc_r+0x34>
 80045ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045be:	d8f4      	bhi.n	80045aa <_realloc_r+0x1e>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4638      	mov	r0, r7
 80045c4:	f7ff fc36 	bl	8003e34 <_malloc_r>
 80045c8:	4680      	mov	r8, r0
 80045ca:	b908      	cbnz	r0, 80045d0 <_realloc_r+0x44>
 80045cc:	4645      	mov	r5, r8
 80045ce:	e7ec      	b.n	80045aa <_realloc_r+0x1e>
 80045d0:	42b4      	cmp	r4, r6
 80045d2:	4622      	mov	r2, r4
 80045d4:	4629      	mov	r1, r5
 80045d6:	bf28      	it	cs
 80045d8:	4632      	movcs	r2, r6
 80045da:	f7ff fbb3 	bl	8003d44 <memcpy>
 80045de:	4629      	mov	r1, r5
 80045e0:	4638      	mov	r0, r7
 80045e2:	f7ff fbbd 	bl	8003d60 <_free_r>
 80045e6:	e7f1      	b.n	80045cc <_realloc_r+0x40>

080045e8 <_malloc_usable_size_r>:
 80045e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ec:	1f18      	subs	r0, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfbc      	itt	lt
 80045f2:	580b      	ldrlt	r3, [r1, r0]
 80045f4:	18c0      	addlt	r0, r0, r3
 80045f6:	4770      	bx	lr

080045f8 <_init>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	bf00      	nop
 80045fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fe:	bc08      	pop	{r3}
 8004600:	469e      	mov	lr, r3
 8004602:	4770      	bx	lr

08004604 <_fini>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr
