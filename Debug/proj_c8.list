
proj_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  08003c40  08003c40  00004c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004434  08004434  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004434  08004434  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004434  08004434  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004434  08004434  00005434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004438  08004438  00005438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800443c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000060  0800449c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  0800449c  00006474  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc97  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d70  00000000  00000000  00011d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00013a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a75  00000000  00000000  00014800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f81  00000000  00000000  00015275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f955  00000000  00000000  0002d1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b432  00000000  00000000  0003cb4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7f7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000c7fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cbd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c28 	.word	0x08003c28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003c28 	.word	0x08003c28

0800014c <setSpeed>:
static bool goingForward = false;
static bool goingBackward = false;
static int currentSpeed = BASE_SPEED;

void setSpeed(int speed1, int speed2)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed1);
 8000156:	4b06      	ldr	r3, [pc, #24]	@ (8000170 <setSpeed+0x24>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	687a      	ldr	r2, [r7, #4]
 800015c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed2);
 800015e:	4b04      	ldr	r3, [pc, #16]	@ (8000170 <setSpeed+0x24>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	683a      	ldr	r2, [r7, #0]
 8000164:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	200000d0 	.word	0x200000d0

08000174 <setDirections>:

void setDirections(bool in1, bool in2, bool in3, bool in4)
{
 8000174:	b590      	push	{r4, r7, lr}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	4604      	mov	r4, r0
 800017c:	4608      	mov	r0, r1
 800017e:	4611      	mov	r1, r2
 8000180:	461a      	mov	r2, r3
 8000182:	4623      	mov	r3, r4
 8000184:	71fb      	strb	r3, [r7, #7]
 8000186:	4603      	mov	r3, r0
 8000188:	71bb      	strb	r3, [r7, #6]
 800018a:	460b      	mov	r3, r1
 800018c:	717b      	strb	r3, [r7, #5]
 800018e:	4613      	mov	r3, r2
 8000190:	713b      	strb	r3, [r7, #4]
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, in1);
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	461a      	mov	r2, r3
 8000196:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800019a:	480d      	ldr	r0, [pc, #52]	@ (80001d0 <setDirections+0x5c>)
 800019c:	f001 fb29 	bl	80017f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, in2);
 80001a0:	79bb      	ldrb	r3, [r7, #6]
 80001a2:	461a      	mov	r2, r3
 80001a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001a8:	4809      	ldr	r0, [pc, #36]	@ (80001d0 <setDirections+0x5c>)
 80001aa:	f001 fb22 	bl	80017f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, in3);
 80001ae:	797b      	ldrb	r3, [r7, #5]
 80001b0:	461a      	mov	r2, r3
 80001b2:	2102      	movs	r1, #2
 80001b4:	4806      	ldr	r0, [pc, #24]	@ (80001d0 <setDirections+0x5c>)
 80001b6:	f001 fb1c 	bl	80017f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, in4);
 80001ba:	793b      	ldrb	r3, [r7, #4]
 80001bc:	461a      	mov	r2, r3
 80001be:	2101      	movs	r1, #1
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <setDirections+0x5c>)
 80001c2:	f001 fb16 	bl	80017f2 <HAL_GPIO_WritePin>
}
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd90      	pop	{r4, r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00

080001d4 <resetDirection>:

void resetDirection()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  // wcześniej inny kierunek
  stop();         // reset silników
 80001d8:	f000 f902 	bl	80003e0 <stop>
  HAL_Delay(150); // odczekanie
 80001dc:	2096      	movs	r0, #150	@ 0x96
 80001de:	f001 f865 	bl	80012ac <HAL_Delay>
  currentSpeed = BASE_SPEED;
 80001e2:	4b02      	ldr	r3, [pc, #8]	@ (80001ec <resetDirection+0x18>)
 80001e4:	2232      	movs	r2, #50	@ 0x32
 80001e6:	601a      	str	r2, [r3, #0]
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <toggleTurnLeft>:

void toggleTurnLeft()
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  if (turningRight)
 80001f4:	4b18      	ldr	r3, [pc, #96]	@ (8000258 <toggleTurnLeft+0x68>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d002      	beq.n	8000202 <toggleTurnLeft+0x12>
  {
    // przeciwny kierunek zatrzymuje pojazd
    stop();
 80001fc:	f000 f8f0 	bl	80003e0 <stop>
    return;
 8000200:	e029      	b.n	8000256 <toggleTurnLeft+0x66>
  }

  else if (turningLeft)
 8000202:	4b16      	ldr	r3, [pc, #88]	@ (800025c <toggleTurnLeft+0x6c>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d009      	beq.n	800021e <toggleTurnLeft+0x2e>
  {
    if (currentSpeed + SPEED_INCR <= 99)
 800020a:	4b15      	ldr	r3, [pc, #84]	@ (8000260 <toggleTurnLeft+0x70>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b59      	cmp	r3, #89	@ 0x59
 8000210:	dc07      	bgt.n	8000222 <toggleTurnLeft+0x32>
    {
      currentSpeed += SPEED_INCR;
 8000212:	4b13      	ldr	r3, [pc, #76]	@ (8000260 <toggleTurnLeft+0x70>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	330a      	adds	r3, #10
 8000218:	4a11      	ldr	r2, [pc, #68]	@ (8000260 <toggleTurnLeft+0x70>)
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	e001      	b.n	8000222 <toggleTurnLeft+0x32>
    }
  }
  else
  {
    resetDirection();
 800021e:	f7ff ffd9 	bl	80001d4 <resetDirection>
  }

  setSpeed(currentSpeed, currentSpeed);
 8000222:	4b0f      	ldr	r3, [pc, #60]	@ (8000260 <toggleTurnLeft+0x70>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a0e      	ldr	r2, [pc, #56]	@ (8000260 <toggleTurnLeft+0x70>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	4611      	mov	r1, r2
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ff8d 	bl	800014c <setSpeed>
  turningLeft = true;
 8000232:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <toggleTurnLeft+0x6c>)
 8000234:	2201      	movs	r2, #1
 8000236:	701a      	strb	r2, [r3, #0]
  turningRight = false;
 8000238:	4b07      	ldr	r3, [pc, #28]	@ (8000258 <toggleTurnLeft+0x68>)
 800023a:	2200      	movs	r2, #0
 800023c:	701a      	strb	r2, [r3, #0]
  goingForward = false;
 800023e:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <toggleTurnLeft+0x74>)
 8000240:	2200      	movs	r2, #0
 8000242:	701a      	strb	r2, [r3, #0]
  goingBackward = false;
 8000244:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <toggleTurnLeft+0x78>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]

  // lewy silnik do tyłu
  // prawy silnik do przodu
  setDirections(false, true, true, false);
 800024a:	2300      	movs	r3, #0
 800024c:	2201      	movs	r2, #1
 800024e:	2101      	movs	r1, #1
 8000250:	2000      	movs	r0, #0
 8000252:	f7ff ff8f 	bl	8000174 <setDirections>
}
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000119 	.word	0x20000119
 800025c:	20000118 	.word	0x20000118
 8000260:	20000000 	.word	0x20000000
 8000264:	2000011a 	.word	0x2000011a
 8000268:	2000011b 	.word	0x2000011b

0800026c <toggleTurnRight>:

void toggleTurnRight()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  if (turningLeft)
 8000270:	4b18      	ldr	r3, [pc, #96]	@ (80002d4 <toggleTurnRight+0x68>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d002      	beq.n	800027e <toggleTurnRight+0x12>
  {
    // przeciwny kierunek zatrzymuje pojazd
    stop();
 8000278:	f000 f8b2 	bl	80003e0 <stop>
    return;
 800027c:	e029      	b.n	80002d2 <toggleTurnRight+0x66>
  }

  else if (turningRight)
 800027e:	4b16      	ldr	r3, [pc, #88]	@ (80002d8 <toggleTurnRight+0x6c>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d009      	beq.n	800029a <toggleTurnRight+0x2e>
  {
    if (currentSpeed + SPEED_INCR <= 99)
 8000286:	4b15      	ldr	r3, [pc, #84]	@ (80002dc <toggleTurnRight+0x70>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b59      	cmp	r3, #89	@ 0x59
 800028c:	dc07      	bgt.n	800029e <toggleTurnRight+0x32>
    {
      currentSpeed += SPEED_INCR;
 800028e:	4b13      	ldr	r3, [pc, #76]	@ (80002dc <toggleTurnRight+0x70>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	330a      	adds	r3, #10
 8000294:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <toggleTurnRight+0x70>)
 8000296:	6013      	str	r3, [r2, #0]
 8000298:	e001      	b.n	800029e <toggleTurnRight+0x32>
    }
  }
  else
  {
    resetDirection();
 800029a:	f7ff ff9b 	bl	80001d4 <resetDirection>
  }

  setSpeed(currentSpeed, currentSpeed);
 800029e:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <toggleTurnRight+0x70>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <toggleTurnRight+0x70>)
 80002a4:	6812      	ldr	r2, [r2, #0]
 80002a6:	4611      	mov	r1, r2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff4f 	bl	800014c <setSpeed>
  turningRight = true;
 80002ae:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <toggleTurnRight+0x6c>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	701a      	strb	r2, [r3, #0]
  turningLeft = false;
 80002b4:	4b07      	ldr	r3, [pc, #28]	@ (80002d4 <toggleTurnRight+0x68>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	701a      	strb	r2, [r3, #0]
  goingForward = false;
 80002ba:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <toggleTurnRight+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
  goingBackward = false;
 80002c0:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <toggleTurnRight+0x78>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]

  // lewy silnik do przodu
  // prawy silnik do tyłu
  setDirections(true, false, false, true);
 80002c6:	2301      	movs	r3, #1
 80002c8:	2200      	movs	r2, #0
 80002ca:	2100      	movs	r1, #0
 80002cc:	2001      	movs	r0, #1
 80002ce:	f7ff ff51 	bl	8000174 <setDirections>
}
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000118 	.word	0x20000118
 80002d8:	20000119 	.word	0x20000119
 80002dc:	20000000 	.word	0x20000000
 80002e0:	2000011a 	.word	0x2000011a
 80002e4:	2000011b 	.word	0x2000011b

080002e8 <toggleGoForward>:

void toggleGoForward()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  if (goingBackward)
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <toggleGoForward+0x68>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d002      	beq.n	80002fa <toggleGoForward+0x12>
  {
    // przeciwny kierunek zatrzymuje pojazd
    stop();
 80002f4:	f000 f874 	bl	80003e0 <stop>
    return;
 80002f8:	e029      	b.n	800034e <toggleGoForward+0x66>
  }

  else if (goingForward)
 80002fa:	4b16      	ldr	r3, [pc, #88]	@ (8000354 <toggleGoForward+0x6c>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d009      	beq.n	8000316 <toggleGoForward+0x2e>
  {
    if (currentSpeed + SPEED_INCR <= 99)
 8000302:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <toggleGoForward+0x70>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b59      	cmp	r3, #89	@ 0x59
 8000308:	dc07      	bgt.n	800031a <toggleGoForward+0x32>
    {
      currentSpeed += SPEED_INCR;
 800030a:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <toggleGoForward+0x70>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	330a      	adds	r3, #10
 8000310:	4a11      	ldr	r2, [pc, #68]	@ (8000358 <toggleGoForward+0x70>)
 8000312:	6013      	str	r3, [r2, #0]
 8000314:	e001      	b.n	800031a <toggleGoForward+0x32>
    }
  }
  else
  {
    resetDirection();
 8000316:	f7ff ff5d 	bl	80001d4 <resetDirection>
  }

  setSpeed(currentSpeed, currentSpeed);
 800031a:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <toggleGoForward+0x70>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a0e      	ldr	r2, [pc, #56]	@ (8000358 <toggleGoForward+0x70>)
 8000320:	6812      	ldr	r2, [r2, #0]
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ff11 	bl	800014c <setSpeed>
  goingForward = true;
 800032a:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <toggleGoForward+0x6c>)
 800032c:	2201      	movs	r2, #1
 800032e:	701a      	strb	r2, [r3, #0]
  goingBackward = false;
 8000330:	4b07      	ldr	r3, [pc, #28]	@ (8000350 <toggleGoForward+0x68>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
  turningLeft = false;
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <toggleGoForward+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	701a      	strb	r2, [r3, #0]
  turningRight = false;
 800033c:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <toggleGoForward+0x78>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]

  setDirections(true, false, true, false);
 8000342:	2300      	movs	r3, #0
 8000344:	2201      	movs	r2, #1
 8000346:	2100      	movs	r1, #0
 8000348:	2001      	movs	r0, #1
 800034a:	f7ff ff13 	bl	8000174 <setDirections>
}
 800034e:	bd80      	pop	{r7, pc}
 8000350:	2000011b 	.word	0x2000011b
 8000354:	2000011a 	.word	0x2000011a
 8000358:	20000000 	.word	0x20000000
 800035c:	20000118 	.word	0x20000118
 8000360:	20000119 	.word	0x20000119

08000364 <toggleGoBackward>:

void toggleGoBackward()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  if (goingForward)
 8000368:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <toggleGoBackward+0x68>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <toggleGoBackward+0x12>
  {
    // przeciwny kierunek zatrzymuje pojazd
    stop();
 8000370:	f000 f836 	bl	80003e0 <stop>
    return;
 8000374:	e029      	b.n	80003ca <toggleGoBackward+0x66>
  }

  else if (goingBackward)
 8000376:	4b16      	ldr	r3, [pc, #88]	@ (80003d0 <toggleGoBackward+0x6c>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d009      	beq.n	8000392 <toggleGoBackward+0x2e>
  {
    if (currentSpeed + SPEED_INCR <= 99)
 800037e:	4b15      	ldr	r3, [pc, #84]	@ (80003d4 <toggleGoBackward+0x70>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b59      	cmp	r3, #89	@ 0x59
 8000384:	dc07      	bgt.n	8000396 <toggleGoBackward+0x32>
    {
      currentSpeed += SPEED_INCR;
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <toggleGoBackward+0x70>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	330a      	adds	r3, #10
 800038c:	4a11      	ldr	r2, [pc, #68]	@ (80003d4 <toggleGoBackward+0x70>)
 800038e:	6013      	str	r3, [r2, #0]
 8000390:	e001      	b.n	8000396 <toggleGoBackward+0x32>
    }
  }
  else
  {
    resetDirection();
 8000392:	f7ff ff1f 	bl	80001d4 <resetDirection>
  }

  setSpeed(currentSpeed, currentSpeed);
 8000396:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <toggleGoBackward+0x70>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a0e      	ldr	r2, [pc, #56]	@ (80003d4 <toggleGoBackward+0x70>)
 800039c:	6812      	ldr	r2, [r2, #0]
 800039e:	4611      	mov	r1, r2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff fed3 	bl	800014c <setSpeed>
  goingBackward = true;
 80003a6:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <toggleGoBackward+0x6c>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	701a      	strb	r2, [r3, #0]
  goingForward = false;
 80003ac:	4b07      	ldr	r3, [pc, #28]	@ (80003cc <toggleGoBackward+0x68>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
  turningLeft = false;
 80003b2:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <toggleGoBackward+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
  turningRight = false;
 80003b8:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <toggleGoBackward+0x78>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]

  setDirections(false, true, false, true);
 80003be:	2301      	movs	r3, #1
 80003c0:	2200      	movs	r2, #0
 80003c2:	2101      	movs	r1, #1
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff fed5 	bl	8000174 <setDirections>
}
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	2000011a 	.word	0x2000011a
 80003d0:	2000011b 	.word	0x2000011b
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20000118 	.word	0x20000118
 80003dc:	20000119 	.word	0x20000119

080003e0 <stop>:

void stop()
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  goingForward = false;
 80003e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000414 <stop+0x34>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
  goingBackward = false;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <stop+0x38>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
  turningLeft = false;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <stop+0x3c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
  turningRight = false;
 80003f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <stop+0x40>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]

  setSpeed(0, 0);
 80003fc:	2100      	movs	r1, #0
 80003fe:	2000      	movs	r0, #0
 8000400:	f7ff fea4 	bl	800014c <setSpeed>

  setDirections(false, false, false, false);
 8000404:	2300      	movs	r3, #0
 8000406:	2200      	movs	r2, #0
 8000408:	2100      	movs	r1, #0
 800040a:	2000      	movs	r0, #0
 800040c:	f7ff feb2 	bl	8000174 <setDirections>
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	2000011a 	.word	0x2000011a
 8000418:	2000011b 	.word	0x2000011b
 800041c:	20000118 	.word	0x20000118
 8000420:	20000119 	.word	0x20000119

08000424 <shouldGoLeft>:

bool shouldGoLeft()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin);
 8000428:	2108      	movs	r1, #8
 800042a:	4805      	ldr	r0, [pc, #20]	@ (8000440 <shouldGoLeft+0x1c>)
 800042c:	f001 f9ca 	bl	80017c4 <HAL_GPIO_ReadPin>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	bf14      	ite	ne
 8000436:	2301      	movne	r3, #1
 8000438:	2300      	moveq	r3, #0
 800043a:	b2db      	uxtb	r3, r3
}
 800043c:	4618      	mov	r0, r3
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40010c00 	.word	0x40010c00

08000444 <shouldGoRight>:

bool shouldGoRight()
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin);
 8000448:	2110      	movs	r1, #16
 800044a:	4805      	ldr	r0, [pc, #20]	@ (8000460 <shouldGoRight+0x1c>)
 800044c:	f001 f9ba 	bl	80017c4 <HAL_GPIO_ReadPin>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	bf14      	ite	ne
 8000456:	2301      	movne	r3, #1
 8000458:	2300      	moveq	r3, #0
 800045a:	b2db      	uxtb	r3, r3
}
 800045c:	4618      	mov	r0, r3
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40010c00 	.word	0x40010c00

08000464 <shouldGoForward>:

bool shouldGoForward()
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin);
 8000468:	2140      	movs	r1, #64	@ 0x40
 800046a:	4805      	ldr	r0, [pc, #20]	@ (8000480 <shouldGoForward+0x1c>)
 800046c:	f001 f9aa 	bl	80017c4 <HAL_GPIO_ReadPin>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	bf14      	ite	ne
 8000476:	2301      	movne	r3, #1
 8000478:	2300      	moveq	r3, #0
 800047a:	b2db      	uxtb	r3, r3
}
 800047c:	4618      	mov	r0, r3
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40010c00 	.word	0x40010c00

08000484 <shouldGoBackward>:

bool shouldGoBackward()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin);
 8000488:	2180      	movs	r1, #128	@ 0x80
 800048a:	4805      	ldr	r0, [pc, #20]	@ (80004a0 <shouldGoBackward+0x1c>)
 800048c:	f001 f99a 	bl	80017c4 <HAL_GPIO_ReadPin>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	bf14      	ite	ne
 8000496:	2301      	movne	r3, #1
 8000498:	2300      	moveq	r3, #0
 800049a:	b2db      	uxtb	r3, r3
}
 800049c:	4618      	mov	r0, r3
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40010c00 	.word	0x40010c00

080004a4 <displayWriteMode>:

void displayWriteMode(bool autoMode)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
  char str[13];
  snprintf(str, sizeof(str), "Tryb: %s", autoMode ? "auto" : "manual");
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <displayWriteMode+0x14>
 80004b4:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <displayWriteMode+0x58>)
 80004b6:	e000      	b.n	80004ba <displayWriteMode+0x16>
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <displayWriteMode+0x5c>)
 80004ba:	f107 0008 	add.w	r0, r7, #8
 80004be:	4a11      	ldr	r2, [pc, #68]	@ (8000504 <displayWriteMode+0x60>)
 80004c0:	210d      	movs	r1, #13
 80004c2:	f002 feed 	bl	80032a0 <sniprintf>
  ssd1306_FillRectangle(0, 21, 128, 28, Black);
 80004c6:	2300      	movs	r3, #0
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	231c      	movs	r3, #28
 80004cc:	2280      	movs	r2, #128	@ 0x80
 80004ce:	2115      	movs	r1, #21
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 fe09 	bl	80010e8 <ssd1306_FillRectangle>
  ssd1306_SetCursor(0, 21);
 80004d6:	2115      	movs	r1, #21
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 fded 	bl	80010b8 <ssd1306_SetCursor>
  ssd1306_WriteString(str, Font_7x10, White);
 80004de:	4b0a      	ldr	r3, [pc, #40]	@ (8000508 <displayWriteMode+0x64>)
 80004e0:	f107 0008 	add.w	r0, r7, #8
 80004e4:	2201      	movs	r2, #1
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80004ea:	f000 fdbf 	bl	800106c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80004ee:	f000 fcb1 	bl	8000e54 <ssd1306_UpdateScreen>
}
 80004f2:	bf00      	nop
 80004f4:	3718      	adds	r7, #24
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	08003c40 	.word	0x08003c40
 8000500:	08003c48 	.word	0x08003c48
 8000504:	08003c50 	.word	0x08003c50
 8000508:	080043e0 	.word	0x080043e0

0800050c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fe69 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f907 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f9fd 	bl	8000918 <MX_GPIO_Init>
  MX_TIM1_Init();
 800051e:	f000 f96d 	bl	80007fc <MX_TIM1_Init>
  MX_I2C1_Init();
 8000522:	f000 f93d 	bl	80007a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000526:	4b78      	ldr	r3, [pc, #480]	@ (8000708 <main+0x1fc>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	4a72      	ldr	r2, [pc, #456]	@ (8000708 <main+0x1fc>)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	6053      	str	r3, [r2, #4]
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000542:	4b71      	ldr	r3, [pc, #452]	@ (8000708 <main+0x1fc>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	f043 0302 	orr.w	r3, r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4a6b      	ldr	r2, [pc, #428]	@ (8000708 <main+0x1fc>)
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	6053      	str	r3, [r2, #4]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Sterownik port "EN_A"
 800055e:	2100      	movs	r1, #0
 8000560:	486a      	ldr	r0, [pc, #424]	@ (800070c <main+0x200>)
 8000562:	f002 fa6f 	bl	8002a44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Sterownik port "EN_B"
 8000566:	2104      	movs	r1, #4
 8000568:	4868      	ldr	r0, [pc, #416]	@ (800070c <main+0x200>)
 800056a:	f002 fa6b 	bl	8002a44 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000574:	4866      	ldr	r0, [pc, #408]	@ (8000710 <main+0x204>)
 8000576:	f001 f93c 	bl	80017f2 <HAL_GPIO_WritePin>
  ssd1306_Init();
 800057a:	f000 fbe9 	bl	8000d50 <ssd1306_Init>

  displayWriteMode(false);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ff90 	bl	80004a4 <displayWriteMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool prevForward = false;
 8000584:	2300      	movs	r3, #0
 8000586:	75fb      	strb	r3, [r7, #23]
  bool prevBackward = false;
 8000588:	2300      	movs	r3, #0
 800058a:	75bb      	strb	r3, [r7, #22]
  bool prevLeft = false;
 800058c:	2300      	movs	r3, #0
 800058e:	757b      	strb	r3, [r7, #21]
  bool prevRight = false;
 8000590:	2300      	movs	r3, #0
 8000592:	753b      	strb	r3, [r7, #20]

  uint8_t button_prev_state = 0; // 1 = nie wciśnięty (bo GPIO_PIN_RESET = wciśnięty)
 8000594:	2300      	movs	r3, #0
 8000596:	74fb      	strb	r3, [r7, #19]
  uint8_t toggle_state = 0;      // Twój przełączany stan, np. do LED
 8000598:	2300      	movs	r3, #0
 800059a:	74bb      	strb	r3, [r7, #18]

  while (1)
  {
    uint8_t button_current = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);
 800059c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005a0:	485c      	ldr	r0, [pc, #368]	@ (8000714 <main+0x208>)
 80005a2:	f001 f90f 	bl	80017c4 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
    // HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, button_current);

    if (button_prev_state == 0 && button_current == 1)
 80005aa:	7cfb      	ldrb	r3, [r7, #19]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10e      	bne.n	80005ce <main+0xc2>
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d10b      	bne.n	80005ce <main+0xc2>
    {
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ba:	4855      	ldr	r0, [pc, #340]	@ (8000710 <main+0x204>)
 80005bc:	f001 f931 	bl	8001822 <HAL_GPIO_TogglePin>
      toggle_state = !toggle_state;
 80005c0:	7cbb      	ldrb	r3, [r7, #18]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	bf0c      	ite	eq
 80005c6:	2301      	moveq	r3, #1
 80005c8:	2300      	movne	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	74bb      	strb	r3, [r7, #18]
      // displayWriteMode(toggle_state);
    }

    button_prev_state = button_current;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	74fb      	strb	r3, [r7, #19]

    if (
        (HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin) == GPIO_PIN_SET) ||
 80005d2:	2140      	movs	r1, #64	@ 0x40
 80005d4:	484f      	ldr	r0, [pc, #316]	@ (8000714 <main+0x208>)
 80005d6:	f001 f8f5 	bl	80017c4 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
    if (
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d014      	beq.n	800060a <main+0xfe>
        (HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin) == GPIO_PIN_SET) ||
 80005e0:	2180      	movs	r1, #128	@ 0x80
 80005e2:	484c      	ldr	r0, [pc, #304]	@ (8000714 <main+0x208>)
 80005e4:	f001 f8ee 	bl	80017c4 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
        (HAL_GPIO_ReadPin(FORWARD_GPIO_Port, FORWARD_Pin) == GPIO_PIN_SET) ||
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00d      	beq.n	800060a <main+0xfe>
        (HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_SET) ||
 80005ee:	2108      	movs	r1, #8
 80005f0:	4848      	ldr	r0, [pc, #288]	@ (8000714 <main+0x208>)
 80005f2:	f001 f8e7 	bl	80017c4 <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
        (HAL_GPIO_ReadPin(BACKWARD_GPIO_Port, BACKWARD_Pin) == GPIO_PIN_SET) ||
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d006      	beq.n	800060a <main+0xfe>
        (HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin) == GPIO_PIN_SET))
 80005fc:	2110      	movs	r1, #16
 80005fe:	4845      	ldr	r0, [pc, #276]	@ (8000714 <main+0x208>)
 8000600:	f001 f8e0 	bl	80017c4 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
        (HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_SET) ||
 8000606:	2b01      	cmp	r3, #1
 8000608:	d105      	bne.n	8000616 <main+0x10a>
    {
      // zapalenie leda na płytce

      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000610:	483f      	ldr	r0, [pc, #252]	@ (8000710 <main+0x204>)
 8000612:	f001 f8ee 	bl	80017f2 <HAL_GPIO_WritePin>
    }

    bool currentForward = shouldGoForward();
 8000616:	f7ff ff25 	bl	8000464 <shouldGoForward>
 800061a:	4603      	mov	r3, r0
 800061c:	71bb      	strb	r3, [r7, #6]
    bool currentBackward = shouldGoBackward();
 800061e:	f7ff ff31 	bl	8000484 <shouldGoBackward>
 8000622:	4603      	mov	r3, r0
 8000624:	717b      	strb	r3, [r7, #5]
    bool currentLeft = shouldGoLeft();
 8000626:	f7ff fefd 	bl	8000424 <shouldGoLeft>
 800062a:	4603      	mov	r3, r0
 800062c:	713b      	strb	r3, [r7, #4]
    bool currentRight = shouldGoRight();
 800062e:	f7ff ff09 	bl	8000444 <shouldGoRight>
 8000632:	4603      	mov	r3, r0
 8000634:	70fb      	strb	r3, [r7, #3]

    if (currentForward && !prevForward)
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d008      	beq.n	800064e <main+0x142>
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	f083 0301 	eor.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <main+0x142>
    {
      toggleGoForward();
 8000648:	f7ff fe4e 	bl	80002e8 <toggleGoForward>
 800064c:	e041      	b.n	80006d2 <main+0x1c6>
    }
    else if (currentBackward && !prevBackward)
 800064e:	797b      	ldrb	r3, [r7, #5]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d008      	beq.n	8000666 <main+0x15a>
 8000654:	7dbb      	ldrb	r3, [r7, #22]
 8000656:	f083 0301 	eor.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <main+0x15a>
    {
      toggleGoBackward();
 8000660:	f7ff fe80 	bl	8000364 <toggleGoBackward>
 8000664:	e035      	b.n	80006d2 <main+0x1c6>
    }
    else if (currentLeft && !prevLeft)
 8000666:	793b      	ldrb	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <main+0x172>
 800066c:	7d7b      	ldrb	r3, [r7, #21]
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d002      	beq.n	800067e <main+0x172>
    {
      toggleTurnLeft();
 8000678:	f7ff fdba 	bl	80001f0 <toggleTurnLeft>
 800067c:	e029      	b.n	80006d2 <main+0x1c6>
    }
    else if (currentRight && !prevRight)
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d008      	beq.n	8000696 <main+0x18a>
 8000684:	7d3b      	ldrb	r3, [r7, #20]
 8000686:	f083 0301 	eor.w	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <main+0x18a>
    {
      toggleTurnRight();
 8000690:	f7ff fdec 	bl	800026c <toggleTurnRight>
 8000694:	e01d      	b.n	80006d2 <main+0x1c6>
    }
    else if (!goingForward && !goingBackward && !turningLeft && !turningRight)
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <main+0x20c>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	f083 0301 	eor.w	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d016      	beq.n	80006d2 <main+0x1c6>
 80006a4:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <main+0x210>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	f083 0301 	eor.w	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d00f      	beq.n	80006d2 <main+0x1c6>
 80006b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <main+0x214>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	f083 0301 	eor.w	r3, r3, #1
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d008      	beq.n	80006d2 <main+0x1c6>
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <main+0x218>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	f083 0301 	eor.w	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <main+0x1c6>
    {
      // zgaszenie leda na płytce

      // zatrzymanie
      stop();
 80006ce:	f7ff fe87 	bl	80003e0 <stop>
    }

    if (!currentForward && !currentBackward && !currentLeft && !currentRight)
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	f083 0301 	eor.w	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00a      	beq.n	80006f4 <main+0x1e8>
 80006de:	797b      	ldrb	r3, [r7, #5]
 80006e0:	f083 0301 	eor.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d004      	beq.n	80006f4 <main+0x1e8>
 80006ea:	793b      	ldrb	r3, [r7, #4]
 80006ec:	f083 0301 	eor.w	r3, r3, #1
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
    {
      // HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
    }

    prevForward = currentForward;
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	75fb      	strb	r3, [r7, #23]
    prevBackward = currentBackward;
 80006f8:	797b      	ldrb	r3, [r7, #5]
 80006fa:	75bb      	strb	r3, [r7, #22]
    prevLeft = currentLeft;
 80006fc:	793b      	ldrb	r3, [r7, #4]
 80006fe:	757b      	strb	r3, [r7, #21]
    prevRight = currentRight;
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	753b      	strb	r3, [r7, #20]
  {
 8000704:	e74a      	b.n	800059c <main+0x90>
 8000706:	bf00      	nop
 8000708:	40010000 	.word	0x40010000
 800070c:	200000d0 	.word	0x200000d0
 8000710:	40011000 	.word	0x40011000
 8000714:	40010c00 	.word	0x40010c00
 8000718:	2000011a 	.word	0x2000011a
 800071c:	2000011b 	.word	0x2000011b
 8000720:	20000118 	.word	0x20000118
 8000724:	20000119 	.word	0x20000119

08000728 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b090      	sub	sp, #64	@ 0x40
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	2228      	movs	r2, #40	@ 0x28
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fde8 	bl	800330c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074a:	2302      	movs	r3, #2
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074e:	2301      	movs	r3, #1
 8000750:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2310      	movs	r3, #16
 8000754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000756:	2300      	movs	r3, #0
 8000758:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0318 	add.w	r3, r7, #24
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fd24 	bl	80021ac <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800076a:	f000 f951 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800076e:	230f      	movs	r3, #15
 8000770:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 ff92 	bl	80026b0 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000792:	f000 f93d 	bl	8000a10 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3740      	adds	r7, #64	@ 0x40
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_I2C1_Init+0x50>)
 80007a6:	4a13      	ldr	r2, [pc, #76]	@ (80007f4 <MX_I2C1_Init+0x54>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_I2C1_Init+0x50>)
 80007ac:	4a12      	ldr	r2, [pc, #72]	@ (80007f8 <MX_I2C1_Init+0x58>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_I2C1_Init+0x50>)
 80007be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_I2C1_Init+0x50>)
 80007de:	f001 f839 	bl	8001854 <HAL_I2C_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e8:	f000 f912 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000007c 	.word	0x2000007c
 80007f4:	40005400 	.word	0x40005400
 80007f8:	000186a0 	.word	0x000186a0

080007fc <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b092      	sub	sp, #72	@ 0x48
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000802:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
 800081c:	615a      	str	r2, [r3, #20]
 800081e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2220      	movs	r2, #32
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fd70 	bl	800330c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800082c:	4b38      	ldr	r3, [pc, #224]	@ (8000910 <MX_TIM1_Init+0x114>)
 800082e:	4a39      	ldr	r2, [pc, #228]	@ (8000914 <MX_TIM1_Init+0x118>)
 8000830:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000832:	4b37      	ldr	r3, [pc, #220]	@ (8000910 <MX_TIM1_Init+0x114>)
 8000834:	2247      	movs	r2, #71	@ 0x47
 8000836:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b35      	ldr	r3, [pc, #212]	@ (8000910 <MX_TIM1_Init+0x114>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800083e:	4b34      	ldr	r3, [pc, #208]	@ (8000910 <MX_TIM1_Init+0x114>)
 8000840:	2263      	movs	r2, #99	@ 0x63
 8000842:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000844:	4b32      	ldr	r3, [pc, #200]	@ (8000910 <MX_TIM1_Init+0x114>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800084a:	4b31      	ldr	r3, [pc, #196]	@ (8000910 <MX_TIM1_Init+0x114>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b2f      	ldr	r3, [pc, #188]	@ (8000910 <MX_TIM1_Init+0x114>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000856:	482e      	ldr	r0, [pc, #184]	@ (8000910 <MX_TIM1_Init+0x114>)
 8000858:	f002 f8a4 	bl	80029a4 <HAL_TIM_PWM_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000862:	f000 f8d5 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000872:	4619      	mov	r1, r3
 8000874:	4826      	ldr	r0, [pc, #152]	@ (8000910 <MX_TIM1_Init+0x114>)
 8000876:	f002 fc63 	bl	8003140 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000880:	f000 f8c6 	bl	8000a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000884:	2360      	movs	r3, #96	@ 0x60
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	4819      	ldr	r0, [pc, #100]	@ (8000910 <MX_TIM1_Init+0x114>)
 80008aa:	f002 f96d 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80008b4:	f000 f8ac 	bl	8000a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008bc:	2204      	movs	r2, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4813      	ldr	r0, [pc, #76]	@ (8000910 <MX_TIM1_Init+0x114>)
 80008c2:	f002 f961 	bl	8002b88 <HAL_TIM_PWM_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80008cc:	f000 f8a0 	bl	8000a10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	4619      	mov	r1, r3
 80008f2:	4807      	ldr	r0, [pc, #28]	@ (8000910 <MX_TIM1_Init+0x114>)
 80008f4:	f002 fc82 	bl	80031fc <HAL_TIMEx_ConfigBreakDeadTime>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80008fe:	f000 f887 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000902:	4803      	ldr	r0, [pc, #12]	@ (8000910 <MX_TIM1_Init+0x114>)
 8000904:	f000 f92a 	bl	8000b5c <HAL_TIM_MspPostInit>
}
 8000908:	bf00      	nop
 800090a:	3748      	adds	r7, #72	@ 0x48
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000d0 	.word	0x200000d0
 8000914:	40012c00 	.word	0x40012c00

08000918 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	4b35      	ldr	r3, [pc, #212]	@ (8000a04 <MX_GPIO_Init+0xec>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a34      	ldr	r2, [pc, #208]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b32      	ldr	r3, [pc, #200]	@ (8000a04 <MX_GPIO_Init+0xec>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0310 	and.w	r3, r3, #16
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b2f      	ldr	r3, [pc, #188]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a2e      	ldr	r2, [pc, #184]	@ (8000a04 <MX_GPIO_Init+0xec>)
 800094a:	f043 0308 	orr.w	r3, r3, #8
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b2c      	ldr	r3, [pc, #176]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b29      	ldr	r3, [pc, #164]	@ (8000a04 <MX_GPIO_Init+0xec>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a28      	ldr	r2, [pc, #160]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b26      	ldr	r3, [pc, #152]	@ (8000a04 <MX_GPIO_Init+0xec>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800097a:	4823      	ldr	r0, [pc, #140]	@ (8000a08 <MX_GPIO_Init+0xf0>)
 800097c:	f000 ff39 	bl	80017f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN4_Pin | IN3_Pin | IN2_Pin | IN1_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f640 4103 	movw	r1, #3075	@ 0xc03
 8000986:	4821      	ldr	r0, [pc, #132]	@ (8000a0c <MX_GPIO_Init+0xf4>)
 8000988:	f000 ff33 	bl	80017f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800098c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2302      	movs	r3, #2
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	4818      	ldr	r0, [pc, #96]	@ (8000a08 <MX_GPIO_Init+0xf0>)
 80009a6:	f000 fd89 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN4_Pin IN3_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN4_Pin | IN3_Pin | IN2_Pin | IN1_Pin;
 80009aa:	f640 4303 	movw	r3, #3075	@ 0xc03
 80009ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	4619      	mov	r1, r3
 80009c2:	4812      	ldr	r0, [pc, #72]	@ (8000a0c <MX_GPIO_Init+0xf4>)
 80009c4:	f000 fd7a 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80009c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	@ (8000a0c <MX_GPIO_Init+0xf4>)
 80009de:	f000 fd6d 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_3_Pin LINE_2_Pin LINE_1_Pin LEFT_Pin
                           RIGHT_Pin FORWARD_Pin BACKWARD_Pin */
  GPIO_InitStruct.Pin = LINE_3_Pin | LINE_2_Pin | LINE_1_Pin | LEFT_Pin | RIGHT_Pin | FORWARD_Pin | BACKWARD_Pin;
 80009e2:	f24e 03d8 	movw	r3, #57560	@ 0xe0d8
 80009e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_GPIO_Init+0xf4>)
 80009f8:	f000 fd60 	bl	80014bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40011000 	.word	0x40011000
 8000a0c:	40010c00 	.word	0x40010c00

08000a10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <Error_Handler+0x8>

08000a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <HAL_MspInit+0x5c>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	4a14      	ldr	r2, [pc, #80]	@ (8000a78 <HAL_MspInit+0x5c>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6193      	str	r3, [r2, #24]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_MspInit+0x5c>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <HAL_MspInit+0x5c>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a78 <HAL_MspInit+0x5c>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <HAL_MspInit+0x5c>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_MspInit+0x60>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <HAL_MspInit+0x60>)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010000 	.word	0x40010000

08000a80 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000b10 <HAL_I2C_MspInit+0x90>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d132      	bne.n	8000b06 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_I2C_MspInit+0x94>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <HAL_I2C_MspInit+0x94>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <HAL_I2C_MspInit+0x94>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ab8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abe:	2312      	movs	r3, #18
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4812      	ldr	r0, [pc, #72]	@ (8000b18 <HAL_I2C_MspInit+0x98>)
 8000ace:	f000 fcf5 	bl	80014bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000ad2:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_I2C_MspInit+0x9c>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ada:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b1c <HAL_I2C_MspInit+0x9c>)
 8000aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aec:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <HAL_I2C_MspInit+0x94>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a08      	ldr	r2, [pc, #32]	@ (8000b14 <HAL_I2C_MspInit+0x94>)
 8000af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af8:	61d3      	str	r3, [r2, #28]
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_I2C_MspInit+0x94>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	@ 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	40010000 	.word	0x40010000

08000b20 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a09      	ldr	r2, [pc, #36]	@ (8000b54 <HAL_TIM_PWM_MspInit+0x34>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10b      	bne.n	8000b4a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_TIM_PWM_MspInit+0x38>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <HAL_TIM_PWM_MspInit+0x38>)
 8000b38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_TIM_PWM_MspInit+0x38>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40012c00 	.word	0x40012c00
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a10      	ldr	r2, [pc, #64]	@ (8000bb8 <HAL_TIM_MspPostInit+0x5c>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d118      	bne.n	8000bae <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <HAL_TIM_MspPostInit+0x60>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a0e      	ldr	r2, [pc, #56]	@ (8000bbc <HAL_TIM_MspPostInit+0x60>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <HAL_TIM_MspPostInit+0x60>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN_B_Pin|EN_A_Pin;
 8000b94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <HAL_TIM_MspPostInit+0x64>)
 8000baa:	f000 fc87 	bl	80014bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40012c00 	.word	0x40012c00
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010800 	.word	0x40010800

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 fb2e 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f002 fb66 	bl	800331c <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20005000 	.word	0x20005000
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	2000011c 	.word	0x2000011c
 8000c84:	20000478 	.word	0x20000478

08000c88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c94:	f7ff fff8 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480b      	ldr	r0, [pc, #44]	@ (8000cc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c9a:	490c      	ldr	r1, [pc, #48]	@ (8000ccc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a09      	ldr	r2, [pc, #36]	@ (8000cd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cb0:	4c09      	ldr	r4, [pc, #36]	@ (8000cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f002 fb33 	bl	8003328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc2:	f7ff fc23 	bl	800050c <main>
  bx lr
 8000cc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cd0:	0800443c 	.word	0x0800443c
  ldr r2, =_sbss
 8000cd4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cd8:	20000474 	.word	0x20000474

08000cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_2_IRQHandler>

08000cde <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
	...

08000cec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af04      	add	r7, sp, #16
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	9302      	str	r3, [sp, #8]
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	1dfb      	adds	r3, r7, #7
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2301      	movs	r3, #1
 8000d06:	2200      	movs	r2, #0
 8000d08:	2178      	movs	r1, #120	@ 0x78
 8000d0a:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <ssd1306_WriteCommand+0x2c>)
 8000d0c:	f000 fee6 	bl	8001adc <HAL_I2C_Mem_Write>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000007c 	.word	0x2000007c

08000d1c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af04      	add	r7, sp, #16
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2e:	9202      	str	r2, [sp, #8]
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2301      	movs	r3, #1
 8000d38:	2240      	movs	r2, #64	@ 0x40
 8000d3a:	2178      	movs	r1, #120	@ 0x78
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <ssd1306_WriteData+0x30>)
 8000d3e:	f000 fecd 	bl	8001adc <HAL_I2C_Mem_Write>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000007c 	.word	0x2000007c

08000d50 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000d54:	f7ff ffc3 	bl	8000cde <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000d58:	2064      	movs	r0, #100	@ 0x64
 8000d5a:	f000 faa7 	bl	80012ac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 fa24 	bl	80011ac <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000d64:	2020      	movs	r0, #32
 8000d66:	f7ff ffc1 	bl	8000cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff ffbe 	bl	8000cec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d70:	20b0      	movs	r0, #176	@ 0xb0
 8000d72:	f7ff ffbb 	bl	8000cec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000d76:	20c8      	movs	r0, #200	@ 0xc8
 8000d78:	f7ff ffb8 	bl	8000cec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff ffb5 	bl	8000cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000d82:	2010      	movs	r0, #16
 8000d84:	f7ff ffb2 	bl	8000cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000d88:	2040      	movs	r0, #64	@ 0x40
 8000d8a:	f7ff ffaf 	bl	8000cec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000d8e:	20ff      	movs	r0, #255	@ 0xff
 8000d90:	f000 f9f8 	bl	8001184 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000d94:	20a1      	movs	r0, #161	@ 0xa1
 8000d96:	f7ff ffa9 	bl	8000cec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000d9a:	20a6      	movs	r0, #166	@ 0xa6
 8000d9c:	f7ff ffa6 	bl	8000cec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000da0:	20a8      	movs	r0, #168	@ 0xa8
 8000da2:	f7ff ffa3 	bl	8000cec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8000da6:	201f      	movs	r0, #31
 8000da8:	f7ff ffa0 	bl	8000cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000dac:	20a4      	movs	r0, #164	@ 0xa4
 8000dae:	f7ff ff9d 	bl	8000cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000db2:	20d3      	movs	r0, #211	@ 0xd3
 8000db4:	f7ff ff9a 	bl	8000cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff ff97 	bl	8000cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000dbe:	20d5      	movs	r0, #213	@ 0xd5
 8000dc0:	f7ff ff94 	bl	8000cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000dc4:	20f0      	movs	r0, #240	@ 0xf0
 8000dc6:	f7ff ff91 	bl	8000cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000dca:	20d9      	movs	r0, #217	@ 0xd9
 8000dcc:	f7ff ff8e 	bl	8000cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000dd0:	2022      	movs	r0, #34	@ 0x22
 8000dd2:	f7ff ff8b 	bl	8000cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000dd6:	20da      	movs	r0, #218	@ 0xda
 8000dd8:	f7ff ff88 	bl	8000cec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f7ff ff85 	bl	8000cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000de2:	20db      	movs	r0, #219	@ 0xdb
 8000de4:	f7ff ff82 	bl	8000cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000de8:	2020      	movs	r0, #32
 8000dea:	f7ff ff7f 	bl	8000cec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000dee:	208d      	movs	r0, #141	@ 0x8d
 8000df0:	f7ff ff7c 	bl	8000cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000df4:	2014      	movs	r0, #20
 8000df6:	f7ff ff79 	bl	8000cec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 f9d6 	bl	80011ac <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 f80f 	bl	8000e24 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000e06:	f000 f825 	bl	8000e54 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000e0a:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <ssd1306_Init+0xd0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <ssd1306_Init+0xd0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000e16:	4b02      	ldr	r3, [pc, #8]	@ (8000e20 <ssd1306_Init+0xd0>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	711a      	strb	r2, [r3, #4]
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000320 	.word	0x20000320

08000e24 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d101      	bne.n	8000e38 <ssd1306_Fill+0x14>
 8000e34:	2300      	movs	r3, #0
 8000e36:	e000      	b.n	8000e3a <ssd1306_Fill+0x16>
 8000e38:	23ff      	movs	r3, #255	@ 0xff
 8000e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <ssd1306_Fill+0x2c>)
 8000e42:	f002 fa63 	bl	800330c <memset>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000120 	.word	0x20000120

08000e54 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	e016      	b.n	8000e8e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	3b50      	subs	r3, #80	@ 0x50
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff40 	bl	8000cec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff ff3d 	bl	8000cec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000e72:	2010      	movs	r0, #16
 8000e74:	f7ff ff3a 	bl	8000cec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	01db      	lsls	r3, r3, #7
 8000e7c:	4a08      	ldr	r2, [pc, #32]	@ (8000ea0 <ssd1306_UpdateScreen+0x4c>)
 8000e7e:	4413      	add	r3, r2
 8000e80:	2180      	movs	r1, #128	@ 0x80
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff4a 	bl	8000d1c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	d9e5      	bls.n	8000e60 <ssd1306_UpdateScreen+0xc>
    }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000120 	.word	0x20000120

08000ea4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	71bb      	strb	r3, [r7, #6]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db3d      	blt.n	8000f3a <ssd1306_DrawPixel+0x96>
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
 8000ec0:	2b1f      	cmp	r3, #31
 8000ec2:	d83a      	bhi.n	8000f3a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000ec4:	797b      	ldrb	r3, [r7, #5]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d11a      	bne.n	8000f00 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000eca:	79fa      	ldrb	r2, [r7, #7]
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	08db      	lsrs	r3, r3, #3
 8000ed0:	b2d8      	uxtb	r0, r3
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	01db      	lsls	r3, r3, #7
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f44 <ssd1306_DrawPixel+0xa0>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	b25a      	sxtb	r2, r3
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b259      	sxtb	r1, r3
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	01db      	lsls	r3, r3, #7
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b2c9      	uxtb	r1, r1
 8000efa:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <ssd1306_DrawPixel+0xa0>)
 8000efc:	54d1      	strb	r1, [r2, r3]
 8000efe:	e01d      	b.n	8000f3c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f00:	79fa      	ldrb	r2, [r7, #7]
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	08db      	lsrs	r3, r3, #3
 8000f06:	b2d8      	uxtb	r0, r3
 8000f08:	4603      	mov	r3, r0
 8000f0a:	01db      	lsls	r3, r3, #7
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <ssd1306_DrawPixel+0xa0>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	b25a      	sxtb	r2, r3
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	4013      	ands	r3, r2
 8000f28:	b259      	sxtb	r1, r3
 8000f2a:	79fa      	ldrb	r2, [r7, #7]
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	01db      	lsls	r3, r3, #7
 8000f30:	4413      	add	r3, r2
 8000f32:	b2c9      	uxtb	r1, r1
 8000f34:	4a03      	ldr	r2, [pc, #12]	@ (8000f44 <ssd1306_DrawPixel+0xa0>)
 8000f36:	54d1      	strb	r1, [r2, r3]
 8000f38:	e000      	b.n	8000f3c <ssd1306_DrawPixel+0x98>
        return;
 8000f3a:	bf00      	nop
    }
}
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000120 	.word	0x20000120

08000f48 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b089      	sub	sp, #36	@ 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4638      	mov	r0, r7
 8000f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f56:	4623      	mov	r3, r4
 8000f58:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2b1f      	cmp	r3, #31
 8000f5e:	d902      	bls.n	8000f66 <ssd1306_WriteChar+0x1e>
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f64:	d901      	bls.n	8000f6a <ssd1306_WriteChar+0x22>
        return 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e079      	b.n	800105e <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <ssd1306_WriteChar+0x34>
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	3b20      	subs	r3, #32
 8000f76:	4413      	add	r3, r2
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	e000      	b.n	8000f7e <ssd1306_WriteChar+0x36>
 8000f7c:	783b      	ldrb	r3, [r7, #0]
 8000f7e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000f80:	4b39      	ldr	r3, [pc, #228]	@ (8001068 <ssd1306_WriteChar+0x120>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	4413      	add	r3, r2
 8000f8a:	2b80      	cmp	r3, #128	@ 0x80
 8000f8c:	dc06      	bgt.n	8000f9c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000f8e:	4b36      	ldr	r3, [pc, #216]	@ (8001068 <ssd1306_WriteChar+0x120>)
 8000f90:	885b      	ldrh	r3, [r3, #2]
 8000f92:	461a      	mov	r2, r3
 8000f94:	787b      	ldrb	r3, [r7, #1]
 8000f96:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000f98:	2b20      	cmp	r3, #32
 8000f9a:	dd01      	ble.n	8000fa0 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e05e      	b.n	800105e <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	e04d      	b.n	8001042 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	3b20      	subs	r3, #32
 8000fac:	7879      	ldrb	r1, [r7, #1]
 8000fae:	fb01 f303 	mul.w	r3, r1, r3
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	440b      	add	r3, r1
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	e036      	b.n	8001034 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d013      	beq.n	8000ffe <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000fd6:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <ssd1306_WriteChar+0x120>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2d8      	uxtb	r0, r3
 8000fe4:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <ssd1306_WriteChar+0x120>)
 8000fe6:	885b      	ldrh	r3, [r3, #2]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f7ff ff54 	bl	8000ea4 <ssd1306_DrawPixel>
 8000ffc:	e017      	b.n	800102e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <ssd1306_WriteChar+0x120>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4413      	add	r3, r2
 800100a:	b2d8      	uxtb	r0, r3
 800100c:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <ssd1306_WriteChar+0x120>)
 800100e:	885b      	ldrh	r3, [r3, #2]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4413      	add	r3, r2
 8001018:	b2d9      	uxtb	r1, r3
 800101a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf0c      	ite	eq
 8001022:	2301      	moveq	r3, #1
 8001024:	2300      	movne	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	461a      	mov	r2, r3
 800102a:	f7ff ff3b 	bl	8000ea4 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	3301      	adds	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	429a      	cmp	r2, r3
 800103a:	d3c4      	bcc.n	8000fc6 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	3301      	adds	r3, #1
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	787b      	ldrb	r3, [r7, #1]
 8001044:	461a      	mov	r2, r3
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	4293      	cmp	r3, r2
 800104a:	d3ac      	bcc.n	8000fa6 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <ssd1306_WriteChar+0x120>)
 800104e:	881a      	ldrh	r2, [r3, #0]
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	b29b      	uxth	r3, r3
 8001054:	4413      	add	r3, r2
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <ssd1306_WriteChar+0x120>)
 800105a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	@ 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd90      	pop	{r4, r7, pc}
 8001066:	bf00      	nop
 8001068:	20000320 	.word	0x20000320

0800106c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	4638      	mov	r0, r7
 8001076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800107a:	e013      	b.n	80010a4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	7818      	ldrb	r0, [r3, #0]
 8001080:	7e3b      	ldrb	r3, [r7, #24]
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	463b      	mov	r3, r7
 8001086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001088:	f7ff ff5e 	bl	8000f48 <ssd1306_WriteChar>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d002      	beq.n	800109e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	e008      	b.n	80010b0 <ssd1306_WriteString+0x44>
        }
        str++;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e7      	bne.n	800107c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <ssd1306_SetCursor+0x2c>)
 80010ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <ssd1306_SetCursor+0x2c>)
 80010d6:	805a      	strh	r2, [r3, #2]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000320 	.word	0x20000320

080010e8 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	461a      	mov	r2, r3
 80010f6:	4623      	mov	r3, r4
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	4603      	mov	r3, r0
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	460b      	mov	r3, r1
 8001100:	717b      	strb	r3, [r7, #5]
 8001102:	4613      	mov	r3, r2
 8001104:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	4293      	cmp	r3, r2
 800110c:	bf28      	it	cs
 800110e:	4613      	movcs	r3, r2
 8001110:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001112:	797a      	ldrb	r2, [r7, #5]
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	4293      	cmp	r3, r2
 8001118:	bf38      	it	cc
 800111a:	4613      	movcc	r3, r2
 800111c:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800111e:	79ba      	ldrb	r2, [r7, #6]
 8001120:	793b      	ldrb	r3, [r7, #4]
 8001122:	4293      	cmp	r3, r2
 8001124:	bf28      	it	cs
 8001126:	4613      	movcs	r3, r2
 8001128:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800112a:	793a      	ldrb	r2, [r7, #4]
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	4293      	cmp	r3, r2
 8001130:	bf38      	it	cc
 8001132:	4613      	movcc	r3, r2
 8001134:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e017      	b.n	800116c <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	e009      	b.n	8001156 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001142:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001146:	7bf9      	ldrb	r1, [r7, #15]
 8001148:	7bbb      	ldrb	r3, [r7, #14]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff feaa 	bl	8000ea4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	3301      	adds	r3, #1
 8001154:	73bb      	strb	r3, [r7, #14]
 8001156:	7bba      	ldrb	r2, [r7, #14]
 8001158:	7b3b      	ldrb	r3, [r7, #12]
 800115a:	429a      	cmp	r2, r3
 800115c:	d803      	bhi.n	8001166 <ssd1306_FillRectangle+0x7e>
 800115e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001162:	2b00      	cmp	r3, #0
 8001164:	daed      	bge.n	8001142 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	3301      	adds	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	7abb      	ldrb	r3, [r7, #10]
 8001170:	429a      	cmp	r2, r3
 8001172:	d803      	bhi.n	800117c <ssd1306_FillRectangle+0x94>
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b1f      	cmp	r3, #31
 8001178:	d9e0      	bls.n	800113c <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800117a:	bf00      	nop
 800117c:	bf00      	nop
}
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bd90      	pop	{r4, r7, pc}

08001184 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800118e:	2381      	movs	r3, #129	@ 0x81
 8001190:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fda9 	bl	8000cec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fda5 	bl	8000cec <ssd1306_WriteCommand>
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80011bc:	23af      	movs	r3, #175	@ 0xaf
 80011be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <ssd1306_SetDisplayOn+0x38>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	715a      	strb	r2, [r3, #5]
 80011c6:	e004      	b.n	80011d2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80011c8:	23ae      	movs	r3, #174	@ 0xae
 80011ca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <ssd1306_SetDisplayOn+0x38>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd89 	bl	8000cec <ssd1306_WriteCommand>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000320 	.word	0x20000320

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f92b 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fc0a 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f935 	bl	80014a2 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f90b 	bl	800146a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000004 	.word	0x20000004
 800126c:	2000000c 	.word	0x2000000c
 8001270:	20000008 	.word	0x20000008

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <HAL_IncTick+0x1c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_IncTick+0x20>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a03      	ldr	r2, [pc, #12]	@ (8001294 <HAL_IncTick+0x20>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	2000000c 	.word	0x2000000c
 8001294:	20000328 	.word	0x20000328

08001298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b02      	ldr	r3, [pc, #8]	@ (80012a8 <HAL_GetTick+0x10>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000328 	.word	0x20000328

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff fff0 	bl	8001298 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffe0 	bl	8001298 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000000c 	.word	0x2000000c

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	@ (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	@ (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	@ 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	@ 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff90 	bl	8001358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff49 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff5e 	bl	800133c <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff90 	bl	80013ac <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5f 	bl	8001358 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffb0 	bl	8001410 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b08b      	sub	sp, #44	@ 0x2c
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	e169      	b.n	80017a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d0:	2201      	movs	r2, #1
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 8158 	bne.w	800179e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a9a      	ldr	r2, [pc, #616]	@ (800175c <HAL_GPIO_Init+0x2a0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d05e      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 80014f8:	4a98      	ldr	r2, [pc, #608]	@ (800175c <HAL_GPIO_Init+0x2a0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d875      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 80014fe:	4a98      	ldr	r2, [pc, #608]	@ (8001760 <HAL_GPIO_Init+0x2a4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d058      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001504:	4a96      	ldr	r2, [pc, #600]	@ (8001760 <HAL_GPIO_Init+0x2a4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d86f      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800150a:	4a96      	ldr	r2, [pc, #600]	@ (8001764 <HAL_GPIO_Init+0x2a8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d052      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001510:	4a94      	ldr	r2, [pc, #592]	@ (8001764 <HAL_GPIO_Init+0x2a8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d869      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001516:	4a94      	ldr	r2, [pc, #592]	@ (8001768 <HAL_GPIO_Init+0x2ac>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d04c      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 800151c:	4a92      	ldr	r2, [pc, #584]	@ (8001768 <HAL_GPIO_Init+0x2ac>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d863      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001522:	4a92      	ldr	r2, [pc, #584]	@ (800176c <HAL_GPIO_Init+0x2b0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d046      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001528:	4a90      	ldr	r2, [pc, #576]	@ (800176c <HAL_GPIO_Init+0x2b0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d85d      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d82a      	bhi.n	8001588 <HAL_GPIO_Init+0xcc>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d859      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001536:	a201      	add	r2, pc, #4	@ (adr r2, 800153c <HAL_GPIO_Init+0x80>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	080015b7 	.word	0x080015b7
 8001540:	08001591 	.word	0x08001591
 8001544:	080015a3 	.word	0x080015a3
 8001548:	080015e5 	.word	0x080015e5
 800154c:	080015eb 	.word	0x080015eb
 8001550:	080015eb 	.word	0x080015eb
 8001554:	080015eb 	.word	0x080015eb
 8001558:	080015eb 	.word	0x080015eb
 800155c:	080015eb 	.word	0x080015eb
 8001560:	080015eb 	.word	0x080015eb
 8001564:	080015eb 	.word	0x080015eb
 8001568:	080015eb 	.word	0x080015eb
 800156c:	080015eb 	.word	0x080015eb
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015eb 	.word	0x080015eb
 8001578:	080015eb 	.word	0x080015eb
 800157c:	080015eb 	.word	0x080015eb
 8001580:	08001599 	.word	0x08001599
 8001584:	080015ad 	.word	0x080015ad
 8001588:	4a79      	ldr	r2, [pc, #484]	@ (8001770 <HAL_GPIO_Init+0x2b4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158e:	e02c      	b.n	80015ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e029      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	3304      	adds	r3, #4
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e024      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	3308      	adds	r3, #8
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e01f      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	330c      	adds	r3, #12
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e01a      	b.n	80015ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015be:	2304      	movs	r3, #4
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e013      	b.n	80015ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015cc:	2308      	movs	r3, #8
 80015ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	611a      	str	r2, [r3, #16]
          break;
 80015d6:	e009      	b.n	80015ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d8:	2308      	movs	r3, #8
 80015da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	615a      	str	r2, [r3, #20]
          break;
 80015e2:	e003      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e000      	b.n	80015ec <HAL_GPIO_Init+0x130>
          break;
 80015ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2bff      	cmp	r3, #255	@ 0xff
 80015f0:	d801      	bhi.n	80015f6 <HAL_GPIO_Init+0x13a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	e001      	b.n	80015fa <HAL_GPIO_Init+0x13e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3304      	adds	r3, #4
 80015fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2bff      	cmp	r3, #255	@ 0xff
 8001600:	d802      	bhi.n	8001608 <HAL_GPIO_Init+0x14c>
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	e002      	b.n	800160e <HAL_GPIO_Init+0x152>
 8001608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160a:	3b08      	subs	r3, #8
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	210f      	movs	r1, #15
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	401a      	ands	r2, r3
 8001620:	6a39      	ldr	r1, [r7, #32]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 80b1 	beq.w	800179e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800163c:	4b4d      	ldr	r3, [pc, #308]	@ (8001774 <HAL_GPIO_Init+0x2b8>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a4c      	ldr	r2, [pc, #304]	@ (8001774 <HAL_GPIO_Init+0x2b8>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b4a      	ldr	r3, [pc, #296]	@ (8001774 <HAL_GPIO_Init+0x2b8>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001654:	4a48      	ldr	r2, [pc, #288]	@ (8001778 <HAL_GPIO_Init+0x2bc>)
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a40      	ldr	r2, [pc, #256]	@ (800177c <HAL_GPIO_Init+0x2c0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d013      	beq.n	80016a8 <HAL_GPIO_Init+0x1ec>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a3f      	ldr	r2, [pc, #252]	@ (8001780 <HAL_GPIO_Init+0x2c4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d00d      	beq.n	80016a4 <HAL_GPIO_Init+0x1e8>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a3e      	ldr	r2, [pc, #248]	@ (8001784 <HAL_GPIO_Init+0x2c8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d007      	beq.n	80016a0 <HAL_GPIO_Init+0x1e4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3d      	ldr	r2, [pc, #244]	@ (8001788 <HAL_GPIO_Init+0x2cc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d101      	bne.n	800169c <HAL_GPIO_Init+0x1e0>
 8001698:	2303      	movs	r3, #3
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 800169c:	2304      	movs	r3, #4
 800169e:	e004      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_GPIO_Init+0x1ee>
 80016a8:	2300      	movs	r3, #0
 80016aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ac:	f002 0203 	and.w	r2, r2, #3
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	4093      	lsls	r3, r2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ba:	492f      	ldr	r1, [pc, #188]	@ (8001778 <HAL_GPIO_Init+0x2bc>)
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016d4:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	492c      	ldr	r1, [pc, #176]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016e2:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4928      	ldr	r1, [pc, #160]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	4922      	ldr	r1, [pc, #136]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	60cb      	str	r3, [r1, #12]
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	43db      	mvns	r3, r3
 8001712:	491e      	ldr	r1, [pc, #120]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 8001714:	4013      	ands	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001724:	4b19      	ldr	r3, [pc, #100]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4918      	ldr	r1, [pc, #96]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001732:	4b16      	ldr	r3, [pc, #88]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	43db      	mvns	r3, r3
 800173a:	4914      	ldr	r1, [pc, #80]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 800173c:	4013      	ands	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d021      	beq.n	8001790 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	490e      	ldr	r1, [pc, #56]	@ (800178c <HAL_GPIO_Init+0x2d0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e021      	b.n	800179e <HAL_GPIO_Init+0x2e2>
 800175a:	bf00      	nop
 800175c:	10320000 	.word	0x10320000
 8001760:	10310000 	.word	0x10310000
 8001764:	10220000 	.word	0x10220000
 8001768:	10210000 	.word	0x10210000
 800176c:	10120000 	.word	0x10120000
 8001770:	10110000 	.word	0x10110000
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000
 800177c:	40010800 	.word	0x40010800
 8001780:	40010c00 	.word	0x40010c00
 8001784:	40011000 	.word	0x40011000
 8001788:	40011400 	.word	0x40011400
 800178c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	43db      	mvns	r3, r3
 8001798:	4909      	ldr	r1, [pc, #36]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 800179a:	4013      	ands	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	3301      	adds	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f47f ae8e 	bne.w	80014d0 <HAL_GPIO_Init+0x14>
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	372c      	adds	r7, #44	@ 0x2c
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e001      	b.n	80017e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	807b      	strh	r3, [r7, #2]
 80017fe:	4613      	mov	r3, r2
 8001800:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001802:	787b      	ldrb	r3, [r7, #1]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001808:	887a      	ldrh	r2, [r7, #2]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800180e:	e003      	b.n	8001818 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	041a      	lsls	r2, r3, #16
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	611a      	str	r2, [r3, #16]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001834:	887a      	ldrh	r2, [r7, #2]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	041a      	lsls	r2, r3, #16
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43d9      	mvns	r1, r3
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	400b      	ands	r3, r1
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	611a      	str	r2, [r3, #16]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e12b      	b.n	8001abe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff f900 	bl	8000a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2224      	movs	r2, #36	@ 0x24
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018b8:	f001 f842 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 80018bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a81      	ldr	r2, [pc, #516]	@ (8001ac8 <HAL_I2C_Init+0x274>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d807      	bhi.n	80018d8 <HAL_I2C_Init+0x84>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4a80      	ldr	r2, [pc, #512]	@ (8001acc <HAL_I2C_Init+0x278>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	bf94      	ite	ls
 80018d0:	2301      	movls	r3, #1
 80018d2:	2300      	movhi	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	e006      	b.n	80018e6 <HAL_I2C_Init+0x92>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a7d      	ldr	r2, [pc, #500]	@ (8001ad0 <HAL_I2C_Init+0x27c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	bf94      	ite	ls
 80018e0:	2301      	movls	r3, #1
 80018e2:	2300      	movhi	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e0e7      	b.n	8001abe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4a78      	ldr	r2, [pc, #480]	@ (8001ad4 <HAL_I2C_Init+0x280>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0c9b      	lsrs	r3, r3, #18
 80018f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ac8 <HAL_I2C_Init+0x274>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d802      	bhi.n	8001928 <HAL_I2C_Init+0xd4>
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	3301      	adds	r3, #1
 8001926:	e009      	b.n	800193c <HAL_I2C_Init+0xe8>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	4a69      	ldr	r2, [pc, #420]	@ (8001ad8 <HAL_I2C_Init+0x284>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	3301      	adds	r3, #1
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	430b      	orrs	r3, r1
 8001942:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800194e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	495c      	ldr	r1, [pc, #368]	@ (8001ac8 <HAL_I2C_Init+0x274>)
 8001958:	428b      	cmp	r3, r1
 800195a:	d819      	bhi.n	8001990 <HAL_I2C_Init+0x13c>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1e59      	subs	r1, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fbb1 f3f3 	udiv	r3, r1, r3
 800196a:	1c59      	adds	r1, r3, #1
 800196c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001970:	400b      	ands	r3, r1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00a      	beq.n	800198c <HAL_I2C_Init+0x138>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e59      	subs	r1, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fbb1 f3f3 	udiv	r3, r1, r3
 8001984:	3301      	adds	r3, #1
 8001986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198a:	e051      	b.n	8001a30 <HAL_I2C_Init+0x1dc>
 800198c:	2304      	movs	r3, #4
 800198e:	e04f      	b.n	8001a30 <HAL_I2C_Init+0x1dc>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d111      	bne.n	80019bc <HAL_I2C_Init+0x168>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1e58      	subs	r0, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6859      	ldr	r1, [r3, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	440b      	add	r3, r1
 80019a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019aa:	3301      	adds	r3, #1
 80019ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	e012      	b.n	80019e2 <HAL_I2C_Init+0x18e>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1e58      	subs	r0, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	0099      	lsls	r1, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_I2C_Init+0x196>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e022      	b.n	8001a30 <HAL_I2C_Init+0x1dc>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10e      	bne.n	8001a10 <HAL_I2C_Init+0x1bc>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1e58      	subs	r0, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6859      	ldr	r1, [r3, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	440b      	add	r3, r1
 8001a00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a04:	3301      	adds	r3, #1
 8001a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a0e:	e00f      	b.n	8001a30 <HAL_I2C_Init+0x1dc>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1e58      	subs	r0, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	0099      	lsls	r1, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	6809      	ldr	r1, [r1, #0]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69da      	ldr	r2, [r3, #28]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6911      	ldr	r1, [r2, #16]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68d2      	ldr	r2, [r2, #12]
 8001a6a:	4311      	orrs	r1, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	000186a0 	.word	0x000186a0
 8001acc:	001e847f 	.word	0x001e847f
 8001ad0:	003d08ff 	.word	0x003d08ff
 8001ad4:	431bde83 	.word	0x431bde83
 8001ad8:	10624dd3 	.word	0x10624dd3

08001adc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	817b      	strh	r3, [r7, #10]
 8001aee:	460b      	mov	r3, r1
 8001af0:	813b      	strh	r3, [r7, #8]
 8001af2:	4613      	mov	r3, r2
 8001af4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001af6:	f7ff fbcf 	bl	8001298 <HAL_GetTick>
 8001afa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	f040 80d9 	bne.w	8001cbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2319      	movs	r3, #25
 8001b10:	2201      	movs	r2, #1
 8001b12:	496d      	ldr	r1, [pc, #436]	@ (8001cc8 <HAL_I2C_Mem_Write+0x1ec>)
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f971 	bl	8001dfc <I2C_WaitOnFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b20:	2302      	movs	r3, #2
 8001b22:	e0cc      	b.n	8001cbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2C_Mem_Write+0x56>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e0c5      	b.n	8001cbe <HAL_I2C_Mem_Write+0x1e2>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d007      	beq.n	8001b58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2221      	movs	r2, #33	@ 0x21
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2240      	movs	r2, #64	@ 0x40
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a3a      	ldr	r2, [r7, #32]
 8001b82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4a4d      	ldr	r2, [pc, #308]	@ (8001ccc <HAL_I2C_Mem_Write+0x1f0>)
 8001b98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b9a:	88f8      	ldrh	r0, [r7, #6]
 8001b9c:	893a      	ldrh	r2, [r7, #8]
 8001b9e:	8979      	ldrh	r1, [r7, #10]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	4603      	mov	r3, r0
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f890 	bl	8001cd0 <I2C_RequestMemoryWrite>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d052      	beq.n	8001c5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e081      	b.n	8001cbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 fa36 	bl	8002030 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00d      	beq.n	8001be6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d107      	bne.n	8001be2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e06b      	b.n	8001cbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d11b      	bne.n	8001c5c <HAL_I2C_Mem_Write+0x180>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d017      	beq.n	8001c5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	781a      	ldrb	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1aa      	bne.n	8001bba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fa29 	bl	80020c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00d      	beq.n	8001c90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d107      	bne.n	8001c8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e016      	b.n	8001cbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e000      	b.n	8001cbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	00100002 	.word	0x00100002
 8001ccc:	ffff0000 	.word	0xffff0000

08001cd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	4608      	mov	r0, r1
 8001cda:	4611      	mov	r1, r2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4603      	mov	r3, r0
 8001ce0:	817b      	strh	r3, [r7, #10]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	813b      	strh	r3, [r7, #8]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f878 	bl	8001dfc <I2C_WaitOnFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00d      	beq.n	8001d2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d20:	d103      	bne.n	8001d2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e05f      	b.n	8001dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	6a3a      	ldr	r2, [r7, #32]
 8001d42:	492d      	ldr	r1, [pc, #180]	@ (8001df8 <I2C_RequestMemoryWrite+0x128>)
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f8d3 	bl	8001ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e04c      	b.n	8001dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d6c:	6a39      	ldr	r1, [r7, #32]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f95e 	bl	8002030 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00d      	beq.n	8001d96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d107      	bne.n	8001d92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e02b      	b.n	8001dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d105      	bne.n	8001da8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d9c:	893b      	ldrh	r3, [r7, #8]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	611a      	str	r2, [r3, #16]
 8001da6:	e021      	b.n	8001dec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001da8:	893b      	ldrh	r3, [r7, #8]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db8:	6a39      	ldr	r1, [r7, #32]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f938 	bl	8002030 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00d      	beq.n	8001de2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d107      	bne.n	8001dde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e005      	b.n	8001dee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001de2:	893b      	ldrh	r3, [r7, #8]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	00010002 	.word	0x00010002

08001dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e0c:	e048      	b.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e14:	d044      	beq.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e16:	f7ff fa3f 	bl	8001298 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d302      	bcc.n	8001e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d139      	bne.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d10d      	bne.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4013      	ands	r3, r2
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	e00c      	b.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d116      	bne.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	f043 0220 	orr.w	r2, r3, #32
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e023      	b.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	0c1b      	lsrs	r3, r3, #16
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d10d      	bne.n	8001ec6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	e00c      	b.n	8001ee0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d093      	beq.n	8001e0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001efe:	e071      	b.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0e:	d123      	bne.n	8001f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f043 0204 	orr.w	r2, r3, #4
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e067      	b.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5e:	d041      	beq.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f60:	f7ff f99a 	bl	8001298 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d302      	bcc.n	8001f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d136      	bne.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d10c      	bne.n	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	bf14      	ite	ne
 8001f92:	2301      	movne	r3, #1
 8001f94:	2300      	moveq	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	e00b      	b.n	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	f043 0220 	orr.w	r2, r3, #32
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e021      	b.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	0c1b      	lsrs	r3, r3, #16
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d10c      	bne.n	8002008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	e00b      	b.n	8002020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4013      	ands	r3, r2
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf14      	ite	ne
 800201a:	2301      	movne	r3, #1
 800201c:	2300      	moveq	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	f47f af6d 	bne.w	8001f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800203c:	e034      	b.n	80020a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f886 	bl	8002150 <I2C_IsAcknowledgeFailed>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e034      	b.n	80020b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d028      	beq.n	80020a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002056:	f7ff f91f 	bl	8001298 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	429a      	cmp	r2, r3
 8002064:	d302      	bcc.n	800206c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d11d      	bne.n	80020a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002076:	2b80      	cmp	r3, #128	@ 0x80
 8002078:	d016      	beq.n	80020a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	f043 0220 	orr.w	r2, r3, #32
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e007      	b.n	80020b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b2:	2b80      	cmp	r3, #128	@ 0x80
 80020b4:	d1c3      	bne.n	800203e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020cc:	e034      	b.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f83e 	bl	8002150 <I2C_IsAcknowledgeFailed>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e034      	b.n	8002148 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d028      	beq.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e6:	f7ff f8d7 	bl	8001298 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d302      	bcc.n	80020fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d11d      	bne.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b04      	cmp	r3, #4
 8002108:	d016      	beq.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f043 0220 	orr.w	r2, r3, #32
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e007      	b.n	8002148 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d1c3      	bne.n	80020ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002166:	d11b      	bne.n	80021a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002170:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	f043 0204 	orr.w	r2, r3, #4
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e272      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8087 	beq.w	80022da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021cc:	4b92      	ldr	r3, [pc, #584]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d00c      	beq.n	80021f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d112      	bne.n	800220a <HAL_RCC_OscConfig+0x5e>
 80021e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f0:	d10b      	bne.n	800220a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f2:	4b89      	ldr	r3, [pc, #548]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d06c      	beq.n	80022d8 <HAL_RCC_OscConfig+0x12c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d168      	bne.n	80022d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e24c      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002212:	d106      	bne.n	8002222 <HAL_RCC_OscConfig+0x76>
 8002214:	4b80      	ldr	r3, [pc, #512]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a7f      	ldr	r2, [pc, #508]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800221a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	e02e      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0x98>
 800222a:	4b7b      	ldr	r3, [pc, #492]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a7a      	ldr	r2, [pc, #488]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b78      	ldr	r3, [pc, #480]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a77      	ldr	r2, [pc, #476]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e01d      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0xbc>
 800224e:	4b72      	ldr	r3, [pc, #456]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a71      	ldr	r2, [pc, #452]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b6f      	ldr	r3, [pc, #444]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6e      	ldr	r2, [pc, #440]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002268:	4b6b      	ldr	r3, [pc, #428]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a6a      	ldr	r2, [pc, #424]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b68      	ldr	r3, [pc, #416]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a67      	ldr	r2, [pc, #412]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800227e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d013      	beq.n	80022b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff f806 	bl	8001298 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff f802 	bl	8001298 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	@ 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e200      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0xe4>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fff2 	bl	8001298 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7fe ffee 	bl	8001298 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	@ 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1ec      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x10c>
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d063      	beq.n	80023ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022f2:	4b49      	ldr	r3, [pc, #292]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d11c      	bne.n	8002338 <HAL_RCC_OscConfig+0x18c>
 80022fe:	4b46      	ldr	r3, [pc, #280]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d116      	bne.n	8002338 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	4b43      	ldr	r3, [pc, #268]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x176>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e1c0      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	4b3d      	ldr	r3, [pc, #244]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4939      	ldr	r1, [pc, #228]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	e03a      	b.n	80023ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002340:	4b36      	ldr	r3, [pc, #216]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7fe ffa7 	bl	8001298 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234e:	f7fe ffa3 	bl	8001298 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e1a1      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	4b2d      	ldr	r3, [pc, #180]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4927      	ldr	r1, [pc, #156]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
 8002380:	e015      	b.n	80023ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	4b26      	ldr	r3, [pc, #152]	@ (800241c <HAL_RCC_OscConfig+0x270>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7fe ff86 	bl	8001298 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002390:	f7fe ff82 	bl	8001298 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e180      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d03a      	beq.n	8002430 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d019      	beq.n	80023f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c2:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <HAL_RCC_OscConfig+0x274>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7fe ff66 	bl	8001298 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d0:	f7fe ff62 	bl	8001298 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e160      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f000 faba 	bl	8002968 <RCC_Delay>
 80023f4:	e01c      	b.n	8002430 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_RCC_OscConfig+0x274>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fc:	f7fe ff4c 	bl	8001298 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002402:	e00f      	b.n	8002424 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7fe ff48 	bl	8001298 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d908      	bls.n	8002424 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e146      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	42420000 	.word	0x42420000
 8002420:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002424:	4b92      	ldr	r3, [pc, #584]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e9      	bne.n	8002404 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80a6 	beq.w	800258a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	4b8b      	ldr	r3, [pc, #556]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b88      	ldr	r3, [pc, #544]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a87      	ldr	r2, [pc, #540]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b85      	ldr	r3, [pc, #532]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b82      	ldr	r3, [pc, #520]	@ (8002674 <HAL_RCC_OscConfig+0x4c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d118      	bne.n	80024a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002476:	4b7f      	ldr	r3, [pc, #508]	@ (8002674 <HAL_RCC_OscConfig+0x4c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7e      	ldr	r2, [pc, #504]	@ (8002674 <HAL_RCC_OscConfig+0x4c8>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7fe ff09 	bl	8001298 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7fe ff05 	bl	8001298 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	@ 0x64
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e103      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	4b75      	ldr	r3, [pc, #468]	@ (8002674 <HAL_RCC_OscConfig+0x4c8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x312>
 80024b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6213      	str	r3, [r2, #32]
 80024bc:	e02d      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x334>
 80024c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a69      	ldr	r2, [pc, #420]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	4b67      	ldr	r3, [pc, #412]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a66      	ldr	r2, [pc, #408]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	e01c      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_OscConfig+0x356>
 80024e8:	4b61      	ldr	r3, [pc, #388]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a60      	ldr	r2, [pc, #384]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	6213      	str	r3, [r2, #32]
 80024f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	e00b      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 8002502:	4b5b      	ldr	r3, [pc, #364]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a5a      	ldr	r2, [pc, #360]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6213      	str	r3, [r2, #32]
 800250e:	4b58      	ldr	r3, [pc, #352]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a57      	ldr	r2, [pc, #348]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d015      	beq.n	800254e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7fe feb9 	bl	8001298 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe feb5 	bl	8001298 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0b1      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	4b4b      	ldr	r3, [pc, #300]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ee      	beq.n	800252a <HAL_RCC_OscConfig+0x37e>
 800254c:	e014      	b.n	8002578 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7fe fea3 	bl	8001298 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7fe fe9f 	bl	8001298 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e09b      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	4b40      	ldr	r3, [pc, #256]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ee      	bne.n	8002556 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257e:	4b3c      	ldr	r3, [pc, #240]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a3b      	ldr	r2, [pc, #236]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002588:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8087 	beq.w	80026a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002594:	4b36      	ldr	r3, [pc, #216]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d061      	beq.n	8002664 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d146      	bne.n	8002636 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a8:	4b33      	ldr	r3, [pc, #204]	@ (8002678 <HAL_RCC_OscConfig+0x4cc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7fe fe73 	bl	8001298 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b6:	f7fe fe6f 	bl	8001298 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e06d      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c8:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025dc:	d108      	bne.n	80025f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025de:	4b24      	ldr	r3, [pc, #144]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4921      	ldr	r1, [pc, #132]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a19      	ldr	r1, [r3, #32]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	430b      	orrs	r3, r1
 8002602:	491b      	ldr	r1, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <HAL_RCC_OscConfig+0x4cc>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fe43 	bl	8001298 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7fe fe3f 	bl	8001298 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e03d      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x46a>
 8002634:	e035      	b.n	80026a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <HAL_RCC_OscConfig+0x4cc>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe fe2c 	bl	8001298 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fe28 	bl	8001298 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e026      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x498>
 8002662:	e01e      	b.n	80026a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e019      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
 8002678:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_RCC_OscConfig+0x500>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	429a      	cmp	r2, r3
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0d0      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d910      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b67      	ldr	r3, [pc, #412]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	4965      	ldr	r1, [pc, #404]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b63      	ldr	r3, [pc, #396]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0b8      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800270c:	4b59      	ldr	r3, [pc, #356]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a58      	ldr	r2, [pc, #352]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002716:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002724:	4b53      	ldr	r3, [pc, #332]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a52      	ldr	r2, [pc, #328]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800272e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b50      	ldr	r3, [pc, #320]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	494d      	ldr	r1, [pc, #308]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d040      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b47      	ldr	r3, [pc, #284]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d115      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e07f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276e:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e073      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277e:	4b3d      	ldr	r3, [pc, #244]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e06b      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278e:	4b39      	ldr	r3, [pc, #228]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4936      	ldr	r1, [pc, #216]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a0:	f7fe fd7a 	bl	8001298 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fe fd76 	bl	8001298 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e053      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	4b2d      	ldr	r3, [pc, #180]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 020c 	and.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1eb      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d0:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d210      	bcs.n	8002800 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b24      	ldr	r3, [pc, #144]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 0207 	bic.w	r2, r3, #7
 80027e6:	4922      	ldr	r1, [pc, #136]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e032      	b.n	8002866 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4916      	ldr	r1, [pc, #88]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282a:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	490e      	ldr	r1, [pc, #56]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800283e:	f000 f821 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8002842:	4602      	mov	r2, r0
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	490a      	ldr	r1, [pc, #40]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	5ccb      	ldrb	r3, [r1, r3]
 8002852:	fa22 f303 	lsr.w	r3, r2, r3
 8002856:	4a09      	ldr	r2, [pc, #36]	@ (800287c <HAL_RCC_ClockConfig+0x1cc>)
 8002858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800285a:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <HAL_RCC_ClockConfig+0x1d0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fcd8 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40022000 	.word	0x40022000
 8002874:	40021000 	.word	0x40021000
 8002878:	08003c5c 	.word	0x08003c5c
 800287c:	20000004 	.word	0x20000004
 8002880:	20000008 	.word	0x20000008

08002884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800289e:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x94>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d002      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x30>
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0x36>
 80028b2:	e027      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <HAL_RCC_GetSysClockFreq+0x98>)
 80028b6:	613b      	str	r3, [r7, #16]
      break;
 80028b8:	e027      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	0c9b      	lsrs	r3, r3, #18
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	4a17      	ldr	r2, [pc, #92]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028c4:	5cd3      	ldrb	r3, [r2, r3]
 80028c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d010      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028d2:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x94>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	0c5b      	lsrs	r3, r3, #17
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a0d      	ldr	r2, [pc, #52]	@ (800291c <HAL_RCC_GetSysClockFreq+0x98>)
 80028e6:	fb03 f202 	mul.w	r2, r3, r2
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e004      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002928 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	613b      	str	r3, [r7, #16]
      break;
 8002902:	e002      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_RCC_GetSysClockFreq+0x98>)
 8002906:	613b      	str	r3, [r7, #16]
      break;
 8002908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290a:	693b      	ldr	r3, [r7, #16]
}
 800290c:	4618      	mov	r0, r3
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	007a1200 	.word	0x007a1200
 8002920:	080043ec 	.word	0x080043ec
 8002924:	080043fc 	.word	0x080043fc
 8002928:	003d0900 	.word	0x003d0900

0800292c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002930:	4b02      	ldr	r3, [pc, #8]	@ (800293c <HAL_RCC_GetHCLKFreq+0x10>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	20000004 	.word	0x20000004

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002944:	f7ff fff2 	bl	800292c <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	@ (8002964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	08003c6c 	.word	0x08003c6c

08002968 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002970:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <RCC_Delay+0x34>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <RCC_Delay+0x38>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0a5b      	lsrs	r3, r3, #9
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002984:	bf00      	nop
  }
  while (Delay --);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1e5a      	subs	r2, r3, #1
 800298a:	60fa      	str	r2, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f9      	bne.n	8002984 <RCC_Delay+0x1c>
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	20000004 	.word	0x20000004
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e041      	b.n	8002a3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe f8a8 	bl	8000b20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f000 f992 	bl	8002d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_TIM_PWM_Start+0x24>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	bf14      	ite	ne
 8002a60:	2301      	movne	r3, #1
 8002a62:	2300      	moveq	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e022      	b.n	8002aae <HAL_TIM_PWM_Start+0x6a>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d109      	bne.n	8002a82 <HAL_TIM_PWM_Start+0x3e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	e015      	b.n	8002aae <HAL_TIM_PWM_Start+0x6a>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d109      	bne.n	8002a9c <HAL_TIM_PWM_Start+0x58>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e008      	b.n	8002aae <HAL_TIM_PWM_Start+0x6a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e05e      	b.n	8002b74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d104      	bne.n	8002ac6 <HAL_TIM_PWM_Start+0x82>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ac4:	e013      	b.n	8002aee <HAL_TIM_PWM_Start+0xaa>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d104      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0x92>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ad4:	e00b      	b.n	8002aee <HAL_TIM_PWM_Start+0xaa>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0xa2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ae4:	e003      	b.n	8002aee <HAL_TIM_PWM_Start+0xaa>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2201      	movs	r2, #1
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fafe 	bl	80030f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1e      	ldr	r2, [pc, #120]	@ (8002b7c <HAL_TIM_PWM_Start+0x138>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d107      	bne.n	8002b16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a18      	ldr	r2, [pc, #96]	@ (8002b7c <HAL_TIM_PWM_Start+0x138>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00e      	beq.n	8002b3e <HAL_TIM_PWM_Start+0xfa>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b28:	d009      	beq.n	8002b3e <HAL_TIM_PWM_Start+0xfa>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a14      	ldr	r2, [pc, #80]	@ (8002b80 <HAL_TIM_PWM_Start+0x13c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_TIM_PWM_Start+0xfa>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a12      	ldr	r2, [pc, #72]	@ (8002b84 <HAL_TIM_PWM_Start+0x140>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d111      	bne.n	8002b62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b06      	cmp	r3, #6
 8002b4e:	d010      	beq.n	8002b72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b60:	e007      	b.n	8002b72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0201 	orr.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800

08002b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0ae      	b.n	8002d04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b0c      	cmp	r3, #12
 8002bb2:	f200 809f 	bhi.w	8002cf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002bf1 	.word	0x08002bf1
 8002bc0:	08002cf5 	.word	0x08002cf5
 8002bc4:	08002cf5 	.word	0x08002cf5
 8002bc8:	08002cf5 	.word	0x08002cf5
 8002bcc:	08002c31 	.word	0x08002c31
 8002bd0:	08002cf5 	.word	0x08002cf5
 8002bd4:	08002cf5 	.word	0x08002cf5
 8002bd8:	08002cf5 	.word	0x08002cf5
 8002bdc:	08002c73 	.word	0x08002c73
 8002be0:	08002cf5 	.word	0x08002cf5
 8002be4:	08002cf5 	.word	0x08002cf5
 8002be8:	08002cf5 	.word	0x08002cf5
 8002bec:	08002cb3 	.word	0x08002cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f8f6 	bl	8002de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0208 	orr.w	r2, r2, #8
 8002c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0204 	bic.w	r2, r2, #4
 8002c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6999      	ldr	r1, [r3, #24]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	619a      	str	r2, [r3, #24]
      break;
 8002c2e:	e064      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f93c 	bl	8002eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6999      	ldr	r1, [r3, #24]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	021a      	lsls	r2, r3, #8
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	619a      	str	r2, [r3, #24]
      break;
 8002c70:	e043      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f985 	bl	8002f88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0208 	orr.w	r2, r2, #8
 8002c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0204 	bic.w	r2, r2, #4
 8002c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69d9      	ldr	r1, [r3, #28]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	61da      	str	r2, [r3, #28]
      break;
 8002cb0:	e023      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f9cf 	bl	800305c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69d9      	ldr	r1, [r3, #28]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	021a      	lsls	r2, r3, #8
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	61da      	str	r2, [r3, #28]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8002ddc <TIM_Base_SetConfig+0xd0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <TIM_Base_SetConfig+0x30>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d2a:	d007      	beq.n	8002d3c <TIM_Base_SetConfig+0x30>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002de0 <TIM_Base_SetConfig+0xd4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_Base_SetConfig+0x30>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a2b      	ldr	r2, [pc, #172]	@ (8002de4 <TIM_Base_SetConfig+0xd8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a22      	ldr	r2, [pc, #136]	@ (8002ddc <TIM_Base_SetConfig+0xd0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00b      	beq.n	8002d6e <TIM_Base_SetConfig+0x62>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d5c:	d007      	beq.n	8002d6e <TIM_Base_SetConfig+0x62>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1f      	ldr	r2, [pc, #124]	@ (8002de0 <TIM_Base_SetConfig+0xd4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d003      	beq.n	8002d6e <TIM_Base_SetConfig+0x62>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1e      	ldr	r2, [pc, #120]	@ (8002de4 <TIM_Base_SetConfig+0xd8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d108      	bne.n	8002d80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <TIM_Base_SetConfig+0xd0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d103      	bne.n	8002db4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f023 0201 	bic.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	611a      	str	r2, [r3, #16]
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40000800 	.word	0x40000800

08002de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f023 0201 	bic.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f023 0302 	bic.w	r3, r3, #2
 8002e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb0 <TIM_OC1_SetConfig+0xc8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d10c      	bne.n	8002e5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f023 0308 	bic.w	r3, r3, #8
 8002e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a13      	ldr	r2, [pc, #76]	@ (8002eb0 <TIM_OC1_SetConfig+0xc8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d111      	bne.n	8002e8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	621a      	str	r2, [r3, #32]
}
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40012c00 	.word	0x40012c00

08002eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f023 0210 	bic.w	r2, r3, #16
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	021b      	lsls	r3, r3, #8
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 0320 	bic.w	r3, r3, #32
 8002efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f84 <TIM_OC2_SetConfig+0xd0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10d      	bne.n	8002f30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a14      	ldr	r2, [pc, #80]	@ (8002f84 <TIM_OC2_SetConfig+0xd0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d113      	bne.n	8002f60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	40012c00 	.word	0x40012c00

08002f88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8003058 <TIM_OC3_SetConfig+0xd0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10d      	bne.n	8003002 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a14      	ldr	r2, [pc, #80]	@ (8003058 <TIM_OC3_SetConfig+0xd0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d113      	bne.n	8003032 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	621a      	str	r2, [r3, #32]
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40012c00 	.word	0x40012c00

0800305c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800308a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	031b      	lsls	r3, r3, #12
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a0f      	ldr	r2, [pc, #60]	@ (80030f4 <TIM_OC4_SetConfig+0x98>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d109      	bne.n	80030d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	621a      	str	r2, [r3, #32]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	40012c00 	.word	0x40012c00

080030f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	2201      	movs	r2, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a1a      	ldr	r2, [r3, #32]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	43db      	mvns	r3, r3
 800311a:	401a      	ands	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	431a      	orrs	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003154:	2302      	movs	r3, #2
 8003156:	e046      	b.n	80031e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a16      	ldr	r2, [pc, #88]	@ (80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00e      	beq.n	80031ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a4:	d009      	beq.n	80031ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a12      	ldr	r2, [pc, #72]	@ (80031f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a10      	ldr	r2, [pc, #64]	@ (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10c      	bne.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800

080031fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003214:	2302      	movs	r3, #2
 8003216:	e03d      	b.n	8003294 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
	...

080032a0 <sniprintf>:
 80032a0:	b40c      	push	{r2, r3}
 80032a2:	b530      	push	{r4, r5, lr}
 80032a4:	4b18      	ldr	r3, [pc, #96]	@ (8003308 <sniprintf+0x68>)
 80032a6:	1e0c      	subs	r4, r1, #0
 80032a8:	681d      	ldr	r5, [r3, #0]
 80032aa:	b09d      	sub	sp, #116	@ 0x74
 80032ac:	da08      	bge.n	80032c0 <sniprintf+0x20>
 80032ae:	238b      	movs	r3, #139	@ 0x8b
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	602b      	str	r3, [r5, #0]
 80032b6:	b01d      	add	sp, #116	@ 0x74
 80032b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032bc:	b002      	add	sp, #8
 80032be:	4770      	bx	lr
 80032c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80032c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80032ce:	bf0c      	ite	eq
 80032d0:	4623      	moveq	r3, r4
 80032d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80032d6:	9304      	str	r3, [sp, #16]
 80032d8:	9307      	str	r3, [sp, #28]
 80032da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032de:	9002      	str	r0, [sp, #8]
 80032e0:	9006      	str	r0, [sp, #24]
 80032e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80032e6:	4628      	mov	r0, r5
 80032e8:	ab21      	add	r3, sp, #132	@ 0x84
 80032ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80032ec:	a902      	add	r1, sp, #8
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	f000 f9a0 	bl	8003634 <_svfiprintf_r>
 80032f4:	1c43      	adds	r3, r0, #1
 80032f6:	bfbc      	itt	lt
 80032f8:	238b      	movlt	r3, #139	@ 0x8b
 80032fa:	602b      	strlt	r3, [r5, #0]
 80032fc:	2c00      	cmp	r4, #0
 80032fe:	d0da      	beq.n	80032b6 <sniprintf+0x16>
 8003300:	2200      	movs	r2, #0
 8003302:	9b02      	ldr	r3, [sp, #8]
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	e7d6      	b.n	80032b6 <sniprintf+0x16>
 8003308:	20000010 	.word	0x20000010

0800330c <memset>:
 800330c:	4603      	mov	r3, r0
 800330e:	4402      	add	r2, r0
 8003310:	4293      	cmp	r3, r2
 8003312:	d100      	bne.n	8003316 <memset+0xa>
 8003314:	4770      	bx	lr
 8003316:	f803 1b01 	strb.w	r1, [r3], #1
 800331a:	e7f9      	b.n	8003310 <memset+0x4>

0800331c <__errno>:
 800331c:	4b01      	ldr	r3, [pc, #4]	@ (8003324 <__errno+0x8>)
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000010 	.word	0x20000010

08003328 <__libc_init_array>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	2600      	movs	r6, #0
 800332c:	4d0c      	ldr	r5, [pc, #48]	@ (8003360 <__libc_init_array+0x38>)
 800332e:	4c0d      	ldr	r4, [pc, #52]	@ (8003364 <__libc_init_array+0x3c>)
 8003330:	1b64      	subs	r4, r4, r5
 8003332:	10a4      	asrs	r4, r4, #2
 8003334:	42a6      	cmp	r6, r4
 8003336:	d109      	bne.n	800334c <__libc_init_array+0x24>
 8003338:	f000 fc76 	bl	8003c28 <_init>
 800333c:	2600      	movs	r6, #0
 800333e:	4d0a      	ldr	r5, [pc, #40]	@ (8003368 <__libc_init_array+0x40>)
 8003340:	4c0a      	ldr	r4, [pc, #40]	@ (800336c <__libc_init_array+0x44>)
 8003342:	1b64      	subs	r4, r4, r5
 8003344:	10a4      	asrs	r4, r4, #2
 8003346:	42a6      	cmp	r6, r4
 8003348:	d105      	bne.n	8003356 <__libc_init_array+0x2e>
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003350:	4798      	blx	r3
 8003352:	3601      	adds	r6, #1
 8003354:	e7ee      	b.n	8003334 <__libc_init_array+0xc>
 8003356:	f855 3b04 	ldr.w	r3, [r5], #4
 800335a:	4798      	blx	r3
 800335c:	3601      	adds	r6, #1
 800335e:	e7f2      	b.n	8003346 <__libc_init_array+0x1e>
 8003360:	08004434 	.word	0x08004434
 8003364:	08004434 	.word	0x08004434
 8003368:	08004434 	.word	0x08004434
 800336c:	08004438 	.word	0x08004438

08003370 <__retarget_lock_acquire_recursive>:
 8003370:	4770      	bx	lr

08003372 <__retarget_lock_release_recursive>:
 8003372:	4770      	bx	lr

08003374 <memcpy>:
 8003374:	440a      	add	r2, r1
 8003376:	4291      	cmp	r1, r2
 8003378:	f100 33ff 	add.w	r3, r0, #4294967295
 800337c:	d100      	bne.n	8003380 <memcpy+0xc>
 800337e:	4770      	bx	lr
 8003380:	b510      	push	{r4, lr}
 8003382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003386:	4291      	cmp	r1, r2
 8003388:	f803 4f01 	strb.w	r4, [r3, #1]!
 800338c:	d1f9      	bne.n	8003382 <memcpy+0xe>
 800338e:	bd10      	pop	{r4, pc}

08003390 <_free_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4605      	mov	r5, r0
 8003394:	2900      	cmp	r1, #0
 8003396:	d040      	beq.n	800341a <_free_r+0x8a>
 8003398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800339c:	1f0c      	subs	r4, r1, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bfb8      	it	lt
 80033a2:	18e4      	addlt	r4, r4, r3
 80033a4:	f000 f8de 	bl	8003564 <__malloc_lock>
 80033a8:	4a1c      	ldr	r2, [pc, #112]	@ (800341c <_free_r+0x8c>)
 80033aa:	6813      	ldr	r3, [r2, #0]
 80033ac:	b933      	cbnz	r3, 80033bc <_free_r+0x2c>
 80033ae:	6063      	str	r3, [r4, #4]
 80033b0:	6014      	str	r4, [r2, #0]
 80033b2:	4628      	mov	r0, r5
 80033b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033b8:	f000 b8da 	b.w	8003570 <__malloc_unlock>
 80033bc:	42a3      	cmp	r3, r4
 80033be:	d908      	bls.n	80033d2 <_free_r+0x42>
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	1821      	adds	r1, r4, r0
 80033c4:	428b      	cmp	r3, r1
 80033c6:	bf01      	itttt	eq
 80033c8:	6819      	ldreq	r1, [r3, #0]
 80033ca:	685b      	ldreq	r3, [r3, #4]
 80033cc:	1809      	addeq	r1, r1, r0
 80033ce:	6021      	streq	r1, [r4, #0]
 80033d0:	e7ed      	b.n	80033ae <_free_r+0x1e>
 80033d2:	461a      	mov	r2, r3
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	b10b      	cbz	r3, 80033dc <_free_r+0x4c>
 80033d8:	42a3      	cmp	r3, r4
 80033da:	d9fa      	bls.n	80033d2 <_free_r+0x42>
 80033dc:	6811      	ldr	r1, [r2, #0]
 80033de:	1850      	adds	r0, r2, r1
 80033e0:	42a0      	cmp	r0, r4
 80033e2:	d10b      	bne.n	80033fc <_free_r+0x6c>
 80033e4:	6820      	ldr	r0, [r4, #0]
 80033e6:	4401      	add	r1, r0
 80033e8:	1850      	adds	r0, r2, r1
 80033ea:	4283      	cmp	r3, r0
 80033ec:	6011      	str	r1, [r2, #0]
 80033ee:	d1e0      	bne.n	80033b2 <_free_r+0x22>
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4408      	add	r0, r1
 80033f6:	6010      	str	r0, [r2, #0]
 80033f8:	6053      	str	r3, [r2, #4]
 80033fa:	e7da      	b.n	80033b2 <_free_r+0x22>
 80033fc:	d902      	bls.n	8003404 <_free_r+0x74>
 80033fe:	230c      	movs	r3, #12
 8003400:	602b      	str	r3, [r5, #0]
 8003402:	e7d6      	b.n	80033b2 <_free_r+0x22>
 8003404:	6820      	ldr	r0, [r4, #0]
 8003406:	1821      	adds	r1, r4, r0
 8003408:	428b      	cmp	r3, r1
 800340a:	bf01      	itttt	eq
 800340c:	6819      	ldreq	r1, [r3, #0]
 800340e:	685b      	ldreq	r3, [r3, #4]
 8003410:	1809      	addeq	r1, r1, r0
 8003412:	6021      	streq	r1, [r4, #0]
 8003414:	6063      	str	r3, [r4, #4]
 8003416:	6054      	str	r4, [r2, #4]
 8003418:	e7cb      	b.n	80033b2 <_free_r+0x22>
 800341a:	bd38      	pop	{r3, r4, r5, pc}
 800341c:	20000470 	.word	0x20000470

08003420 <sbrk_aligned>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	4e0f      	ldr	r6, [pc, #60]	@ (8003460 <sbrk_aligned+0x40>)
 8003424:	460c      	mov	r4, r1
 8003426:	6831      	ldr	r1, [r6, #0]
 8003428:	4605      	mov	r5, r0
 800342a:	b911      	cbnz	r1, 8003432 <sbrk_aligned+0x12>
 800342c:	f000 fba8 	bl	8003b80 <_sbrk_r>
 8003430:	6030      	str	r0, [r6, #0]
 8003432:	4621      	mov	r1, r4
 8003434:	4628      	mov	r0, r5
 8003436:	f000 fba3 	bl	8003b80 <_sbrk_r>
 800343a:	1c43      	adds	r3, r0, #1
 800343c:	d103      	bne.n	8003446 <sbrk_aligned+0x26>
 800343e:	f04f 34ff 	mov.w	r4, #4294967295
 8003442:	4620      	mov	r0, r4
 8003444:	bd70      	pop	{r4, r5, r6, pc}
 8003446:	1cc4      	adds	r4, r0, #3
 8003448:	f024 0403 	bic.w	r4, r4, #3
 800344c:	42a0      	cmp	r0, r4
 800344e:	d0f8      	beq.n	8003442 <sbrk_aligned+0x22>
 8003450:	1a21      	subs	r1, r4, r0
 8003452:	4628      	mov	r0, r5
 8003454:	f000 fb94 	bl	8003b80 <_sbrk_r>
 8003458:	3001      	adds	r0, #1
 800345a:	d1f2      	bne.n	8003442 <sbrk_aligned+0x22>
 800345c:	e7ef      	b.n	800343e <sbrk_aligned+0x1e>
 800345e:	bf00      	nop
 8003460:	2000046c 	.word	0x2000046c

08003464 <_malloc_r>:
 8003464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003468:	1ccd      	adds	r5, r1, #3
 800346a:	f025 0503 	bic.w	r5, r5, #3
 800346e:	3508      	adds	r5, #8
 8003470:	2d0c      	cmp	r5, #12
 8003472:	bf38      	it	cc
 8003474:	250c      	movcc	r5, #12
 8003476:	2d00      	cmp	r5, #0
 8003478:	4606      	mov	r6, r0
 800347a:	db01      	blt.n	8003480 <_malloc_r+0x1c>
 800347c:	42a9      	cmp	r1, r5
 800347e:	d904      	bls.n	800348a <_malloc_r+0x26>
 8003480:	230c      	movs	r3, #12
 8003482:	6033      	str	r3, [r6, #0]
 8003484:	2000      	movs	r0, #0
 8003486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800348a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003560 <_malloc_r+0xfc>
 800348e:	f000 f869 	bl	8003564 <__malloc_lock>
 8003492:	f8d8 3000 	ldr.w	r3, [r8]
 8003496:	461c      	mov	r4, r3
 8003498:	bb44      	cbnz	r4, 80034ec <_malloc_r+0x88>
 800349a:	4629      	mov	r1, r5
 800349c:	4630      	mov	r0, r6
 800349e:	f7ff ffbf 	bl	8003420 <sbrk_aligned>
 80034a2:	1c43      	adds	r3, r0, #1
 80034a4:	4604      	mov	r4, r0
 80034a6:	d158      	bne.n	800355a <_malloc_r+0xf6>
 80034a8:	f8d8 4000 	ldr.w	r4, [r8]
 80034ac:	4627      	mov	r7, r4
 80034ae:	2f00      	cmp	r7, #0
 80034b0:	d143      	bne.n	800353a <_malloc_r+0xd6>
 80034b2:	2c00      	cmp	r4, #0
 80034b4:	d04b      	beq.n	800354e <_malloc_r+0xea>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	4639      	mov	r1, r7
 80034ba:	4630      	mov	r0, r6
 80034bc:	eb04 0903 	add.w	r9, r4, r3
 80034c0:	f000 fb5e 	bl	8003b80 <_sbrk_r>
 80034c4:	4581      	cmp	r9, r0
 80034c6:	d142      	bne.n	800354e <_malloc_r+0xea>
 80034c8:	6821      	ldr	r1, [r4, #0]
 80034ca:	4630      	mov	r0, r6
 80034cc:	1a6d      	subs	r5, r5, r1
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7ff ffa6 	bl	8003420 <sbrk_aligned>
 80034d4:	3001      	adds	r0, #1
 80034d6:	d03a      	beq.n	800354e <_malloc_r+0xea>
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	442b      	add	r3, r5
 80034dc:	6023      	str	r3, [r4, #0]
 80034de:	f8d8 3000 	ldr.w	r3, [r8]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	bb62      	cbnz	r2, 8003540 <_malloc_r+0xdc>
 80034e6:	f8c8 7000 	str.w	r7, [r8]
 80034ea:	e00f      	b.n	800350c <_malloc_r+0xa8>
 80034ec:	6822      	ldr	r2, [r4, #0]
 80034ee:	1b52      	subs	r2, r2, r5
 80034f0:	d420      	bmi.n	8003534 <_malloc_r+0xd0>
 80034f2:	2a0b      	cmp	r2, #11
 80034f4:	d917      	bls.n	8003526 <_malloc_r+0xc2>
 80034f6:	1961      	adds	r1, r4, r5
 80034f8:	42a3      	cmp	r3, r4
 80034fa:	6025      	str	r5, [r4, #0]
 80034fc:	bf18      	it	ne
 80034fe:	6059      	strne	r1, [r3, #4]
 8003500:	6863      	ldr	r3, [r4, #4]
 8003502:	bf08      	it	eq
 8003504:	f8c8 1000 	streq.w	r1, [r8]
 8003508:	5162      	str	r2, [r4, r5]
 800350a:	604b      	str	r3, [r1, #4]
 800350c:	4630      	mov	r0, r6
 800350e:	f000 f82f 	bl	8003570 <__malloc_unlock>
 8003512:	f104 000b 	add.w	r0, r4, #11
 8003516:	1d23      	adds	r3, r4, #4
 8003518:	f020 0007 	bic.w	r0, r0, #7
 800351c:	1ac2      	subs	r2, r0, r3
 800351e:	bf1c      	itt	ne
 8003520:	1a1b      	subne	r3, r3, r0
 8003522:	50a3      	strne	r3, [r4, r2]
 8003524:	e7af      	b.n	8003486 <_malloc_r+0x22>
 8003526:	6862      	ldr	r2, [r4, #4]
 8003528:	42a3      	cmp	r3, r4
 800352a:	bf0c      	ite	eq
 800352c:	f8c8 2000 	streq.w	r2, [r8]
 8003530:	605a      	strne	r2, [r3, #4]
 8003532:	e7eb      	b.n	800350c <_malloc_r+0xa8>
 8003534:	4623      	mov	r3, r4
 8003536:	6864      	ldr	r4, [r4, #4]
 8003538:	e7ae      	b.n	8003498 <_malloc_r+0x34>
 800353a:	463c      	mov	r4, r7
 800353c:	687f      	ldr	r7, [r7, #4]
 800353e:	e7b6      	b.n	80034ae <_malloc_r+0x4a>
 8003540:	461a      	mov	r2, r3
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	42a3      	cmp	r3, r4
 8003546:	d1fb      	bne.n	8003540 <_malloc_r+0xdc>
 8003548:	2300      	movs	r3, #0
 800354a:	6053      	str	r3, [r2, #4]
 800354c:	e7de      	b.n	800350c <_malloc_r+0xa8>
 800354e:	230c      	movs	r3, #12
 8003550:	4630      	mov	r0, r6
 8003552:	6033      	str	r3, [r6, #0]
 8003554:	f000 f80c 	bl	8003570 <__malloc_unlock>
 8003558:	e794      	b.n	8003484 <_malloc_r+0x20>
 800355a:	6005      	str	r5, [r0, #0]
 800355c:	e7d6      	b.n	800350c <_malloc_r+0xa8>
 800355e:	bf00      	nop
 8003560:	20000470 	.word	0x20000470

08003564 <__malloc_lock>:
 8003564:	4801      	ldr	r0, [pc, #4]	@ (800356c <__malloc_lock+0x8>)
 8003566:	f7ff bf03 	b.w	8003370 <__retarget_lock_acquire_recursive>
 800356a:	bf00      	nop
 800356c:	20000468 	.word	0x20000468

08003570 <__malloc_unlock>:
 8003570:	4801      	ldr	r0, [pc, #4]	@ (8003578 <__malloc_unlock+0x8>)
 8003572:	f7ff befe 	b.w	8003372 <__retarget_lock_release_recursive>
 8003576:	bf00      	nop
 8003578:	20000468 	.word	0x20000468

0800357c <__ssputs_r>:
 800357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003580:	461f      	mov	r7, r3
 8003582:	688e      	ldr	r6, [r1, #8]
 8003584:	4682      	mov	sl, r0
 8003586:	42be      	cmp	r6, r7
 8003588:	460c      	mov	r4, r1
 800358a:	4690      	mov	r8, r2
 800358c:	680b      	ldr	r3, [r1, #0]
 800358e:	d82d      	bhi.n	80035ec <__ssputs_r+0x70>
 8003590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003594:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003598:	d026      	beq.n	80035e8 <__ssputs_r+0x6c>
 800359a:	6965      	ldr	r5, [r4, #20]
 800359c:	6909      	ldr	r1, [r1, #16]
 800359e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035a2:	eba3 0901 	sub.w	r9, r3, r1
 80035a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035aa:	1c7b      	adds	r3, r7, #1
 80035ac:	444b      	add	r3, r9
 80035ae:	106d      	asrs	r5, r5, #1
 80035b0:	429d      	cmp	r5, r3
 80035b2:	bf38      	it	cc
 80035b4:	461d      	movcc	r5, r3
 80035b6:	0553      	lsls	r3, r2, #21
 80035b8:	d527      	bpl.n	800360a <__ssputs_r+0x8e>
 80035ba:	4629      	mov	r1, r5
 80035bc:	f7ff ff52 	bl	8003464 <_malloc_r>
 80035c0:	4606      	mov	r6, r0
 80035c2:	b360      	cbz	r0, 800361e <__ssputs_r+0xa2>
 80035c4:	464a      	mov	r2, r9
 80035c6:	6921      	ldr	r1, [r4, #16]
 80035c8:	f7ff fed4 	bl	8003374 <memcpy>
 80035cc:	89a3      	ldrh	r3, [r4, #12]
 80035ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80035d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d6:	81a3      	strh	r3, [r4, #12]
 80035d8:	6126      	str	r6, [r4, #16]
 80035da:	444e      	add	r6, r9
 80035dc:	6026      	str	r6, [r4, #0]
 80035de:	463e      	mov	r6, r7
 80035e0:	6165      	str	r5, [r4, #20]
 80035e2:	eba5 0509 	sub.w	r5, r5, r9
 80035e6:	60a5      	str	r5, [r4, #8]
 80035e8:	42be      	cmp	r6, r7
 80035ea:	d900      	bls.n	80035ee <__ssputs_r+0x72>
 80035ec:	463e      	mov	r6, r7
 80035ee:	4632      	mov	r2, r6
 80035f0:	4641      	mov	r1, r8
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	f000 faaa 	bl	8003b4c <memmove>
 80035f8:	2000      	movs	r0, #0
 80035fa:	68a3      	ldr	r3, [r4, #8]
 80035fc:	1b9b      	subs	r3, r3, r6
 80035fe:	60a3      	str	r3, [r4, #8]
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	4433      	add	r3, r6
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360a:	462a      	mov	r2, r5
 800360c:	f000 fad6 	bl	8003bbc <_realloc_r>
 8003610:	4606      	mov	r6, r0
 8003612:	2800      	cmp	r0, #0
 8003614:	d1e0      	bne.n	80035d8 <__ssputs_r+0x5c>
 8003616:	4650      	mov	r0, sl
 8003618:	6921      	ldr	r1, [r4, #16]
 800361a:	f7ff feb9 	bl	8003390 <_free_r>
 800361e:	230c      	movs	r3, #12
 8003620:	f8ca 3000 	str.w	r3, [sl]
 8003624:	89a3      	ldrh	r3, [r4, #12]
 8003626:	f04f 30ff 	mov.w	r0, #4294967295
 800362a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800362e:	81a3      	strh	r3, [r4, #12]
 8003630:	e7e9      	b.n	8003606 <__ssputs_r+0x8a>
	...

08003634 <_svfiprintf_r>:
 8003634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003638:	4698      	mov	r8, r3
 800363a:	898b      	ldrh	r3, [r1, #12]
 800363c:	4607      	mov	r7, r0
 800363e:	061b      	lsls	r3, r3, #24
 8003640:	460d      	mov	r5, r1
 8003642:	4614      	mov	r4, r2
 8003644:	b09d      	sub	sp, #116	@ 0x74
 8003646:	d510      	bpl.n	800366a <_svfiprintf_r+0x36>
 8003648:	690b      	ldr	r3, [r1, #16]
 800364a:	b973      	cbnz	r3, 800366a <_svfiprintf_r+0x36>
 800364c:	2140      	movs	r1, #64	@ 0x40
 800364e:	f7ff ff09 	bl	8003464 <_malloc_r>
 8003652:	6028      	str	r0, [r5, #0]
 8003654:	6128      	str	r0, [r5, #16]
 8003656:	b930      	cbnz	r0, 8003666 <_svfiprintf_r+0x32>
 8003658:	230c      	movs	r3, #12
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	b01d      	add	sp, #116	@ 0x74
 8003662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003666:	2340      	movs	r3, #64	@ 0x40
 8003668:	616b      	str	r3, [r5, #20]
 800366a:	2300      	movs	r3, #0
 800366c:	9309      	str	r3, [sp, #36]	@ 0x24
 800366e:	2320      	movs	r3, #32
 8003670:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003674:	2330      	movs	r3, #48	@ 0x30
 8003676:	f04f 0901 	mov.w	r9, #1
 800367a:	f8cd 800c 	str.w	r8, [sp, #12]
 800367e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003818 <_svfiprintf_r+0x1e4>
 8003682:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003686:	4623      	mov	r3, r4
 8003688:	469a      	mov	sl, r3
 800368a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800368e:	b10a      	cbz	r2, 8003694 <_svfiprintf_r+0x60>
 8003690:	2a25      	cmp	r2, #37	@ 0x25
 8003692:	d1f9      	bne.n	8003688 <_svfiprintf_r+0x54>
 8003694:	ebba 0b04 	subs.w	fp, sl, r4
 8003698:	d00b      	beq.n	80036b2 <_svfiprintf_r+0x7e>
 800369a:	465b      	mov	r3, fp
 800369c:	4622      	mov	r2, r4
 800369e:	4629      	mov	r1, r5
 80036a0:	4638      	mov	r0, r7
 80036a2:	f7ff ff6b 	bl	800357c <__ssputs_r>
 80036a6:	3001      	adds	r0, #1
 80036a8:	f000 80a7 	beq.w	80037fa <_svfiprintf_r+0x1c6>
 80036ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036ae:	445a      	add	r2, fp
 80036b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80036b2:	f89a 3000 	ldrb.w	r3, [sl]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 809f 	beq.w	80037fa <_svfiprintf_r+0x1c6>
 80036bc:	2300      	movs	r3, #0
 80036be:	f04f 32ff 	mov.w	r2, #4294967295
 80036c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036c6:	f10a 0a01 	add.w	sl, sl, #1
 80036ca:	9304      	str	r3, [sp, #16]
 80036cc:	9307      	str	r3, [sp, #28]
 80036ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80036d4:	4654      	mov	r4, sl
 80036d6:	2205      	movs	r2, #5
 80036d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036dc:	484e      	ldr	r0, [pc, #312]	@ (8003818 <_svfiprintf_r+0x1e4>)
 80036de:	f000 fa5f 	bl	8003ba0 <memchr>
 80036e2:	9a04      	ldr	r2, [sp, #16]
 80036e4:	b9d8      	cbnz	r0, 800371e <_svfiprintf_r+0xea>
 80036e6:	06d0      	lsls	r0, r2, #27
 80036e8:	bf44      	itt	mi
 80036ea:	2320      	movmi	r3, #32
 80036ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036f0:	0711      	lsls	r1, r2, #28
 80036f2:	bf44      	itt	mi
 80036f4:	232b      	movmi	r3, #43	@ 0x2b
 80036f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036fa:	f89a 3000 	ldrb.w	r3, [sl]
 80036fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003700:	d015      	beq.n	800372e <_svfiprintf_r+0xfa>
 8003702:	4654      	mov	r4, sl
 8003704:	2000      	movs	r0, #0
 8003706:	f04f 0c0a 	mov.w	ip, #10
 800370a:	9a07      	ldr	r2, [sp, #28]
 800370c:	4621      	mov	r1, r4
 800370e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003712:	3b30      	subs	r3, #48	@ 0x30
 8003714:	2b09      	cmp	r3, #9
 8003716:	d94b      	bls.n	80037b0 <_svfiprintf_r+0x17c>
 8003718:	b1b0      	cbz	r0, 8003748 <_svfiprintf_r+0x114>
 800371a:	9207      	str	r2, [sp, #28]
 800371c:	e014      	b.n	8003748 <_svfiprintf_r+0x114>
 800371e:	eba0 0308 	sub.w	r3, r0, r8
 8003722:	fa09 f303 	lsl.w	r3, r9, r3
 8003726:	4313      	orrs	r3, r2
 8003728:	46a2      	mov	sl, r4
 800372a:	9304      	str	r3, [sp, #16]
 800372c:	e7d2      	b.n	80036d4 <_svfiprintf_r+0xa0>
 800372e:	9b03      	ldr	r3, [sp, #12]
 8003730:	1d19      	adds	r1, r3, #4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	9103      	str	r1, [sp, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	bfbb      	ittet	lt
 800373a:	425b      	neglt	r3, r3
 800373c:	f042 0202 	orrlt.w	r2, r2, #2
 8003740:	9307      	strge	r3, [sp, #28]
 8003742:	9307      	strlt	r3, [sp, #28]
 8003744:	bfb8      	it	lt
 8003746:	9204      	strlt	r2, [sp, #16]
 8003748:	7823      	ldrb	r3, [r4, #0]
 800374a:	2b2e      	cmp	r3, #46	@ 0x2e
 800374c:	d10a      	bne.n	8003764 <_svfiprintf_r+0x130>
 800374e:	7863      	ldrb	r3, [r4, #1]
 8003750:	2b2a      	cmp	r3, #42	@ 0x2a
 8003752:	d132      	bne.n	80037ba <_svfiprintf_r+0x186>
 8003754:	9b03      	ldr	r3, [sp, #12]
 8003756:	3402      	adds	r4, #2
 8003758:	1d1a      	adds	r2, r3, #4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	9203      	str	r2, [sp, #12]
 800375e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003762:	9305      	str	r3, [sp, #20]
 8003764:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800381c <_svfiprintf_r+0x1e8>
 8003768:	2203      	movs	r2, #3
 800376a:	4650      	mov	r0, sl
 800376c:	7821      	ldrb	r1, [r4, #0]
 800376e:	f000 fa17 	bl	8003ba0 <memchr>
 8003772:	b138      	cbz	r0, 8003784 <_svfiprintf_r+0x150>
 8003774:	2240      	movs	r2, #64	@ 0x40
 8003776:	9b04      	ldr	r3, [sp, #16]
 8003778:	eba0 000a 	sub.w	r0, r0, sl
 800377c:	4082      	lsls	r2, r0
 800377e:	4313      	orrs	r3, r2
 8003780:	3401      	adds	r4, #1
 8003782:	9304      	str	r3, [sp, #16]
 8003784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003788:	2206      	movs	r2, #6
 800378a:	4825      	ldr	r0, [pc, #148]	@ (8003820 <_svfiprintf_r+0x1ec>)
 800378c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003790:	f000 fa06 	bl	8003ba0 <memchr>
 8003794:	2800      	cmp	r0, #0
 8003796:	d036      	beq.n	8003806 <_svfiprintf_r+0x1d2>
 8003798:	4b22      	ldr	r3, [pc, #136]	@ (8003824 <_svfiprintf_r+0x1f0>)
 800379a:	bb1b      	cbnz	r3, 80037e4 <_svfiprintf_r+0x1b0>
 800379c:	9b03      	ldr	r3, [sp, #12]
 800379e:	3307      	adds	r3, #7
 80037a0:	f023 0307 	bic.w	r3, r3, #7
 80037a4:	3308      	adds	r3, #8
 80037a6:	9303      	str	r3, [sp, #12]
 80037a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037aa:	4433      	add	r3, r6
 80037ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80037ae:	e76a      	b.n	8003686 <_svfiprintf_r+0x52>
 80037b0:	460c      	mov	r4, r1
 80037b2:	2001      	movs	r0, #1
 80037b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80037b8:	e7a8      	b.n	800370c <_svfiprintf_r+0xd8>
 80037ba:	2300      	movs	r3, #0
 80037bc:	f04f 0c0a 	mov.w	ip, #10
 80037c0:	4619      	mov	r1, r3
 80037c2:	3401      	adds	r4, #1
 80037c4:	9305      	str	r3, [sp, #20]
 80037c6:	4620      	mov	r0, r4
 80037c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037cc:	3a30      	subs	r2, #48	@ 0x30
 80037ce:	2a09      	cmp	r2, #9
 80037d0:	d903      	bls.n	80037da <_svfiprintf_r+0x1a6>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0c6      	beq.n	8003764 <_svfiprintf_r+0x130>
 80037d6:	9105      	str	r1, [sp, #20]
 80037d8:	e7c4      	b.n	8003764 <_svfiprintf_r+0x130>
 80037da:	4604      	mov	r4, r0
 80037dc:	2301      	movs	r3, #1
 80037de:	fb0c 2101 	mla	r1, ip, r1, r2
 80037e2:	e7f0      	b.n	80037c6 <_svfiprintf_r+0x192>
 80037e4:	ab03      	add	r3, sp, #12
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	462a      	mov	r2, r5
 80037ea:	4638      	mov	r0, r7
 80037ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003828 <_svfiprintf_r+0x1f4>)
 80037ee:	a904      	add	r1, sp, #16
 80037f0:	f3af 8000 	nop.w
 80037f4:	1c42      	adds	r2, r0, #1
 80037f6:	4606      	mov	r6, r0
 80037f8:	d1d6      	bne.n	80037a8 <_svfiprintf_r+0x174>
 80037fa:	89ab      	ldrh	r3, [r5, #12]
 80037fc:	065b      	lsls	r3, r3, #25
 80037fe:	f53f af2d 	bmi.w	800365c <_svfiprintf_r+0x28>
 8003802:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003804:	e72c      	b.n	8003660 <_svfiprintf_r+0x2c>
 8003806:	ab03      	add	r3, sp, #12
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	462a      	mov	r2, r5
 800380c:	4638      	mov	r0, r7
 800380e:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <_svfiprintf_r+0x1f4>)
 8003810:	a904      	add	r1, sp, #16
 8003812:	f000 f87d 	bl	8003910 <_printf_i>
 8003816:	e7ed      	b.n	80037f4 <_svfiprintf_r+0x1c0>
 8003818:	080043fe 	.word	0x080043fe
 800381c:	08004404 	.word	0x08004404
 8003820:	08004408 	.word	0x08004408
 8003824:	00000000 	.word	0x00000000
 8003828:	0800357d 	.word	0x0800357d

0800382c <_printf_common>:
 800382c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	4616      	mov	r6, r2
 8003832:	4698      	mov	r8, r3
 8003834:	688a      	ldr	r2, [r1, #8]
 8003836:	690b      	ldr	r3, [r1, #16]
 8003838:	4607      	mov	r7, r0
 800383a:	4293      	cmp	r3, r2
 800383c:	bfb8      	it	lt
 800383e:	4613      	movlt	r3, r2
 8003840:	6033      	str	r3, [r6, #0]
 8003842:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003846:	460c      	mov	r4, r1
 8003848:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800384c:	b10a      	cbz	r2, 8003852 <_printf_common+0x26>
 800384e:	3301      	adds	r3, #1
 8003850:	6033      	str	r3, [r6, #0]
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	0699      	lsls	r1, r3, #26
 8003856:	bf42      	ittt	mi
 8003858:	6833      	ldrmi	r3, [r6, #0]
 800385a:	3302      	addmi	r3, #2
 800385c:	6033      	strmi	r3, [r6, #0]
 800385e:	6825      	ldr	r5, [r4, #0]
 8003860:	f015 0506 	ands.w	r5, r5, #6
 8003864:	d106      	bne.n	8003874 <_printf_common+0x48>
 8003866:	f104 0a19 	add.w	sl, r4, #25
 800386a:	68e3      	ldr	r3, [r4, #12]
 800386c:	6832      	ldr	r2, [r6, #0]
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	42ab      	cmp	r3, r5
 8003872:	dc2b      	bgt.n	80038cc <_printf_common+0xa0>
 8003874:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003878:	6822      	ldr	r2, [r4, #0]
 800387a:	3b00      	subs	r3, #0
 800387c:	bf18      	it	ne
 800387e:	2301      	movne	r3, #1
 8003880:	0692      	lsls	r2, r2, #26
 8003882:	d430      	bmi.n	80038e6 <_printf_common+0xba>
 8003884:	4641      	mov	r1, r8
 8003886:	4638      	mov	r0, r7
 8003888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800388c:	47c8      	blx	r9
 800388e:	3001      	adds	r0, #1
 8003890:	d023      	beq.n	80038da <_printf_common+0xae>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	6922      	ldr	r2, [r4, #16]
 8003896:	f003 0306 	and.w	r3, r3, #6
 800389a:	2b04      	cmp	r3, #4
 800389c:	bf14      	ite	ne
 800389e:	2500      	movne	r5, #0
 80038a0:	6833      	ldreq	r3, [r6, #0]
 80038a2:	f04f 0600 	mov.w	r6, #0
 80038a6:	bf08      	it	eq
 80038a8:	68e5      	ldreq	r5, [r4, #12]
 80038aa:	f104 041a 	add.w	r4, r4, #26
 80038ae:	bf08      	it	eq
 80038b0:	1aed      	subeq	r5, r5, r3
 80038b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80038b6:	bf08      	it	eq
 80038b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038bc:	4293      	cmp	r3, r2
 80038be:	bfc4      	itt	gt
 80038c0:	1a9b      	subgt	r3, r3, r2
 80038c2:	18ed      	addgt	r5, r5, r3
 80038c4:	42b5      	cmp	r5, r6
 80038c6:	d11a      	bne.n	80038fe <_printf_common+0xd2>
 80038c8:	2000      	movs	r0, #0
 80038ca:	e008      	b.n	80038de <_printf_common+0xb2>
 80038cc:	2301      	movs	r3, #1
 80038ce:	4652      	mov	r2, sl
 80038d0:	4641      	mov	r1, r8
 80038d2:	4638      	mov	r0, r7
 80038d4:	47c8      	blx	r9
 80038d6:	3001      	adds	r0, #1
 80038d8:	d103      	bne.n	80038e2 <_printf_common+0xb6>
 80038da:	f04f 30ff 	mov.w	r0, #4294967295
 80038de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e2:	3501      	adds	r5, #1
 80038e4:	e7c1      	b.n	800386a <_printf_common+0x3e>
 80038e6:	2030      	movs	r0, #48	@ 0x30
 80038e8:	18e1      	adds	r1, r4, r3
 80038ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038f4:	4422      	add	r2, r4
 80038f6:	3302      	adds	r3, #2
 80038f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038fc:	e7c2      	b.n	8003884 <_printf_common+0x58>
 80038fe:	2301      	movs	r3, #1
 8003900:	4622      	mov	r2, r4
 8003902:	4641      	mov	r1, r8
 8003904:	4638      	mov	r0, r7
 8003906:	47c8      	blx	r9
 8003908:	3001      	adds	r0, #1
 800390a:	d0e6      	beq.n	80038da <_printf_common+0xae>
 800390c:	3601      	adds	r6, #1
 800390e:	e7d9      	b.n	80038c4 <_printf_common+0x98>

08003910 <_printf_i>:
 8003910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003914:	7e0f      	ldrb	r7, [r1, #24]
 8003916:	4691      	mov	r9, r2
 8003918:	2f78      	cmp	r7, #120	@ 0x78
 800391a:	4680      	mov	r8, r0
 800391c:	460c      	mov	r4, r1
 800391e:	469a      	mov	sl, r3
 8003920:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003922:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003926:	d807      	bhi.n	8003938 <_printf_i+0x28>
 8003928:	2f62      	cmp	r7, #98	@ 0x62
 800392a:	d80a      	bhi.n	8003942 <_printf_i+0x32>
 800392c:	2f00      	cmp	r7, #0
 800392e:	f000 80d1 	beq.w	8003ad4 <_printf_i+0x1c4>
 8003932:	2f58      	cmp	r7, #88	@ 0x58
 8003934:	f000 80b8 	beq.w	8003aa8 <_printf_i+0x198>
 8003938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800393c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003940:	e03a      	b.n	80039b8 <_printf_i+0xa8>
 8003942:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003946:	2b15      	cmp	r3, #21
 8003948:	d8f6      	bhi.n	8003938 <_printf_i+0x28>
 800394a:	a101      	add	r1, pc, #4	@ (adr r1, 8003950 <_printf_i+0x40>)
 800394c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003950:	080039a9 	.word	0x080039a9
 8003954:	080039bd 	.word	0x080039bd
 8003958:	08003939 	.word	0x08003939
 800395c:	08003939 	.word	0x08003939
 8003960:	08003939 	.word	0x08003939
 8003964:	08003939 	.word	0x08003939
 8003968:	080039bd 	.word	0x080039bd
 800396c:	08003939 	.word	0x08003939
 8003970:	08003939 	.word	0x08003939
 8003974:	08003939 	.word	0x08003939
 8003978:	08003939 	.word	0x08003939
 800397c:	08003abb 	.word	0x08003abb
 8003980:	080039e7 	.word	0x080039e7
 8003984:	08003a75 	.word	0x08003a75
 8003988:	08003939 	.word	0x08003939
 800398c:	08003939 	.word	0x08003939
 8003990:	08003add 	.word	0x08003add
 8003994:	08003939 	.word	0x08003939
 8003998:	080039e7 	.word	0x080039e7
 800399c:	08003939 	.word	0x08003939
 80039a0:	08003939 	.word	0x08003939
 80039a4:	08003a7d 	.word	0x08003a7d
 80039a8:	6833      	ldr	r3, [r6, #0]
 80039aa:	1d1a      	adds	r2, r3, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6032      	str	r2, [r6, #0]
 80039b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039b8:	2301      	movs	r3, #1
 80039ba:	e09c      	b.n	8003af6 <_printf_i+0x1e6>
 80039bc:	6833      	ldr	r3, [r6, #0]
 80039be:	6820      	ldr	r0, [r4, #0]
 80039c0:	1d19      	adds	r1, r3, #4
 80039c2:	6031      	str	r1, [r6, #0]
 80039c4:	0606      	lsls	r6, r0, #24
 80039c6:	d501      	bpl.n	80039cc <_printf_i+0xbc>
 80039c8:	681d      	ldr	r5, [r3, #0]
 80039ca:	e003      	b.n	80039d4 <_printf_i+0xc4>
 80039cc:	0645      	lsls	r5, r0, #25
 80039ce:	d5fb      	bpl.n	80039c8 <_printf_i+0xb8>
 80039d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039d4:	2d00      	cmp	r5, #0
 80039d6:	da03      	bge.n	80039e0 <_printf_i+0xd0>
 80039d8:	232d      	movs	r3, #45	@ 0x2d
 80039da:	426d      	negs	r5, r5
 80039dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039e0:	230a      	movs	r3, #10
 80039e2:	4858      	ldr	r0, [pc, #352]	@ (8003b44 <_printf_i+0x234>)
 80039e4:	e011      	b.n	8003a0a <_printf_i+0xfa>
 80039e6:	6821      	ldr	r1, [r4, #0]
 80039e8:	6833      	ldr	r3, [r6, #0]
 80039ea:	0608      	lsls	r0, r1, #24
 80039ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80039f0:	d402      	bmi.n	80039f8 <_printf_i+0xe8>
 80039f2:	0649      	lsls	r1, r1, #25
 80039f4:	bf48      	it	mi
 80039f6:	b2ad      	uxthmi	r5, r5
 80039f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80039fa:	6033      	str	r3, [r6, #0]
 80039fc:	bf14      	ite	ne
 80039fe:	230a      	movne	r3, #10
 8003a00:	2308      	moveq	r3, #8
 8003a02:	4850      	ldr	r0, [pc, #320]	@ (8003b44 <_printf_i+0x234>)
 8003a04:	2100      	movs	r1, #0
 8003a06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a0a:	6866      	ldr	r6, [r4, #4]
 8003a0c:	2e00      	cmp	r6, #0
 8003a0e:	60a6      	str	r6, [r4, #8]
 8003a10:	db05      	blt.n	8003a1e <_printf_i+0x10e>
 8003a12:	6821      	ldr	r1, [r4, #0]
 8003a14:	432e      	orrs	r6, r5
 8003a16:	f021 0104 	bic.w	r1, r1, #4
 8003a1a:	6021      	str	r1, [r4, #0]
 8003a1c:	d04b      	beq.n	8003ab6 <_printf_i+0x1a6>
 8003a1e:	4616      	mov	r6, r2
 8003a20:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a24:	fb03 5711 	mls	r7, r3, r1, r5
 8003a28:	5dc7      	ldrb	r7, [r0, r7]
 8003a2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a2e:	462f      	mov	r7, r5
 8003a30:	42bb      	cmp	r3, r7
 8003a32:	460d      	mov	r5, r1
 8003a34:	d9f4      	bls.n	8003a20 <_printf_i+0x110>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d10b      	bne.n	8003a52 <_printf_i+0x142>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	07df      	lsls	r7, r3, #31
 8003a3e:	d508      	bpl.n	8003a52 <_printf_i+0x142>
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	6861      	ldr	r1, [r4, #4]
 8003a44:	4299      	cmp	r1, r3
 8003a46:	bfde      	ittt	le
 8003a48:	2330      	movle	r3, #48	@ 0x30
 8003a4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a52:	1b92      	subs	r2, r2, r6
 8003a54:	6122      	str	r2, [r4, #16]
 8003a56:	464b      	mov	r3, r9
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	f8cd a000 	str.w	sl, [sp]
 8003a60:	aa03      	add	r2, sp, #12
 8003a62:	f7ff fee3 	bl	800382c <_printf_common>
 8003a66:	3001      	adds	r0, #1
 8003a68:	d14a      	bne.n	8003b00 <_printf_i+0x1f0>
 8003a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6e:	b004      	add	sp, #16
 8003a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	f043 0320 	orr.w	r3, r3, #32
 8003a7a:	6023      	str	r3, [r4, #0]
 8003a7c:	2778      	movs	r7, #120	@ 0x78
 8003a7e:	4832      	ldr	r0, [pc, #200]	@ (8003b48 <_printf_i+0x238>)
 8003a80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	6831      	ldr	r1, [r6, #0]
 8003a88:	061f      	lsls	r7, r3, #24
 8003a8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a8e:	d402      	bmi.n	8003a96 <_printf_i+0x186>
 8003a90:	065f      	lsls	r7, r3, #25
 8003a92:	bf48      	it	mi
 8003a94:	b2ad      	uxthmi	r5, r5
 8003a96:	6031      	str	r1, [r6, #0]
 8003a98:	07d9      	lsls	r1, r3, #31
 8003a9a:	bf44      	itt	mi
 8003a9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003aa0:	6023      	strmi	r3, [r4, #0]
 8003aa2:	b11d      	cbz	r5, 8003aac <_printf_i+0x19c>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	e7ad      	b.n	8003a04 <_printf_i+0xf4>
 8003aa8:	4826      	ldr	r0, [pc, #152]	@ (8003b44 <_printf_i+0x234>)
 8003aaa:	e7e9      	b.n	8003a80 <_printf_i+0x170>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	f023 0320 	bic.w	r3, r3, #32
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	e7f6      	b.n	8003aa4 <_printf_i+0x194>
 8003ab6:	4616      	mov	r6, r2
 8003ab8:	e7bd      	b.n	8003a36 <_printf_i+0x126>
 8003aba:	6833      	ldr	r3, [r6, #0]
 8003abc:	6825      	ldr	r5, [r4, #0]
 8003abe:	1d18      	adds	r0, r3, #4
 8003ac0:	6961      	ldr	r1, [r4, #20]
 8003ac2:	6030      	str	r0, [r6, #0]
 8003ac4:	062e      	lsls	r6, r5, #24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	d501      	bpl.n	8003ace <_printf_i+0x1be>
 8003aca:	6019      	str	r1, [r3, #0]
 8003acc:	e002      	b.n	8003ad4 <_printf_i+0x1c4>
 8003ace:	0668      	lsls	r0, r5, #25
 8003ad0:	d5fb      	bpl.n	8003aca <_printf_i+0x1ba>
 8003ad2:	8019      	strh	r1, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	4616      	mov	r6, r2
 8003ad8:	6123      	str	r3, [r4, #16]
 8003ada:	e7bc      	b.n	8003a56 <_printf_i+0x146>
 8003adc:	6833      	ldr	r3, [r6, #0]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	1d1a      	adds	r2, r3, #4
 8003ae2:	6032      	str	r2, [r6, #0]
 8003ae4:	681e      	ldr	r6, [r3, #0]
 8003ae6:	6862      	ldr	r2, [r4, #4]
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 f859 	bl	8003ba0 <memchr>
 8003aee:	b108      	cbz	r0, 8003af4 <_printf_i+0x1e4>
 8003af0:	1b80      	subs	r0, r0, r6
 8003af2:	6060      	str	r0, [r4, #4]
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	6123      	str	r3, [r4, #16]
 8003af8:	2300      	movs	r3, #0
 8003afa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003afe:	e7aa      	b.n	8003a56 <_printf_i+0x146>
 8003b00:	4632      	mov	r2, r6
 8003b02:	4649      	mov	r1, r9
 8003b04:	4640      	mov	r0, r8
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	47d0      	blx	sl
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d0ad      	beq.n	8003a6a <_printf_i+0x15a>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	079b      	lsls	r3, r3, #30
 8003b12:	d413      	bmi.n	8003b3c <_printf_i+0x22c>
 8003b14:	68e0      	ldr	r0, [r4, #12]
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	4298      	cmp	r0, r3
 8003b1a:	bfb8      	it	lt
 8003b1c:	4618      	movlt	r0, r3
 8003b1e:	e7a6      	b.n	8003a6e <_printf_i+0x15e>
 8003b20:	2301      	movs	r3, #1
 8003b22:	4632      	mov	r2, r6
 8003b24:	4649      	mov	r1, r9
 8003b26:	4640      	mov	r0, r8
 8003b28:	47d0      	blx	sl
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d09d      	beq.n	8003a6a <_printf_i+0x15a>
 8003b2e:	3501      	adds	r5, #1
 8003b30:	68e3      	ldr	r3, [r4, #12]
 8003b32:	9903      	ldr	r1, [sp, #12]
 8003b34:	1a5b      	subs	r3, r3, r1
 8003b36:	42ab      	cmp	r3, r5
 8003b38:	dcf2      	bgt.n	8003b20 <_printf_i+0x210>
 8003b3a:	e7eb      	b.n	8003b14 <_printf_i+0x204>
 8003b3c:	2500      	movs	r5, #0
 8003b3e:	f104 0619 	add.w	r6, r4, #25
 8003b42:	e7f5      	b.n	8003b30 <_printf_i+0x220>
 8003b44:	0800440f 	.word	0x0800440f
 8003b48:	08004420 	.word	0x08004420

08003b4c <memmove>:
 8003b4c:	4288      	cmp	r0, r1
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	eb01 0402 	add.w	r4, r1, r2
 8003b54:	d902      	bls.n	8003b5c <memmove+0x10>
 8003b56:	4284      	cmp	r4, r0
 8003b58:	4623      	mov	r3, r4
 8003b5a:	d807      	bhi.n	8003b6c <memmove+0x20>
 8003b5c:	1e43      	subs	r3, r0, #1
 8003b5e:	42a1      	cmp	r1, r4
 8003b60:	d008      	beq.n	8003b74 <memmove+0x28>
 8003b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b6a:	e7f8      	b.n	8003b5e <memmove+0x12>
 8003b6c:	4601      	mov	r1, r0
 8003b6e:	4402      	add	r2, r0
 8003b70:	428a      	cmp	r2, r1
 8003b72:	d100      	bne.n	8003b76 <memmove+0x2a>
 8003b74:	bd10      	pop	{r4, pc}
 8003b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b7e:	e7f7      	b.n	8003b70 <memmove+0x24>

08003b80 <_sbrk_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	2300      	movs	r3, #0
 8003b84:	4d05      	ldr	r5, [pc, #20]	@ (8003b9c <_sbrk_r+0x1c>)
 8003b86:	4604      	mov	r4, r0
 8003b88:	4608      	mov	r0, r1
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	f7fd f846 	bl	8000c1c <_sbrk>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_sbrk_r+0x1a>
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_sbrk_r+0x1a>
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	20000464 	.word	0x20000464

08003ba0 <memchr>:
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	b510      	push	{r4, lr}
 8003ba4:	b2c9      	uxtb	r1, r1
 8003ba6:	4402      	add	r2, r0
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	d101      	bne.n	8003bb2 <memchr+0x12>
 8003bae:	2000      	movs	r0, #0
 8003bb0:	e003      	b.n	8003bba <memchr+0x1a>
 8003bb2:	7804      	ldrb	r4, [r0, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	428c      	cmp	r4, r1
 8003bb8:	d1f6      	bne.n	8003ba8 <memchr+0x8>
 8003bba:	bd10      	pop	{r4, pc}

08003bbc <_realloc_r>:
 8003bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc0:	4607      	mov	r7, r0
 8003bc2:	4614      	mov	r4, r2
 8003bc4:	460d      	mov	r5, r1
 8003bc6:	b921      	cbnz	r1, 8003bd2 <_realloc_r+0x16>
 8003bc8:	4611      	mov	r1, r2
 8003bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bce:	f7ff bc49 	b.w	8003464 <_malloc_r>
 8003bd2:	b92a      	cbnz	r2, 8003be0 <_realloc_r+0x24>
 8003bd4:	f7ff fbdc 	bl	8003390 <_free_r>
 8003bd8:	4625      	mov	r5, r4
 8003bda:	4628      	mov	r0, r5
 8003bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003be0:	f000 f81a 	bl	8003c18 <_malloc_usable_size_r>
 8003be4:	4284      	cmp	r4, r0
 8003be6:	4606      	mov	r6, r0
 8003be8:	d802      	bhi.n	8003bf0 <_realloc_r+0x34>
 8003bea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bee:	d8f4      	bhi.n	8003bda <_realloc_r+0x1e>
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	f7ff fc36 	bl	8003464 <_malloc_r>
 8003bf8:	4680      	mov	r8, r0
 8003bfa:	b908      	cbnz	r0, 8003c00 <_realloc_r+0x44>
 8003bfc:	4645      	mov	r5, r8
 8003bfe:	e7ec      	b.n	8003bda <_realloc_r+0x1e>
 8003c00:	42b4      	cmp	r4, r6
 8003c02:	4622      	mov	r2, r4
 8003c04:	4629      	mov	r1, r5
 8003c06:	bf28      	it	cs
 8003c08:	4632      	movcs	r2, r6
 8003c0a:	f7ff fbb3 	bl	8003374 <memcpy>
 8003c0e:	4629      	mov	r1, r5
 8003c10:	4638      	mov	r0, r7
 8003c12:	f7ff fbbd 	bl	8003390 <_free_r>
 8003c16:	e7f1      	b.n	8003bfc <_realloc_r+0x40>

08003c18 <_malloc_usable_size_r>:
 8003c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c1c:	1f18      	subs	r0, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bfbc      	itt	lt
 8003c22:	580b      	ldrlt	r3, [r1, r0]
 8003c24:	18c0      	addlt	r0, r0, r3
 8003c26:	4770      	bx	lr

08003c28 <_init>:
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	bf00      	nop
 8003c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2e:	bc08      	pop	{r3}
 8003c30:	469e      	mov	lr, r3
 8003c32:	4770      	bx	lr

08003c34 <_fini>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr
